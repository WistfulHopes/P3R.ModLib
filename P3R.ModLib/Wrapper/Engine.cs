using P3R.ModLib.Native;
using UE4SSDotNetFramework.Framework;

namespace P3R.ModLib.Wrapper;

public unsafe class MaterialExpressionVertexNormalWS : ObjectBase<UMaterialExpressionVertexNormalWS>
{
    public MaterialExpressionVertexNormalWS(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionVertexTangentWS : ObjectBase<UMaterialExpressionVertexTangentWS>
{
    public MaterialExpressionVertexTangentWS(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionViewProperty : ObjectBase<UMaterialExpressionViewProperty>
{
    public MaterialExpressionViewProperty(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionViewSize : ObjectBase<UMaterialExpressionViewSize>
{
    public MaterialExpressionViewSize(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionVirtualTextureFeatureSwitch : ObjectBase<UMaterialExpressionVirtualTextureFeatureSwitch>
{
    public MaterialExpressionVirtualTextureFeatureSwitch(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionVolumetricAdvancedMaterialInput : ObjectBase<UMaterialExpressionVolumetricAdvancedMaterialInput>
{
    public MaterialExpressionVolumetricAdvancedMaterialInput(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionVolumetricAdvancedMaterialOutput : ObjectBase<UMaterialExpressionVolumetricAdvancedMaterialOutput>
{
    public MaterialExpressionVolumetricAdvancedMaterialOutput(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionWorldPosition : ObjectBase<UMaterialExpressionWorldPosition>
{
    public MaterialExpressionWorldPosition(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialFunctionInterface : ObjectBase<UMaterialFunctionInterface>
{
    public MaterialFunctionInterface(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialFunction : ObjectBase<UMaterialFunction>
{
    public MaterialFunction(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialFunctionInstance : ObjectBase<UMaterialFunctionInstance>
{
    public MaterialFunctionInstance(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialFunctionMaterialLayer : ObjectBase<UMaterialFunctionMaterialLayer>
{
    public MaterialFunctionMaterialLayer(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialFunctionMaterialLayerInstance : ObjectBase<UMaterialFunctionMaterialLayerInstance>
{
    public MaterialFunctionMaterialLayerInstance(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialFunctionMaterialLayerBlend : ObjectBase<UMaterialFunctionMaterialLayerBlend>
{
    public MaterialFunctionMaterialLayerBlend(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialFunctionMaterialLayerBlendInstance : ObjectBase<UMaterialFunctionMaterialLayerBlendInstance>
{
    public MaterialFunctionMaterialLayerBlendInstance(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialInstanceActor : ObjectBase<AMaterialInstanceActor>
{
    public MaterialInstanceActor(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialInstanceDynamic : ObjectBase<UMaterialInstanceDynamic>
{
    public MaterialInstanceDynamic(IntPtr pointer) : base(pointer) {}
    public void SetVectorParameterValueByInfo(ref FMaterialParameterInfo ParameterInfo, FLinearColor Value)
    {
        Span<(string name, object value)> @params = [
            ("ParameterInfo", ParameterInfo), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetVectorParameterValueByInfo"), @params);
    }
    public void SetVectorParameterValue(FName ParameterName, FLinearColor Value)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetVectorParameterValue"), @params);
    }
    public void SetTextureParameterValueByInfo(ref FMaterialParameterInfo ParameterInfo, UTexture* Value)
    {
        Span<(string name, object value)> @params = [
            ("ParameterInfo", ParameterInfo), 
            ("Value", (IntPtr)Value)
        ];
        ProcessEvent(GetFunction("SetTextureParameterValueByInfo"), @params);
    }
    public void SetTextureParameterValue(FName ParameterName, UTexture* Value)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName), 
            ("Value", (IntPtr)Value)
        ];
        ProcessEvent(GetFunction("SetTextureParameterValue"), @params);
    }
    public void SetScalarParameterValueByInfo(ref FMaterialParameterInfo ParameterInfo, float Value)
    {
        Span<(string name, object value)> @params = [
            ("ParameterInfo", ParameterInfo), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetScalarParameterValueByInfo"), @params);
    }
    public void SetScalarParameterValue(FName ParameterName, float Value)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetScalarParameterValue"), @params);
    }
    public void K2_InterpolateMaterialInstanceParams(UMaterialInstance* SourceA, UMaterialInstance* SourceB, float Alpha)
    {
        Span<(string name, object value)> @params = [
            ("SourceA", (IntPtr)SourceA), 
            ("SourceB", (IntPtr)SourceB), 
            ("Alpha", Alpha)
        ];
        ProcessEvent(GetFunction("K2_InterpolateMaterialInstanceParams"), @params);
    }
    public FLinearColor K2_GetVectorParameterValueByInfo(ref FMaterialParameterInfo ParameterInfo)
    {
        Span<(string name, object value)> @params = [
            ("ParameterInfo", ParameterInfo)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("K2_GetVectorParameterValueByInfo"), @params);
    }
    public FLinearColor K2_GetVectorParameterValue(FName ParameterName)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("K2_GetVectorParameterValue"), @params);
    }
    public UTexture* K2_GetTextureParameterValueByInfo(ref FMaterialParameterInfo ParameterInfo)
    {
        Span<(string name, object value)> @params = [
            ("ParameterInfo", ParameterInfo)
        ];
        return (UTexture*)ProcessEvent<IntPtr>(GetFunction("K2_GetTextureParameterValueByInfo"), @params);
    }
    public UTexture* K2_GetTextureParameterValue(FName ParameterName)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName)
        ];
        return (UTexture*)ProcessEvent<IntPtr>(GetFunction("K2_GetTextureParameterValue"), @params);
    }
    public float K2_GetScalarParameterValueByInfo(ref FMaterialParameterInfo ParameterInfo)
    {
        Span<(string name, object value)> @params = [
            ("ParameterInfo", ParameterInfo)
        ];
        return ProcessEvent<float>(GetFunction("K2_GetScalarParameterValueByInfo"), @params);
    }
    public float K2_GetScalarParameterValue(FName ParameterName)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName)
        ];
        return ProcessEvent<float>(GetFunction("K2_GetScalarParameterValue"), @params);
    }
    public void K2_CopyMaterialInstanceParameters(UMaterialInterface* Source, bool bQuickParametersOnly)
    {
        Span<(string name, object value)> @params = [
            ("Source", (IntPtr)Source), 
            ("bQuickParametersOnly", bQuickParametersOnly)
        ];
        ProcessEvent(GetFunction("K2_CopyMaterialInstanceParameters"), @params);
    }
    public void CopyParameterOverrides(UMaterialInstance* MaterialInstance)
    {
        Span<(string name, object value)> @params = [
            ("MaterialInstance", (IntPtr)MaterialInstance)
        ];
        ProcessEvent(GetFunction("CopyParameterOverrides"), @params);
    }
    public void CopyInterpParameters(UMaterialInstance* Source)
    {
        Span<(string name, object value)> @params = [
            ("Source", (IntPtr)Source)
        ];
        ProcessEvent(GetFunction("CopyInterpParameters"), @params);
    }
}

public unsafe class MaterialParameterCollection : ObjectBase<UMaterialParameterCollection>
{
    public MaterialParameterCollection(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialParameterCollectionInstance : ObjectBase<UMaterialParameterCollectionInstance>
{
    public MaterialParameterCollectionInstance(IntPtr pointer) : base(pointer) {}
}

public unsafe class MatineeActor : ObjectBase<AMatineeActor>
{
    public MatineeActor(IntPtr pointer) : base(pointer) {}
    public void Stop()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Stop"), @params);
    }
    public void SetPosition(float NewPosition, bool bJump)
    {
        Span<(string name, object value)> @params = [
            ("NewPosition", NewPosition), 
            ("bJump", bJump)
        ];
        ProcessEvent(GetFunction("SetPosition"), @params);
    }
    public void SetLoopingState(bool bNewLooping)
    {
        Span<(string name, object value)> @params = [
            ("bNewLooping", bNewLooping)
        ];
        ProcessEvent(GetFunction("SetLoopingState"), @params);
    }
    public void Reverse()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Reverse"), @params);
    }
    public void Play()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Play"), @params);
    }
    public void Pause()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Pause"), @params);
    }
    public void EnableGroupByName(FString GroupName, bool bEnable)
    {
        Span<(string name, object value)> @params = [
            ("GroupName", GroupName), 
            ("bEnable", bEnable)
        ];
        ProcessEvent(GetFunction("EnableGroupByName"), @params);
    }
    public void ChangePlaybackDirection()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ChangePlaybackDirection"), @params);
    }
}

public unsafe class MatineeActorCameraAnim : ObjectBase<AMatineeActorCameraAnim>
{
    public MatineeActorCameraAnim(IntPtr pointer) : base(pointer) {}
}

public unsafe class MatineeAnimInterface : ObjectBase<IMatineeAnimInterface>
{
    public MatineeAnimInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class MatineeInterface : ObjectBase<IMatineeInterface>
{
    public MatineeInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class MeshMergeCullingVolume : ObjectBase<AMeshMergeCullingVolume>
{
    public MeshMergeCullingVolume(IntPtr pointer) : base(pointer) {}}

public unsafe class MeshSimplificationSettings : ObjectBase<UMeshSimplificationSettings>
{
    public MeshSimplificationSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class MeshVertexPainterKismetLibrary : ObjectBase<UMeshVertexPainterKismetLibrary>
{
    public MeshVertexPainterKismetLibrary(IntPtr pointer) : base(pointer) {}
    public void RemovePaintedVertices(UStaticMeshComponent* StaticMeshComponent)
    {
        Span<(string name, object value)> @params = [
            ("StaticMeshComponent", (IntPtr)StaticMeshComponent)
        ];
        ProcessEvent(GetFunction("RemovePaintedVertices"), @params);
    }
    public void PaintVerticesSingleColor(UStaticMeshComponent* StaticMeshComponent, ref FLinearColor FillColor, bool bConvertToSRGB)
    {
        Span<(string name, object value)> @params = [
            ("StaticMeshComponent", (IntPtr)StaticMeshComponent), 
            ("FillColor", FillColor), 
            ("bConvertToSRGB", bConvertToSRGB)
        ];
        ProcessEvent(GetFunction("PaintVerticesSingleColor"), @params);
    }
    public void PaintVerticesLerpAlongAxis(UStaticMeshComponent* StaticMeshComponent, ref FLinearColor StartColor, ref FLinearColor EndColor, EVertexPaintAxis Axis, bool bConvertToSRGB)
    {
        Span<(string name, object value)> @params = [
            ("StaticMeshComponent", (IntPtr)StaticMeshComponent), 
            ("StartColor", StartColor), 
            ("EndColor", EndColor), 
            ("Axis", Axis), 
            ("bConvertToSRGB", bConvertToSRGB)
        ];
        ProcessEvent(GetFunction("PaintVerticesLerpAlongAxis"), @params);
    }
}

public unsafe class MicroTransactionBase : ObjectBase<UMicroTransactionBase>
{
    public MicroTransactionBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class ModelComponent : ObjectBase<UModelComponent>
{
    public ModelComponent(IntPtr pointer) : base(pointer) {}
}

public unsafe class MorphTarget : ObjectBase<UMorphTarget>
{
    public MorphTarget(IntPtr pointer) : base(pointer) {}
}

public unsafe class NavAgentInterface : ObjectBase<INavAgentInterface>
{
    public NavAgentInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class NavAreaBase : ObjectBase<UNavAreaBase>
{
    public NavAreaBase(IntPtr pointer) : base(pointer) {}}

public unsafe class NavCollisionBase : ObjectBase<UNavCollisionBase>
{
    public NavCollisionBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class NavEdgeProviderInterface : ObjectBase<INavEdgeProviderInterface>
{
    public NavEdgeProviderInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class NavigationDataChunk : ObjectBase<UNavigationDataChunk>
{
    public NavigationDataChunk(IntPtr pointer) : base(pointer) {}
}

public unsafe class NavigationDataInterface : ObjectBase<INavigationDataInterface>
{
    public NavigationDataInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class NavigationSystemBase : ObjectBase<UNavigationSystemBase>
{
    public NavigationSystemBase(IntPtr pointer) : base(pointer) {}}

public unsafe class NavigationSystemConfig : ObjectBase<UNavigationSystemConfig>
{
    public NavigationSystemConfig(IntPtr pointer) : base(pointer) {}
}

public unsafe class NullNavSysConfig : ObjectBase<UNullNavSysConfig>
{
    public NullNavSysConfig(IntPtr pointer) : base(pointer) {}}

public unsafe class NavLinkDefinition : ObjectBase<UNavLinkDefinition>
{
    public NavLinkDefinition(IntPtr pointer) : base(pointer) {}
}

public unsafe class NavPathObserverInterface : ObjectBase<INavPathObserverInterface>
{
    public NavPathObserverInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class NavRelevantInterface : ObjectBase<INavRelevantInterface>
{
    public NavRelevantInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class SimulatedClientNetConnection : ObjectBase<USimulatedClientNetConnection>
{
    public SimulatedClientNetConnection(IntPtr pointer) : base(pointer) {}}

public unsafe class NetPushModelHelpers : ObjectBase<UNetPushModelHelpers>
{
    public NetPushModelHelpers(IntPtr pointer) : base(pointer) {}
    public void MarkPropertyDirtyFromRepIndex(UObject* Object, int RepIndex, FName PropertyName)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("RepIndex", RepIndex), 
            ("PropertyName", PropertyName)
        ];
        ProcessEvent(GetFunction("MarkPropertyDirtyFromRepIndex"), @params);
    }
    public void MarkPropertyDirty(UObject* Object, FName PropertyName)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName)
        ];
        ProcessEvent(GetFunction("MarkPropertyDirty"), @params);
    }
}

public unsafe class NetworkPredictionInterface : ObjectBase<INetworkPredictionInterface>
{
    public NetworkPredictionInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class NetworkSettings : ObjectBase<UNetworkSettings>
{
    public NetworkSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class NodeMappingContainer : ObjectBase<UNodeMappingContainer>
{
    public NodeMappingContainer(IntPtr pointer) : base(pointer) {}
}

public unsafe class NodeMappingProviderInterface : ObjectBase<INodeMappingProviderInterface>
{
    public NodeMappingProviderInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class Note : ObjectBase<ANote>
{
    public Note(IntPtr pointer) : base(pointer) {}}

public unsafe class ObjectLibrary : ObjectBase<UObjectLibrary>
{
    public ObjectLibrary(IntPtr pointer) : base(pointer) {}
}

public unsafe class ObjectReferencer : ObjectBase<UObjectReferencer>
{
    public ObjectReferencer(IntPtr pointer) : base(pointer) {}
}

public unsafe class ObjectTraceWorldSubsystem : ObjectBase<UObjectTraceWorldSubsystem>
{
    public ObjectTraceWorldSubsystem(IntPtr pointer) : base(pointer) {}}

public unsafe class PackageMapClient : ObjectBase<UPackageMapClient>
{
    public PackageMapClient(IntPtr pointer) : base(pointer) {}}

public unsafe class PainCausingVolume : ObjectBase<APainCausingVolume>
{
    public PainCausingVolume(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleEmitter : ObjectBase<UParticleEmitter>
{
    public ParticleEmitter(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleEventManager : ObjectBase<AParticleEventManager>
{
    public ParticleEventManager(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleLODLevel : ObjectBase<UParticleLODLevel>
{
    public ParticleLODLevel(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleSystem : ObjectBase<UParticleSystem>
{
    public ParticleSystem(IntPtr pointer) : base(pointer) {}
    public bool ContainsEmitterType(UClass* TypeData)
    {
        Span<(string name, object value)> @params = [
            ("TypeData", (IntPtr)TypeData)
        ];
        return ProcessEvent<bool>(GetFunction("ContainsEmitterType"), @params);
    }
}

public unsafe class ParticleModule : ObjectBase<UParticleModule>
{
    public ParticleModule(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleAccelerationBase : ObjectBase<UParticleModuleAccelerationBase>
{
    public ParticleModuleAccelerationBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleAcceleration : ObjectBase<UParticleModuleAcceleration>
{
    public ParticleModuleAcceleration(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleAccelerationConstant : ObjectBase<UParticleModuleAccelerationConstant>
{
    public ParticleModuleAccelerationConstant(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleAccelerationDrag : ObjectBase<UParticleModuleAccelerationDrag>
{
    public ParticleModuleAccelerationDrag(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleAccelerationDragScaleOverLife : ObjectBase<UParticleModuleAccelerationDragScaleOverLife>
{
    public ParticleModuleAccelerationDragScaleOverLife(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleAccelerationOverLifetime : ObjectBase<UParticleModuleAccelerationOverLifetime>
{
    public ParticleModuleAccelerationOverLifetime(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleAttractorBase : ObjectBase<UParticleModuleAttractorBase>
{
    public ParticleModuleAttractorBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleAttractorLine : ObjectBase<UParticleModuleAttractorLine>
{
    public ParticleModuleAttractorLine(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleAttractorParticle : ObjectBase<UParticleModuleAttractorParticle>
{
    public ParticleModuleAttractorParticle(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleAttractorPoint : ObjectBase<UParticleModuleAttractorPoint>
{
    public ParticleModuleAttractorPoint(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleAttractorPointGravity : ObjectBase<UParticleModuleAttractorPointGravity>
{
    public ParticleModuleAttractorPointGravity(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleBeamBase : ObjectBase<UParticleModuleBeamBase>
{
    public ParticleModuleBeamBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleBeamModifier : ObjectBase<UParticleModuleBeamModifier>
{
    public ParticleModuleBeamModifier(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleBeamNoise : ObjectBase<UParticleModuleBeamNoise>
{
    public ParticleModuleBeamNoise(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleBeamSource : ObjectBase<UParticleModuleBeamSource>
{
    public ParticleModuleBeamSource(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleBeamTarget : ObjectBase<UParticleModuleBeamTarget>
{
    public ParticleModuleBeamTarget(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleCameraBase : ObjectBase<UParticleModuleCameraBase>
{
    public ParticleModuleCameraBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleCameraOffset : ObjectBase<UParticleModuleCameraOffset>
{
    public ParticleModuleCameraOffset(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleCollisionBase : ObjectBase<UParticleModuleCollisionBase>
{
    public ParticleModuleCollisionBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleCollision : ObjectBase<UParticleModuleCollision>
{
    public ParticleModuleCollision(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleCollisionGPU : ObjectBase<UParticleModuleCollisionGPU>
{
    public ParticleModuleCollisionGPU(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleColorBase : ObjectBase<UParticleModuleColorBase>
{
    public ParticleModuleColorBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleColor : ObjectBase<UParticleModuleColor>
{
    public ParticleModuleColor(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleColor_Seeded : ObjectBase<UParticleModuleColor_Seeded>
{
    public ParticleModuleColor_Seeded(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleColorOverLife : ObjectBase<UParticleModuleColorOverLife>
{
    public ParticleModuleColorOverLife(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleColorScaleOverLife : ObjectBase<UParticleModuleColorScaleOverLife>
{
    public ParticleModuleColorScaleOverLife(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleEventBase : ObjectBase<UParticleModuleEventBase>
{
    public ParticleModuleEventBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleEventGenerator : ObjectBase<UParticleModuleEventGenerator>
{
    public ParticleModuleEventGenerator(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleEventReceiverBase : ObjectBase<UParticleModuleEventReceiverBase>
{
    public ParticleModuleEventReceiverBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleEventReceiverKillParticles : ObjectBase<UParticleModuleEventReceiverKillParticles>
{
    public ParticleModuleEventReceiverKillParticles(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleEventReceiverSpawn : ObjectBase<UParticleModuleEventReceiverSpawn>
{
    public ParticleModuleEventReceiverSpawn(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleEventSendToGame : ObjectBase<UParticleModuleEventSendToGame>
{
    public ParticleModuleEventSendToGame(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleKillBase : ObjectBase<UParticleModuleKillBase>
{
    public ParticleModuleKillBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleKillBox : ObjectBase<UParticleModuleKillBox>
{
    public ParticleModuleKillBox(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleKillHeight : ObjectBase<UParticleModuleKillHeight>
{
    public ParticleModuleKillHeight(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLifetimeBase : ObjectBase<UParticleModuleLifetimeBase>
{
    public ParticleModuleLifetimeBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleLifetime : ObjectBase<UParticleModuleLifetime>
{
    public ParticleModuleLifetime(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLifetime_Seeded : ObjectBase<UParticleModuleLifetime_Seeded>
{
    public ParticleModuleLifetime_Seeded(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLightBase : ObjectBase<UParticleModuleLightBase>
{
    public ParticleModuleLightBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleLight : ObjectBase<UParticleModuleLight>
{
    public ParticleModuleLight(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLight_Seeded : ObjectBase<UParticleModuleLight_Seeded>
{
    public ParticleModuleLight_Seeded(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLocationBase : ObjectBase<UParticleModuleLocationBase>
{
    public ParticleModuleLocationBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleLocation : ObjectBase<UParticleModuleLocation>
{
    public ParticleModuleLocation(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLocation_Seeded : ObjectBase<UParticleModuleLocation_Seeded>
{
    public ParticleModuleLocation_Seeded(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLocationBoneSocket : ObjectBase<UParticleModuleLocationBoneSocket>
{
    public ParticleModuleLocationBoneSocket(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLocationDirect : ObjectBase<UParticleModuleLocationDirect>
{
    public ParticleModuleLocationDirect(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLocationEmitter : ObjectBase<UParticleModuleLocationEmitter>
{
    public ParticleModuleLocationEmitter(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLocationEmitterDirect : ObjectBase<UParticleModuleLocationEmitterDirect>
{
    public ParticleModuleLocationEmitterDirect(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLocationPrimitiveBase : ObjectBase<UParticleModuleLocationPrimitiveBase>
{
    public ParticleModuleLocationPrimitiveBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLocationPrimitiveCylinder : ObjectBase<UParticleModuleLocationPrimitiveCylinder>
{
    public ParticleModuleLocationPrimitiveCylinder(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLocationPrimitiveCylinder_Seeded : ObjectBase<UParticleModuleLocationPrimitiveCylinder_Seeded>
{
    public ParticleModuleLocationPrimitiveCylinder_Seeded(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLocationPrimitiveSphere : ObjectBase<UParticleModuleLocationPrimitiveSphere>
{
    public ParticleModuleLocationPrimitiveSphere(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLocationPrimitiveSphere_Seeded : ObjectBase<UParticleModuleLocationPrimitiveSphere_Seeded>
{
    public ParticleModuleLocationPrimitiveSphere_Seeded(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLocationPrimitiveTriangle : ObjectBase<UParticleModuleLocationPrimitiveTriangle>
{
    public ParticleModuleLocationPrimitiveTriangle(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLocationSkelVertSurface : ObjectBase<UParticleModuleLocationSkelVertSurface>
{
    public ParticleModuleLocationSkelVertSurface(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleLocationWorldOffset : ObjectBase<UParticleModuleLocationWorldOffset>
{
    public ParticleModuleLocationWorldOffset(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleLocationWorldOffset_Seeded : ObjectBase<UParticleModuleLocationWorldOffset_Seeded>
{
    public ParticleModuleLocationWorldOffset_Seeded(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleMaterialBase : ObjectBase<UParticleModuleMaterialBase>
{
    public ParticleModuleMaterialBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleMeshMaterial : ObjectBase<UParticleModuleMeshMaterial>
{
    public ParticleModuleMeshMaterial(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleRotationBase : ObjectBase<UParticleModuleRotationBase>
{
    public ParticleModuleRotationBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleMeshRotation : ObjectBase<UParticleModuleMeshRotation>
{
    public ParticleModuleMeshRotation(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleMeshRotation_Seeded : ObjectBase<UParticleModuleMeshRotation_Seeded>
{
    public ParticleModuleMeshRotation_Seeded(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleRotationRateBase : ObjectBase<UParticleModuleRotationRateBase>
{
    public ParticleModuleRotationRateBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleMeshRotationRate : ObjectBase<UParticleModuleMeshRotationRate>
{
    public ParticleModuleMeshRotationRate(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleMeshRotationRate_Seeded : ObjectBase<UParticleModuleMeshRotationRate_Seeded>
{
    public ParticleModuleMeshRotationRate_Seeded(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleMeshRotationRateMultiplyLife : ObjectBase<UParticleModuleMeshRotationRateMultiplyLife>
{
    public ParticleModuleMeshRotationRateMultiplyLife(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleMeshRotationRateOverLife : ObjectBase<UParticleModuleMeshRotationRateOverLife>
{
    public ParticleModuleMeshRotationRateOverLife(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleOrbitBase : ObjectBase<UParticleModuleOrbitBase>
{
    public ParticleModuleOrbitBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleOrbit : ObjectBase<UParticleModuleOrbit>
{
    public ParticleModuleOrbit(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleOrientationBase : ObjectBase<UParticleModuleOrientationBase>
{
    public ParticleModuleOrientationBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleOrientationAxisLock : ObjectBase<UParticleModuleOrientationAxisLock>
{
    public ParticleModuleOrientationAxisLock(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleParameterBase : ObjectBase<UParticleModuleParameterBase>
{
    public ParticleModuleParameterBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleParameterDynamic : ObjectBase<UParticleModuleParameterDynamic>
{
    public ParticleModuleParameterDynamic(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleParameterDynamic_Seeded : ObjectBase<UParticleModuleParameterDynamic_Seeded>
{
    public ParticleModuleParameterDynamic_Seeded(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModulePivotOffset : ObjectBase<UParticleModulePivotOffset>
{
    public ParticleModulePivotOffset(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleRequired : ObjectBase<UParticleModuleRequired>
{
    public ParticleModuleRequired(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleRotation : ObjectBase<UParticleModuleRotation>
{
    public ParticleModuleRotation(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleRotation_Seeded : ObjectBase<UParticleModuleRotation_Seeded>
{
    public ParticleModuleRotation_Seeded(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleRotationOverLifetime : ObjectBase<UParticleModuleRotationOverLifetime>
{
    public ParticleModuleRotationOverLifetime(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleRotationRate : ObjectBase<UParticleModuleRotationRate>
{
    public ParticleModuleRotationRate(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleRotationRate_Seeded : ObjectBase<UParticleModuleRotationRate_Seeded>
{
    public ParticleModuleRotationRate_Seeded(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleRotationRateMultiplyLife : ObjectBase<UParticleModuleRotationRateMultiplyLife>
{
    public ParticleModuleRotationRateMultiplyLife(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleSizeBase : ObjectBase<UParticleModuleSizeBase>
{
    public ParticleModuleSizeBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleSize : ObjectBase<UParticleModuleSize>
{
    public ParticleModuleSize(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleSize_Seeded : ObjectBase<UParticleModuleSize_Seeded>
{
    public ParticleModuleSize_Seeded(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleSizeMultiplyLife : ObjectBase<UParticleModuleSizeMultiplyLife>
{
    public ParticleModuleSizeMultiplyLife(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleSizeScale : ObjectBase<UParticleModuleSizeScale>
{
    public ParticleModuleSizeScale(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleSizeScaleBySpeed : ObjectBase<UParticleModuleSizeScaleBySpeed>
{
    public ParticleModuleSizeScaleBySpeed(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleSourceMovement : ObjectBase<UParticleModuleSourceMovement>
{
    public ParticleModuleSourceMovement(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleSpawnBase : ObjectBase<UParticleModuleSpawnBase>
{
    public ParticleModuleSpawnBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleSpawn : ObjectBase<UParticleModuleSpawn>
{
    public ParticleModuleSpawn(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleSpawnPerUnit : ObjectBase<UParticleModuleSpawnPerUnit>
{
    public ParticleModuleSpawnPerUnit(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleSubUVBase : ObjectBase<UParticleModuleSubUVBase>
{
    public ParticleModuleSubUVBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleSubUV : ObjectBase<UParticleModuleSubUV>
{
    public ParticleModuleSubUV(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleSubUVMovie : ObjectBase<UParticleModuleSubUVMovie>
{
    public ParticleModuleSubUVMovie(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleTrailBase : ObjectBase<UParticleModuleTrailBase>
{
    public ParticleModuleTrailBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleTrailSource : ObjectBase<UParticleModuleTrailSource>
{
    public ParticleModuleTrailSource(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleTypeDataBase : ObjectBase<UParticleModuleTypeDataBase>
{
    public ParticleModuleTypeDataBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleTypeDataAnimTrail : ObjectBase<UParticleModuleTypeDataAnimTrail>
{
    public ParticleModuleTypeDataAnimTrail(IntPtr pointer) : base(pointer) {}
}

public unsafe class BlueprintPlatformLibrary : ObjectBase<UBlueprintPlatformLibrary>
{
    public BlueprintPlatformLibrary(IntPtr pointer) : base(pointer) {}
    public int ScheduleLocalNotificationFromNow(int inSecondsFromNow, ref FText Title, ref FText Body, ref FText Action, FString ActivationEvent)
    {
        Span<(string name, object value)> @params = [
            ("inSecondsFromNow", inSecondsFromNow), 
            ("Title", Title), 
            ("Body", Body), 
            ("Action", Action), 
            ("ActivationEvent", ActivationEvent)
        ];
        return ProcessEvent<int>(GetFunction("ScheduleLocalNotificationFromNow"), @params);
    }
    public void ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, FString ActivationEvent)
    {
        Span<(string name, object value)> @params = [
            ("inSecondsFromNow", inSecondsFromNow), 
            ("ActivationEvent", ActivationEvent)
        ];
        ProcessEvent(GetFunction("ScheduleLocalNotificationBadgeFromNow"), @params);
    }
    public int ScheduleLocalNotificationBadgeAtTime(ref FDateTime FireDateTime, bool LocalTime, FString ActivationEvent)
    {
        Span<(string name, object value)> @params = [
            ("FireDateTime", FireDateTime), 
            ("LocalTime", LocalTime), 
            ("ActivationEvent", ActivationEvent)
        ];
        return ProcessEvent<int>(GetFunction("ScheduleLocalNotificationBadgeAtTime"), @params);
    }
    public int ScheduleLocalNotificationAtTime(ref FDateTime FireDateTime, bool LocalTime, ref FText Title, ref FText Body, ref FText Action, FString ActivationEvent)
    {
        Span<(string name, object value)> @params = [
            ("FireDateTime", FireDateTime), 
            ("LocalTime", LocalTime), 
            ("Title", Title), 
            ("Body", Body), 
            ("Action", Action), 
            ("ActivationEvent", ActivationEvent)
        ];
        return ProcessEvent<int>(GetFunction("ScheduleLocalNotificationAtTime"), @params);
    }
    public void GetLaunchNotification(ref bool NotificationLaunchedApp, ref FString ActivationEvent, ref int FireDate)
    {
        Span<(string name, object value)> @params = [
            ("NotificationLaunchedApp", NotificationLaunchedApp), 
            ("ActivationEvent", ActivationEvent), 
            ("FireDate", FireDate)
        ];
        ProcessEvent(GetFunction("GetLaunchNotification"), @params);
    }
    public EScreenOrientation GetDeviceOrientation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<EScreenOrientation>(GetFunction("GetDeviceOrientation"), @params);
    }
    public void ClearAllLocalNotifications()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClearAllLocalNotifications"), @params);
    }
    public void CancelLocalNotificationById(int NotificationId)
    {
        Span<(string name, object value)> @params = [
            ("NotificationId", NotificationId)
        ];
        ProcessEvent(GetFunction("CancelLocalNotificationById"), @params);
    }
    public void CancelLocalNotification(FString ActivationEvent)
    {
        Span<(string name, object value)> @params = [
            ("ActivationEvent", ActivationEvent)
        ];
        ProcessEvent(GetFunction("CancelLocalNotification"), @params);
    }
}

public unsafe class ParticleModuleTypeDataGpu : ObjectBase<UParticleModuleTypeDataGpu>
{
    public ParticleModuleTypeDataGpu(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleTypeDataMesh : ObjectBase<UParticleModuleTypeDataMesh>
{
    public ParticleModuleTypeDataMesh(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleTypeDataRibbon : ObjectBase<UParticleModuleTypeDataRibbon>
{
    public ParticleModuleTypeDataRibbon(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleVectorFieldBase : ObjectBase<UParticleModuleVectorFieldBase>
{
    public ParticleModuleVectorFieldBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleVectorFieldGlobal : ObjectBase<UParticleModuleVectorFieldGlobal>
{
    public ParticleModuleVectorFieldGlobal(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleVectorFieldLocal : ObjectBase<UParticleModuleVectorFieldLocal>
{
    public ParticleModuleVectorFieldLocal(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleVectorFieldRotation : ObjectBase<UParticleModuleVectorFieldRotation>
{
    public ParticleModuleVectorFieldRotation(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleVectorFieldRotationRate : ObjectBase<UParticleModuleVectorFieldRotationRate>
{
    public ParticleModuleVectorFieldRotationRate(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleVectorFieldScale : ObjectBase<UParticleModuleVectorFieldScale>
{
    public ParticleModuleVectorFieldScale(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleVectorFieldScaleOverLife : ObjectBase<UParticleModuleVectorFieldScaleOverLife>
{
    public ParticleModuleVectorFieldScaleOverLife(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleVelocityBase : ObjectBase<UParticleModuleVelocityBase>
{
    public ParticleModuleVelocityBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleVelocity : ObjectBase<UParticleModuleVelocity>
{
    public ParticleModuleVelocity(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleVelocity_Seeded : ObjectBase<UParticleModuleVelocity_Seeded>
{
    public ParticleModuleVelocity_Seeded(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleVelocityCone : ObjectBase<UParticleModuleVelocityCone>
{
    public ParticleModuleVelocityCone(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleVelocityInheritParent : ObjectBase<UParticleModuleVelocityInheritParent>
{
    public ParticleModuleVelocityInheritParent(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleModuleVelocityOverLifetime : ObjectBase<UParticleModuleVelocityOverLifetime>
{
    public ParticleModuleVelocityOverLifetime(IntPtr pointer) : base(pointer) {}
}

public unsafe class ParticleSpriteEmitter : ObjectBase<UParticleSpriteEmitter>
{
    public ParticleSpriteEmitter(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleSystemComponent : ObjectBase<UParticleSystemComponent>
{
    public ParticleSystemComponent(IntPtr pointer) : base(pointer) {}
    public void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, ETrailWidthMode InWidthMode, float InWidth)
    {
        Span<(string name, object value)> @params = [
            ("InFirstSocketName", InFirstSocketName), 
            ("InSecondSocketName", InSecondSocketName), 
            ("InWidthMode", InWidthMode), 
            ("InWidth", InWidth)
        ];
        ProcessEvent(GetFunction("SetTrailSourceData"), @params);
    }
    public void SetTemplate(UParticleSystem* NewTemplate)
    {
        Span<(string name, object value)> @params = [
            ("NewTemplate", (IntPtr)NewTemplate)
        ];
        ProcessEvent(GetFunction("SetTemplate"), @params);
    }
    public void SetMaterialParameter(FName ParameterName, UMaterialInterface* Param)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName), 
            ("Param", (IntPtr)Param)
        ];
        ProcessEvent(GetFunction("SetMaterialParameter"), @params);
    }
    public void SetBeamTargetTangent(int EmitterIndex, FVector NewTangentPoint, int TargetIndex)
    {
        Span<(string name, object value)> @params = [
            ("EmitterIndex", EmitterIndex), 
            ("NewTangentPoint", NewTangentPoint), 
            ("TargetIndex", TargetIndex)
        ];
        ProcessEvent(GetFunction("SetBeamTargetTangent"), @params);
    }
    public void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex)
    {
        Span<(string name, object value)> @params = [
            ("EmitterIndex", EmitterIndex), 
            ("NewTargetStrength", NewTargetStrength), 
            ("TargetIndex", TargetIndex)
        ];
        ProcessEvent(GetFunction("SetBeamTargetStrength"), @params);
    }
    public void SetBeamTargetPoint(int EmitterIndex, FVector NewTargetPoint, int TargetIndex)
    {
        Span<(string name, object value)> @params = [
            ("EmitterIndex", EmitterIndex), 
            ("NewTargetPoint", NewTargetPoint), 
            ("TargetIndex", TargetIndex)
        ];
        ProcessEvent(GetFunction("SetBeamTargetPoint"), @params);
    }
    public void SetBeamSourceTangent(int EmitterIndex, FVector NewTangentPoint, int SourceIndex)
    {
        Span<(string name, object value)> @params = [
            ("EmitterIndex", EmitterIndex), 
            ("NewTangentPoint", NewTangentPoint), 
            ("SourceIndex", SourceIndex)
        ];
        ProcessEvent(GetFunction("SetBeamSourceTangent"), @params);
    }
    public void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex)
    {
        Span<(string name, object value)> @params = [
            ("EmitterIndex", EmitterIndex), 
            ("NewSourceStrength", NewSourceStrength), 
            ("SourceIndex", SourceIndex)
        ];
        ProcessEvent(GetFunction("SetBeamSourceStrength"), @params);
    }
    public void SetBeamSourcePoint(int EmitterIndex, FVector NewSourcePoint, int SourceIndex)
    {
        Span<(string name, object value)> @params = [
            ("EmitterIndex", EmitterIndex), 
            ("NewSourcePoint", NewSourcePoint), 
            ("SourceIndex", SourceIndex)
        ];
        ProcessEvent(GetFunction("SetBeamSourcePoint"), @params);
    }
    public void SetBeamEndPoint(int EmitterIndex, FVector NewEndPoint)
    {
        Span<(string name, object value)> @params = [
            ("EmitterIndex", EmitterIndex), 
            ("NewEndPoint", NewEndPoint)
        ];
        ProcessEvent(GetFunction("SetBeamEndPoint"), @params);
    }
    public void SetAutoAttachParams(USceneComponent* Parent, FName SocketName, EAttachLocation LocationType)
    {
        Span<(string name, object value)> @params = [
            ("Parent", (IntPtr)Parent), 
            ("SocketName", SocketName), 
            ("LocationType", LocationType)
        ];
        ProcessEvent(GetFunction("SetAutoAttachParams"), @params);
    }
    public int GetNumActiveParticles()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetNumActiveParticles"), @params);
    }
    public UMaterialInterface* GetNamedMaterial(FName InName)
    {
        Span<(string name, object value)> @params = [
            ("InName", InName)
        ];
        return (UMaterialInterface*)ProcessEvent<IntPtr>(GetFunction("GetNamedMaterial"), @params);
    }
    public bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, ref FVector OutTangentPoint)
    {
        Span<(string name, object value)> @params = [
            ("EmitterIndex", EmitterIndex), 
            ("TargetIndex", TargetIndex), 
            ("OutTangentPoint", OutTangentPoint)
        ];
        return ProcessEvent<bool>(GetFunction("GetBeamTargetTangent"), @params);
    }
    public bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, ref float OutTargetStrength)
    {
        Span<(string name, object value)> @params = [
            ("EmitterIndex", EmitterIndex), 
            ("TargetIndex", TargetIndex), 
            ("OutTargetStrength", OutTargetStrength)
        ];
        return ProcessEvent<bool>(GetFunction("GetBeamTargetStrength"), @params);
    }
    public bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, ref FVector OutTargetPoint)
    {
        Span<(string name, object value)> @params = [
            ("EmitterIndex", EmitterIndex), 
            ("TargetIndex", TargetIndex), 
            ("OutTargetPoint", OutTargetPoint)
        ];
        return ProcessEvent<bool>(GetFunction("GetBeamTargetPoint"), @params);
    }
    public bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, ref FVector OutTangentPoint)
    {
        Span<(string name, object value)> @params = [
            ("EmitterIndex", EmitterIndex), 
            ("SourceIndex", SourceIndex), 
            ("OutTangentPoint", OutTangentPoint)
        ];
        return ProcessEvent<bool>(GetFunction("GetBeamSourceTangent"), @params);
    }
    public bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, ref float OutSourceStrength)
    {
        Span<(string name, object value)> @params = [
            ("EmitterIndex", EmitterIndex), 
            ("SourceIndex", SourceIndex), 
            ("OutSourceStrength", OutSourceStrength)
        ];
        return ProcessEvent<bool>(GetFunction("GetBeamSourceStrength"), @params);
    }
    public bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, ref FVector OutSourcePoint)
    {
        Span<(string name, object value)> @params = [
            ("EmitterIndex", EmitterIndex), 
            ("SourceIndex", SourceIndex), 
            ("OutSourcePoint", OutSourcePoint)
        ];
        return ProcessEvent<bool>(GetFunction("GetBeamSourcePoint"), @params);
    }
    public bool GetBeamEndPoint(int EmitterIndex, ref FVector OutEndPoint)
    {
        Span<(string name, object value)> @params = [
            ("EmitterIndex", EmitterIndex), 
            ("OutEndPoint", OutEndPoint)
        ];
        return ProcessEvent<bool>(GetFunction("GetBeamEndPoint"), @params);
    }
    public void GenerateParticleEvent(FName InEventName, float InEmitterTime, FVector InLocation, FVector InDirection, FVector InVelocity)
    {
        Span<(string name, object value)> @params = [
            ("InEventName", InEventName), 
            ("InEmitterTime", InEmitterTime), 
            ("InLocation", InLocation), 
            ("InDirection", InDirection), 
            ("InVelocity", InVelocity)
        ];
        ProcessEvent(GetFunction("GenerateParticleEvent"), @params);
    }
    public void EndTrails()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("EndTrails"), @params);
    }
    public UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, UMaterialInterface* SourceMaterial)
    {
        Span<(string name, object value)> @params = [
            ("InName", InName), 
            ("SourceMaterial", (IntPtr)SourceMaterial)
        ];
        return (UMaterialInstanceDynamic*)ProcessEvent<IntPtr>(GetFunction("CreateNamedDynamicMaterialInstance"), @params);
    }
    public void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, ETrailWidthMode InWidthMode, float InWidth)
    {
        Span<(string name, object value)> @params = [
            ("InFirstSocketName", InFirstSocketName), 
            ("InSecondSocketName", InSecondSocketName), 
            ("InWidthMode", InWidthMode), 
            ("InWidth", InWidth)
        ];
        ProcessEvent(GetFunction("BeginTrails"), @params);
    }
}

public unsafe class ParticleSystemReplay : ObjectBase<UParticleSystemReplay>
{
    public ParticleSystemReplay(IntPtr pointer) : base(pointer) {}
}

public unsafe class PathFollowingAgentInterface : ObjectBase<IPathFollowingAgentInterface>
{
    public PathFollowingAgentInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class PawnNoiseEmitterComponent : ObjectBase<UPawnNoiseEmitterComponent>
{
    public PawnNoiseEmitterComponent(IntPtr pointer) : base(pointer) {}
    public void MakeNoise(AActor* NoiseMaker, float Loudness, ref FVector NoiseLocation)
    {
        Span<(string name, object value)> @params = [
            ("NoiseMaker", (IntPtr)NoiseMaker), 
            ("Loudness", Loudness), 
            ("NoiseLocation", NoiseLocation)
        ];
        ProcessEvent(GetFunction("MakeNoise"), @params);
    }
}

public unsafe class Actor : ObjectBase<AActor>
{
    public Actor(IntPtr pointer) : base(pointer) {}
    public bool WasRecentlyRendered(float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<bool>(GetFunction("WasRecentlyRendered"), @params);
    }
    public void UserConstructionScript()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("UserConstructionScript"), @params);
    }
    public void TearOff()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("TearOff"), @params);
    }
    public void SnapRootComponentTo(AActor* InParentActor, FName InSocketName)
    {
        Span<(string name, object value)> @params = [
            ("InParentActor", (IntPtr)InParentActor), 
            ("InSocketName", InSocketName)
        ];
        ProcessEvent(GetFunction("SnapRootComponentTo"), @params);
    }
    public void SetTickGroup(ETickingGroup NewTickGroup)
    {
        Span<(string name, object value)> @params = [
            ("NewTickGroup", NewTickGroup)
        ];
        ProcessEvent(GetFunction("SetTickGroup"), @params);
    }
    public void SetTickableWhenPaused(bool bTickableWhenPaused)
    {
        Span<(string name, object value)> @params = [
            ("bTickableWhenPaused", bTickableWhenPaused)
        ];
        ProcessEvent(GetFunction("SetTickableWhenPaused"), @params);
    }
    public void SetReplicates(bool bInReplicates)
    {
        Span<(string name, object value)> @params = [
            ("bInReplicates", bInReplicates)
        ];
        ProcessEvent(GetFunction("SetReplicates"), @params);
    }
    public void SetReplicateMovement(bool bInReplicateMovement)
    {
        Span<(string name, object value)> @params = [
            ("bInReplicateMovement", bInReplicateMovement)
        ];
        ProcessEvent(GetFunction("SetReplicateMovement"), @params);
    }
    public void SetOwner(AActor* NewOwner)
    {
        Span<(string name, object value)> @params = [
            ("NewOwner", (IntPtr)NewOwner)
        ];
        ProcessEvent(GetFunction("SetOwner"), @params);
    }
    public void SetNetDormancy(ENetDormancy NewDormancy)
    {
        Span<(string name, object value)> @params = [
            ("NewDormancy", NewDormancy)
        ];
        ProcessEvent(GetFunction("SetNetDormancy"), @params);
    }
    public void SetLifeSpan(float InLifespan)
    {
        Span<(string name, object value)> @params = [
            ("InLifespan", InLifespan)
        ];
        ProcessEvent(GetFunction("SetLifeSpan"), @params);
    }
    public void SetAutoDestroyWhenFinished(bool bVal)
    {
        Span<(string name, object value)> @params = [
            ("bVal", bVal)
        ];
        ProcessEvent(GetFunction("SetAutoDestroyWhenFinished"), @params);
    }
    public void SetActorTickInterval(float TickInterval)
    {
        Span<(string name, object value)> @params = [
            ("TickInterval", TickInterval)
        ];
        ProcessEvent(GetFunction("SetActorTickInterval"), @params);
    }
    public void SetActorTickEnabled(bool bEnabled)
    {
        Span<(string name, object value)> @params = [
            ("bEnabled", bEnabled)
        ];
        ProcessEvent(GetFunction("SetActorTickEnabled"), @params);
    }
    public void SetActorScale3D(FVector NewScale3D)
    {
        Span<(string name, object value)> @params = [
            ("NewScale3D", NewScale3D)
        ];
        ProcessEvent(GetFunction("SetActorScale3D"), @params);
    }
    public void SetActorRelativeScale3D(FVector NewRelativeScale)
    {
        Span<(string name, object value)> @params = [
            ("NewRelativeScale", NewRelativeScale)
        ];
        ProcessEvent(GetFunction("SetActorRelativeScale3D"), @params);
    }
    public void SetActorHiddenInGame(bool bNewHidden)
    {
        Span<(string name, object value)> @params = [
            ("bNewHidden", bNewHidden)
        ];
        ProcessEvent(GetFunction("SetActorHiddenInGame"), @params);
    }
    public void SetActorEnableCollision(bool bNewActorEnableCollision)
    {
        Span<(string name, object value)> @params = [
            ("bNewActorEnableCollision", bNewActorEnableCollision)
        ];
        ProcessEvent(GetFunction("SetActorEnableCollision"), @params);
    }
    public void RemoveTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent)
    {
        Span<(string name, object value)> @params = [
            ("PrerequisiteComponent", (IntPtr)PrerequisiteComponent)
        ];
        ProcessEvent(GetFunction("RemoveTickPrerequisiteComponent"), @params);
    }
    public void RemoveTickPrerequisiteActor(AActor* PrerequisiteActor)
    {
        Span<(string name, object value)> @params = [
            ("PrerequisiteActor", (IntPtr)PrerequisiteActor)
        ];
        ProcessEvent(GetFunction("RemoveTickPrerequisiteActor"), @params);
    }
    public void ReceiveTick(float DeltaSeconds)
    {
        Span<(string name, object value)> @params = [
            ("DeltaSeconds", DeltaSeconds)
        ];
        ProcessEvent(GetFunction("ReceiveTick"), @params);
    }
    public void ReceiveRadialDamage(float DamageReceived, UDamageType* DamageType, FVector Origin, ref FHitResult HitInfo, AController* InstigatedBy, AActor* DamageCauser)
    {
        Span<(string name, object value)> @params = [
            ("DamageReceived", DamageReceived), 
            ("DamageType", (IntPtr)DamageType), 
            ("Origin", Origin), 
            ("HitInfo", HitInfo), 
            ("InstigatedBy", (IntPtr)InstigatedBy), 
            ("DamageCauser", (IntPtr)DamageCauser)
        ];
        ProcessEvent(GetFunction("ReceiveRadialDamage"), @params);
    }
    public void ReceivePointDamage(float Damage, UDamageType* DamageType, FVector HitLocation, FVector HitNormal, UPrimitiveComponent* HitComponent, FName BoneName, FVector ShotFromDirection, AController* InstigatedBy, AActor* DamageCauser, ref FHitResult HitInfo)
    {
        Span<(string name, object value)> @params = [
            ("Damage", Damage), 
            ("DamageType", (IntPtr)DamageType), 
            ("HitLocation", HitLocation), 
            ("HitNormal", HitNormal), 
            ("HitComponent", (IntPtr)HitComponent), 
            ("BoneName", BoneName), 
            ("ShotFromDirection", ShotFromDirection), 
            ("InstigatedBy", (IntPtr)InstigatedBy), 
            ("DamageCauser", (IntPtr)DamageCauser), 
            ("HitInfo", HitInfo)
        ];
        ProcessEvent(GetFunction("ReceivePointDamage"), @params);
    }
    public void ReceiveHit(UPrimitiveComponent* MyComp, AActor* Other, UPrimitiveComponent* OtherComp, bool bSelfMoved, FVector HitLocation, FVector HitNormal, FVector NormalImpulse, ref FHitResult Hit)
    {
        Span<(string name, object value)> @params = [
            ("MyComp", (IntPtr)MyComp), 
            ("Other", (IntPtr)Other), 
            ("OtherComp", (IntPtr)OtherComp), 
            ("bSelfMoved", bSelfMoved), 
            ("HitLocation", HitLocation), 
            ("HitNormal", HitNormal), 
            ("NormalImpulse", NormalImpulse), 
            ("Hit", Hit)
        ];
        ProcessEvent(GetFunction("ReceiveHit"), @params);
    }
    public void ReceiveEndPlay(EEndPlayReason EndPlayReason)
    {
        Span<(string name, object value)> @params = [
            ("EndPlayReason", EndPlayReason)
        ];
        ProcessEvent(GetFunction("ReceiveEndPlay"), @params);
    }
    public void ReceiveDestroyed()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ReceiveDestroyed"), @params);
    }
    public void ReceiveBeginPlay()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ReceiveBeginPlay"), @params);
    }
    public void ReceiveAnyDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser)
    {
        Span<(string name, object value)> @params = [
            ("Damage", Damage), 
            ("DamageType", (IntPtr)DamageType), 
            ("InstigatedBy", (IntPtr)InstigatedBy), 
            ("DamageCauser", (IntPtr)DamageCauser)
        ];
        ProcessEvent(GetFunction("ReceiveAnyDamage"), @params);
    }
    public void ReceiveActorOnReleased(FKey ButtonReleased)
    {
        Span<(string name, object value)> @params = [
            ("ButtonReleased", ButtonReleased)
        ];
        ProcessEvent(GetFunction("ReceiveActorOnReleased"), @params);
    }
    public void ReceiveActorOnInputTouchLeave(ETouchIndex FingerIndex)
    {
        Span<(string name, object value)> @params = [
            ("FingerIndex", FingerIndex)
        ];
        ProcessEvent(GetFunction("ReceiveActorOnInputTouchLeave"), @params);
    }
    public void ReceiveActorOnInputTouchEnter(ETouchIndex FingerIndex)
    {
        Span<(string name, object value)> @params = [
            ("FingerIndex", FingerIndex)
        ];
        ProcessEvent(GetFunction("ReceiveActorOnInputTouchEnter"), @params);
    }
    public void ReceiveActorOnInputTouchEnd(ETouchIndex FingerIndex)
    {
        Span<(string name, object value)> @params = [
            ("FingerIndex", FingerIndex)
        ];
        ProcessEvent(GetFunction("ReceiveActorOnInputTouchEnd"), @params);
    }
    public void ReceiveActorOnInputTouchBegin(ETouchIndex FingerIndex)
    {
        Span<(string name, object value)> @params = [
            ("FingerIndex", FingerIndex)
        ];
        ProcessEvent(GetFunction("ReceiveActorOnInputTouchBegin"), @params);
    }
    public void ReceiveActorOnClicked(FKey ButtonPressed)
    {
        Span<(string name, object value)> @params = [
            ("ButtonPressed", ButtonPressed)
        ];
        ProcessEvent(GetFunction("ReceiveActorOnClicked"), @params);
    }
    public void ReceiveActorEndOverlap(AActor* OtherActor)
    {
        Span<(string name, object value)> @params = [
            ("OtherActor", (IntPtr)OtherActor)
        ];
        ProcessEvent(GetFunction("ReceiveActorEndOverlap"), @params);
    }
    public void ReceiveActorEndCursorOver()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ReceiveActorEndCursorOver"), @params);
    }
    public void ReceiveActorBeginOverlap(AActor* OtherActor)
    {
        Span<(string name, object value)> @params = [
            ("OtherActor", (IntPtr)OtherActor)
        ];
        ProcessEvent(GetFunction("ReceiveActorBeginOverlap"), @params);
    }
    public void ReceiveActorBeginCursorOver()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ReceiveActorBeginCursorOver"), @params);
    }
    public void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups)
    {
        Span<(string name, object value)> @params = [
            ("Seconds", Seconds), 
            ("bEnableStreaming", bEnableStreaming), 
            ("CinematicTextureGroups", CinematicTextureGroups)
        ];
        ProcessEvent(GetFunction("PrestreamTextures"), @params);
    }
    public void OnRep_ReplicateMovement()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_ReplicateMovement"), @params);
    }
    public void OnRep_ReplicatedMovement()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_ReplicatedMovement"), @params);
    }
    public void OnRep_Owner()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_Owner"), @params);
    }
    public void OnRep_Instigator()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_Instigator"), @params);
    }
    public void OnRep_AttachmentReplication()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_AttachmentReplication"), @params);
    }
    public void MakeNoise(float Loudness, APawn* NoiseInstigator, FVector NoiseLocation, float MaxRange, FName Tag)
    {
        Span<(string name, object value)> @params = [
            ("Loudness", Loudness), 
            ("NoiseInstigator", (IntPtr)NoiseInstigator), 
            ("NoiseLocation", NoiseLocation), 
            ("MaxRange", MaxRange), 
            ("Tag", Tag)
        ];
        ProcessEvent(GetFunction("MakeNoise"), @params);
    }
    public UMaterialInstanceDynamic* MakeMIDForMaterial(UMaterialInterface* Parent)
    {
        Span<(string name, object value)> @params = [
            ("Parent", (IntPtr)Parent)
        ];
        return (UMaterialInstanceDynamic*)ProcessEvent<IntPtr>(GetFunction("MakeMIDForMaterial"), @params);
    }
    public bool K2_TeleportTo(FVector DestLocation, FRotator DestRotation)
    {
        Span<(string name, object value)> @params = [
            ("DestLocation", DestLocation), 
            ("DestRotation", DestRotation)
        ];
        return ProcessEvent<bool>(GetFunction("K2_TeleportTo"), @params);
    }
    public bool K2_SetActorTransform(ref FTransform NewTransform, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("NewTransform", NewTransform), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        return ProcessEvent<bool>(GetFunction("K2_SetActorTransform"), @params);
    }
    public bool K2_SetActorRotation(FRotator NewRotation, bool bTeleportPhysics)
    {
        Span<(string name, object value)> @params = [
            ("NewRotation", NewRotation), 
            ("bTeleportPhysics", bTeleportPhysics)
        ];
        return ProcessEvent<bool>(GetFunction("K2_SetActorRotation"), @params);
    }
    public void K2_SetActorRelativeTransform(ref FTransform NewRelativeTransform, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("NewRelativeTransform", NewRelativeTransform), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_SetActorRelativeTransform"), @params);
    }
    public void K2_SetActorRelativeRotation(FRotator NewRelativeRotation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("NewRelativeRotation", NewRelativeRotation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_SetActorRelativeRotation"), @params);
    }
    public void K2_SetActorRelativeLocation(FVector NewRelativeLocation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("NewRelativeLocation", NewRelativeLocation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_SetActorRelativeLocation"), @params);
    }
    public bool K2_SetActorLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("NewLocation", NewLocation), 
            ("NewRotation", NewRotation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        return ProcessEvent<bool>(GetFunction("K2_SetActorLocationAndRotation"), @params);
    }
    public bool K2_SetActorLocation(FVector NewLocation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("NewLocation", NewLocation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        return ProcessEvent<bool>(GetFunction("K2_SetActorLocation"), @params);
    }
    public void K2_OnReset()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("K2_OnReset"), @params);
    }
    public void K2_OnEndViewTarget(APlayerController* PC)
    {
        Span<(string name, object value)> @params = [
            ("PC", (IntPtr)PC)
        ];
        ProcessEvent(GetFunction("K2_OnEndViewTarget"), @params);
    }
    public void K2_OnBecomeViewTarget(APlayerController* PC)
    {
        Span<(string name, object value)> @params = [
            ("PC", (IntPtr)PC)
        ];
        ProcessEvent(GetFunction("K2_OnBecomeViewTarget"), @params);
    }
    public USceneComponent* K2_GetRootComponent()
    {
        Span<(string name, object value)> @params = [
        ];
        return (USceneComponent*)ProcessEvent<IntPtr>(GetFunction("K2_GetRootComponent"), @params);
    }
    public TArray<IntPtr> K2_GetComponentsByClass(TSubclassOf<UActorComponent> ComponentClass)
    {
        Span<(string name, object value)> @params = [
            ("ComponentClass", ComponentClass)
        ];
        return ProcessEvent<TArray<IntPtr>>(GetFunction("K2_GetComponentsByClass"), @params);
    }
    public FRotator K2_GetActorRotation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FRotator>(GetFunction("K2_GetActorRotation"), @params);
    }
    public FVector K2_GetActorLocation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("K2_GetActorLocation"), @params);
    }
    public void K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule)
    {
        Span<(string name, object value)> @params = [
            ("LocationRule", LocationRule), 
            ("RotationRule", RotationRule), 
            ("ScaleRule", ScaleRule)
        ];
        ProcessEvent(GetFunction("K2_DetachFromActor"), @params);
    }
    public void K2_DestroyComponent(UActorComponent* Component)
    {
        Span<(string name, object value)> @params = [
            ("Component", (IntPtr)Component)
        ];
        ProcessEvent(GetFunction("K2_DestroyComponent"), @params);
    }
    public void K2_DestroyActor()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("K2_DestroyActor"), @params);
    }
    public void K2_AttachToComponent(USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies)
    {
        Span<(string name, object value)> @params = [
            ("Parent", (IntPtr)Parent), 
            ("SocketName", SocketName), 
            ("LocationRule", LocationRule), 
            ("RotationRule", RotationRule), 
            ("ScaleRule", ScaleRule), 
            ("bWeldSimulatedBodies", bWeldSimulatedBodies)
        ];
        ProcessEvent(GetFunction("K2_AttachToComponent"), @params);
    }
    public void K2_AttachToActor(AActor* ParentActor, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies)
    {
        Span<(string name, object value)> @params = [
            ("ParentActor", (IntPtr)ParentActor), 
            ("SocketName", SocketName), 
            ("LocationRule", LocationRule), 
            ("RotationRule", RotationRule), 
            ("ScaleRule", ScaleRule), 
            ("bWeldSimulatedBodies", bWeldSimulatedBodies)
        ];
        ProcessEvent(GetFunction("K2_AttachToActor"), @params);
    }
    public void K2_AttachRootComponentToActor(AActor* InParentActor, FName InSocketName, EAttachLocation AttachLocationType, bool bWeldSimulatedBodies)
    {
        Span<(string name, object value)> @params = [
            ("InParentActor", (IntPtr)InParentActor), 
            ("InSocketName", InSocketName), 
            ("AttachLocationType", AttachLocationType), 
            ("bWeldSimulatedBodies", bWeldSimulatedBodies)
        ];
        ProcessEvent(GetFunction("K2_AttachRootComponentToActor"), @params);
    }
    public void K2_AttachRootComponentTo(USceneComponent* InParent, FName InSocketName, EAttachLocation AttachLocationType, bool bWeldSimulatedBodies)
    {
        Span<(string name, object value)> @params = [
            ("InParent", (IntPtr)InParent), 
            ("InSocketName", InSocketName), 
            ("AttachLocationType", AttachLocationType), 
            ("bWeldSimulatedBodies", bWeldSimulatedBodies)
        ];
        ProcessEvent(GetFunction("K2_AttachRootComponentTo"), @params);
    }
    public void K2_AddActorWorldTransformKeepScale(ref FTransform DeltaTransform, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("DeltaTransform", DeltaTransform), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_AddActorWorldTransformKeepScale"), @params);
    }
    public void K2_AddActorWorldTransform(ref FTransform DeltaTransform, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("DeltaTransform", DeltaTransform), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_AddActorWorldTransform"), @params);
    }
    public void K2_AddActorWorldRotation(FRotator DeltaRotation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("DeltaRotation", DeltaRotation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_AddActorWorldRotation"), @params);
    }
    public void K2_AddActorWorldOffset(FVector DeltaLocation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("DeltaLocation", DeltaLocation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_AddActorWorldOffset"), @params);
    }
    public void K2_AddActorLocalTransform(ref FTransform NewTransform, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("NewTransform", NewTransform), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_AddActorLocalTransform"), @params);
    }
    public void K2_AddActorLocalRotation(FRotator DeltaRotation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("DeltaRotation", DeltaRotation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_AddActorLocalRotation"), @params);
    }
    public void K2_AddActorLocalOffset(FVector DeltaLocation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("DeltaLocation", DeltaLocation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_AddActorLocalOffset"), @params);
    }
    public bool IsOverlappingActor(AActor* Other)
    {
        Span<(string name, object value)> @params = [
            ("Other", (IntPtr)Other)
        ];
        return ProcessEvent<bool>(GetFunction("IsOverlappingActor"), @params);
    }
    public bool IsChildActor()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsChildActor"), @params);
    }
    public bool IsActorTickEnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsActorTickEnabled"), @params);
    }
    public bool IsActorBeingDestroyed()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsActorBeingDestroyed"), @params);
    }
    public bool HasAuthority()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("HasAuthority"), @params);
    }
    public float GetVerticalDistanceTo(AActor* OtherActor)
    {
        Span<(string name, object value)> @params = [
            ("OtherActor", (IntPtr)OtherActor)
        ];
        return ProcessEvent<float>(GetFunction("GetVerticalDistanceTo"), @params);
    }
    public FVector GetVelocity()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetVelocity"), @params);
    }
    public FTransform GetTransform()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FTransform>(GetFunction("GetTransform"), @params);
    }
    public bool GetTickableWhenPaused()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("GetTickableWhenPaused"), @params);
    }
    public float GetSquaredHorizontalDistanceTo(AActor* OtherActor)
    {
        Span<(string name, object value)> @params = [
            ("OtherActor", (IntPtr)OtherActor)
        ];
        return ProcessEvent<float>(GetFunction("GetSquaredHorizontalDistanceTo"), @params);
    }
    public float GetSquaredDistanceTo(AActor* OtherActor)
    {
        Span<(string name, object value)> @params = [
            ("OtherActor", (IntPtr)OtherActor)
        ];
        return ProcessEvent<float>(GetFunction("GetSquaredDistanceTo"), @params);
    }
    public ENetRole GetRemoteRole()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<ENetRole>(GetFunction("GetRemoteRole"), @params);
    }
    public UChildActorComponent* GetParentComponent()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UChildActorComponent*)ProcessEvent<IntPtr>(GetFunction("GetParentComponent"), @params);
    }
    public AActor* GetParentActor()
    {
        Span<(string name, object value)> @params = [
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("GetParentActor"), @params);
    }
    public AActor* GetOwner()
    {
        Span<(string name, object value)> @params = [
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("GetOwner"), @params);
    }
    public void GetOverlappingComponents(ref TArray<IntPtr> OverlappingComponents)
    {
        Span<(string name, object value)> @params = [
            ("OverlappingComponents", OverlappingComponents)
        ];
        ProcessEvent(GetFunction("GetOverlappingComponents"), @params);
    }
    public void GetOverlappingActors(ref TArray<IntPtr> OverlappingActors, TSubclassOf<AActor> ClassFilter)
    {
        Span<(string name, object value)> @params = [
            ("OverlappingActors", OverlappingActors), 
            ("ClassFilter", ClassFilter)
        ];
        ProcessEvent(GetFunction("GetOverlappingActors"), @params);
    }
    public ENetRole GetLocalRole()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<ENetRole>(GetFunction("GetLocalRole"), @params);
    }
    public float GetLifeSpan()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetLifeSpan"), @params);
    }
    public AController* GetInstigatorController()
    {
        Span<(string name, object value)> @params = [
        ];
        return (AController*)ProcessEvent<IntPtr>(GetFunction("GetInstigatorController"), @params);
    }
    public APawn* GetInstigator()
    {
        Span<(string name, object value)> @params = [
        ];
        return (APawn*)ProcessEvent<IntPtr>(GetFunction("GetInstigator"), @params);
    }
    public FVector GetInputVectorAxisValue(FKey InputAxisKey)
    {
        Span<(string name, object value)> @params = [
            ("InputAxisKey", InputAxisKey)
        ];
        return ProcessEvent<FVector>(GetFunction("GetInputVectorAxisValue"), @params);
    }
    public float GetInputAxisValue(FName InputAxisName)
    {
        Span<(string name, object value)> @params = [
            ("InputAxisName", InputAxisName)
        ];
        return ProcessEvent<float>(GetFunction("GetInputAxisValue"), @params);
    }
    public float GetInputAxisKeyValue(FKey InputAxisKey)
    {
        Span<(string name, object value)> @params = [
            ("InputAxisKey", InputAxisKey)
        ];
        return ProcessEvent<float>(GetFunction("GetInputAxisKeyValue"), @params);
    }
    public float GetHorizontalDotProductTo(AActor* OtherActor)
    {
        Span<(string name, object value)> @params = [
            ("OtherActor", (IntPtr)OtherActor)
        ];
        return ProcessEvent<float>(GetFunction("GetHorizontalDotProductTo"), @params);
    }
    public float GetHorizontalDistanceTo(AActor* OtherActor)
    {
        Span<(string name, object value)> @params = [
            ("OtherActor", (IntPtr)OtherActor)
        ];
        return ProcessEvent<float>(GetFunction("GetHorizontalDistanceTo"), @params);
    }
    public float GetGameTimeSinceCreation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetGameTimeSinceCreation"), @params);
    }
    public float GetDotProductTo(AActor* OtherActor)
    {
        Span<(string name, object value)> @params = [
            ("OtherActor", (IntPtr)OtherActor)
        ];
        return ProcessEvent<float>(GetFunction("GetDotProductTo"), @params);
    }
    public float GetDistanceTo(AActor* OtherActor)
    {
        Span<(string name, object value)> @params = [
            ("OtherActor", (IntPtr)OtherActor)
        ];
        return ProcessEvent<float>(GetFunction("GetDistanceTo"), @params);
    }
    public TArray<IntPtr> GetComponentsByTag(TSubclassOf<UActorComponent> ComponentClass, FName Tag)
    {
        Span<(string name, object value)> @params = [
            ("ComponentClass", ComponentClass), 
            ("Tag", Tag)
        ];
        return ProcessEvent<TArray<IntPtr>>(GetFunction("GetComponentsByTag"), @params);
    }
    public TArray<IntPtr> GetComponentsByInterface(TSubclassOf<UInterface> Interface)
    {
        Span<(string name, object value)> @params = [
            ("Interface", Interface)
        ];
        return ProcessEvent<TArray<IntPtr>>(GetFunction("GetComponentsByInterface"), @params);
    }
    public UActorComponent* GetComponentByClass(TSubclassOf<UActorComponent> ComponentClass)
    {
        Span<(string name, object value)> @params = [
            ("ComponentClass", ComponentClass)
        ];
        return (UActorComponent*)ProcessEvent<IntPtr>(GetFunction("GetComponentByClass"), @params);
    }
    public FName GetAttachParentSocketName()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FName>(GetFunction("GetAttachParentSocketName"), @params);
    }
    public AActor* GetAttachParentActor()
    {
        Span<(string name, object value)> @params = [
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("GetAttachParentActor"), @params);
    }
    public void GetAttachedActors(ref TArray<IntPtr> OutActors, bool bResetArray)
    {
        Span<(string name, object value)> @params = [
            ("OutActors", OutActors), 
            ("bResetArray", bResetArray)
        ];
        ProcessEvent(GetFunction("GetAttachedActors"), @params);
    }
    public void GetAllChildActors(ref TArray<IntPtr> ChildActors, bool bIncludeDescendants)
    {
        Span<(string name, object value)> @params = [
            ("ChildActors", ChildActors), 
            ("bIncludeDescendants", bIncludeDescendants)
        ];
        ProcessEvent(GetFunction("GetAllChildActors"), @params);
    }
    public FVector GetActorUpVector()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetActorUpVector"), @params);
    }
    public float GetActorTimeDilation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetActorTimeDilation"), @params);
    }
    public float GetActorTickInterval()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetActorTickInterval"), @params);
    }
    public FVector GetActorScale3D()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetActorScale3D"), @params);
    }
    public FVector GetActorRightVector()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetActorRightVector"), @params);
    }
    public FVector GetActorRelativeScale3D()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetActorRelativeScale3D"), @params);
    }
    public FVector GetActorForwardVector()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetActorForwardVector"), @params);
    }
    public void GetActorEyesViewPoint(ref FVector OutLocation, ref FRotator OutRotation)
    {
        Span<(string name, object value)> @params = [
            ("OutLocation", OutLocation), 
            ("OutRotation", OutRotation)
        ];
        ProcessEvent(GetFunction("GetActorEyesViewPoint"), @params);
    }
    public bool GetActorEnableCollision()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("GetActorEnableCollision"), @params);
    }
    public void GetActorBounds(bool bOnlyCollidingComponents, ref FVector Origin, ref FVector BoxExtent, bool bIncludeFromChildActors)
    {
        Span<(string name, object value)> @params = [
            ("bOnlyCollidingComponents", bOnlyCollidingComponents), 
            ("Origin", Origin), 
            ("BoxExtent", BoxExtent), 
            ("bIncludeFromChildActors", bIncludeFromChildActors)
        ];
        ProcessEvent(GetFunction("GetActorBounds"), @params);
    }
    public void ForceNetUpdate()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ForceNetUpdate"), @params);
    }
    public void FlushNetDormancy()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("FlushNetDormancy"), @params);
    }
    public void FinishAddComponent(UActorComponent* Component, bool bManualAttachment, ref FTransform RelativeTransform)
    {
        Span<(string name, object value)> @params = [
            ("Component", (IntPtr)Component), 
            ("bManualAttachment", bManualAttachment), 
            ("RelativeTransform", RelativeTransform)
        ];
        ProcessEvent(GetFunction("FinishAddComponent"), @params);
    }
    public void EnableInput(APlayerController* PlayerController)
    {
        Span<(string name, object value)> @params = [
            ("PlayerController", (IntPtr)PlayerController)
        ];
        ProcessEvent(GetFunction("EnableInput"), @params);
    }
    public void DisableInput(APlayerController* PlayerController)
    {
        Span<(string name, object value)> @params = [
            ("PlayerController", (IntPtr)PlayerController)
        ];
        ProcessEvent(GetFunction("DisableInput"), @params);
    }
    public void DetachRootComponentFromParent(bool bMaintainWorldPosition)
    {
        Span<(string name, object value)> @params = [
            ("bMaintainWorldPosition", bMaintainWorldPosition)
        ];
        ProcessEvent(GetFunction("DetachRootComponentFromParent"), @params);
    }
    public void AddTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent)
    {
        Span<(string name, object value)> @params = [
            ("PrerequisiteComponent", (IntPtr)PrerequisiteComponent)
        ];
        ProcessEvent(GetFunction("AddTickPrerequisiteComponent"), @params);
    }
    public void AddTickPrerequisiteActor(AActor* PrerequisiteActor)
    {
        Span<(string name, object value)> @params = [
            ("PrerequisiteActor", (IntPtr)PrerequisiteActor)
        ];
        ProcessEvent(GetFunction("AddTickPrerequisiteActor"), @params);
    }
    public UActorComponent* AddComponentByClass(TSubclassOf<UActorComponent> Class, bool bManualAttachment, ref FTransform RelativeTransform, bool bDeferredFinish)
    {
        Span<(string name, object value)> @params = [
            ("Class", Class), 
            ("bManualAttachment", bManualAttachment), 
            ("RelativeTransform", RelativeTransform), 
            ("bDeferredFinish", bDeferredFinish)
        ];
        return (UActorComponent*)ProcessEvent<IntPtr>(GetFunction("AddComponentByClass"), @params);
    }
    public UActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, ref FTransform RelativeTransform, UObject* ComponentTemplateContext, bool bDeferredFinish)
    {
        Span<(string name, object value)> @params = [
            ("TemplateName", TemplateName), 
            ("bManualAttachment", bManualAttachment), 
            ("RelativeTransform", RelativeTransform), 
            ("ComponentTemplateContext", (IntPtr)ComponentTemplateContext), 
            ("bDeferredFinish", bDeferredFinish)
        ];
        return (UActorComponent*)ProcessEvent<IntPtr>(GetFunction("AddComponent"), @params);
    }
    public bool ActorHasTag(FName Tag)
    {
        Span<(string name, object value)> @params = [
            ("Tag", Tag)
        ];
        return ProcessEvent<bool>(GetFunction("ActorHasTag"), @params);
    }
}

public unsafe class PhysicalAnimationComponent : ObjectBase<UPhysicalAnimationComponent>
{
    public PhysicalAnimationComponent(IntPtr pointer) : base(pointer) {}
    public void SetStrengthMultiplyer(float InStrengthMultiplyer)
    {
        Span<(string name, object value)> @params = [
            ("InStrengthMultiplyer", InStrengthMultiplyer)
        ];
        ProcessEvent(GetFunction("SetStrengthMultiplyer"), @params);
    }
    public void SetSkeletalMeshComponent(USkeletalMeshComponent* InSkeletalMeshComponent)
    {
        Span<(string name, object value)> @params = [
            ("InSkeletalMeshComponent", (IntPtr)InSkeletalMeshComponent)
        ];
        ProcessEvent(GetFunction("SetSkeletalMeshComponent"), @params);
    }
    public FTransform GetBodyTargetTransform(FName BodyName)
    {
        Span<(string name, object value)> @params = [
            ("BodyName", BodyName)
        ];
        return ProcessEvent<FTransform>(GetFunction("GetBodyTargetTransform"), @params);
    }
    public void ApplyPhysicalAnimationSettingsBelow(FName BodyName, ref FPhysicalAnimationData PhysicalAnimationData, bool bIncludeSelf)
    {
        Span<(string name, object value)> @params = [
            ("BodyName", BodyName), 
            ("PhysicalAnimationData", PhysicalAnimationData), 
            ("bIncludeSelf", bIncludeSelf)
        ];
        ProcessEvent(GetFunction("ApplyPhysicalAnimationSettingsBelow"), @params);
    }
    public void ApplyPhysicalAnimationSettings(FName BodyName, ref FPhysicalAnimationData PhysicalAnimationData)
    {
        Span<(string name, object value)> @params = [
            ("BodyName", BodyName), 
            ("PhysicalAnimationData", PhysicalAnimationData)
        ];
        ProcessEvent(GetFunction("ApplyPhysicalAnimationSettings"), @params);
    }
    public void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound)
    {
        Span<(string name, object value)> @params = [
            ("BodyName", BodyName), 
            ("ProfileName", ProfileName), 
            ("bIncludeSelf", bIncludeSelf), 
            ("bClearNotFound", bClearNotFound)
        ];
        ProcessEvent(GetFunction("ApplyPhysicalAnimationProfileBelow"), @params);
    }
}

public unsafe class PhysicalMaterialMask : ObjectBase<UPhysicalMaterialMask>
{
    public PhysicalMaterialMask(IntPtr pointer) : base(pointer) {}
}

public unsafe class PhysicsAsset : ObjectBase<UPhysicsAsset>
{
    public PhysicsAsset(IntPtr pointer) : base(pointer) {}
}

public unsafe class SkeletalBodySetup : ObjectBase<USkeletalBodySetup>
{
    public SkeletalBodySetup(IntPtr pointer) : base(pointer) {}
}

public unsafe class PhysicsCollisionHandler : ObjectBase<UPhysicsCollisionHandler>
{
    public PhysicsCollisionHandler(IntPtr pointer) : base(pointer) {}
}

public unsafe class RigidBodyBase : ObjectBase<ARigidBodyBase>
{
    public RigidBodyBase(IntPtr pointer) : base(pointer) {}}

public unsafe class PhysicsConstraintActor : ObjectBase<APhysicsConstraintActor>
{
    public PhysicsConstraintActor(IntPtr pointer) : base(pointer) {}
}

public unsafe class PhysicsConstraintComponent : ObjectBase<UPhysicsConstraintComponent>
{
    public PhysicsConstraintComponent(IntPtr pointer) : base(pointer) {}
    public void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive)
    {
        Span<(string name, object value)> @params = [
            ("bEnableTwistDrive", bEnableTwistDrive), 
            ("bEnableSwingDrive", bEnableSwingDrive)
        ];
        ProcessEvent(GetFunction("SetOrientationDriveTwistAndSwing"), @params);
    }
    public void SetOrientationDriveSLERP(bool bEnableSLERP)
    {
        Span<(string name, object value)> @params = [
            ("bEnableSLERP", bEnableSLERP)
        ];
        ProcessEvent(GetFunction("SetOrientationDriveSLERP"), @params);
    }
    public void SetLinearZLimit(ELinearConstraintMotion ConstraintType, float LimitSize)
    {
        Span<(string name, object value)> @params = [
            ("ConstraintType", ConstraintType), 
            ("LimitSize", LimitSize)
        ];
        ProcessEvent(GetFunction("SetLinearZLimit"), @params);
    }
    public void SetLinearYLimit(ELinearConstraintMotion ConstraintType, float LimitSize)
    {
        Span<(string name, object value)> @params = [
            ("ConstraintType", ConstraintType), 
            ("LimitSize", LimitSize)
        ];
        ProcessEvent(GetFunction("SetLinearYLimit"), @params);
    }
    public void SetLinearXLimit(ELinearConstraintMotion ConstraintType, float LimitSize)
    {
        Span<(string name, object value)> @params = [
            ("ConstraintType", ConstraintType), 
            ("LimitSize", LimitSize)
        ];
        ProcessEvent(GetFunction("SetLinearXLimit"), @params);
    }
    public void SetLinearVelocityTarget(ref FVector InVelTarget)
    {
        Span<(string name, object value)> @params = [
            ("InVelTarget", InVelTarget)
        ];
        ProcessEvent(GetFunction("SetLinearVelocityTarget"), @params);
    }
    public void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)
    {
        Span<(string name, object value)> @params = [
            ("bEnableDriveX", bEnableDriveX), 
            ("bEnableDriveY", bEnableDriveY), 
            ("bEnableDriveZ", bEnableDriveZ)
        ];
        ProcessEvent(GetFunction("SetLinearVelocityDrive"), @params);
    }
    public void SetLinearPositionTarget(ref FVector InPosTarget)
    {
        Span<(string name, object value)> @params = [
            ("InPosTarget", InPosTarget)
        ];
        ProcessEvent(GetFunction("SetLinearPositionTarget"), @params);
    }
    public void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)
    {
        Span<(string name, object value)> @params = [
            ("bEnableDriveX", bEnableDriveX), 
            ("bEnableDriveY", bEnableDriveY), 
            ("bEnableDriveZ", bEnableDriveZ)
        ];
        ProcessEvent(GetFunction("SetLinearPositionDrive"), @params);
    }
    public void SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold)
    {
        Span<(string name, object value)> @params = [
            ("bLinearPlasticity", bLinearPlasticity), 
            ("LinearPlasticityThreshold", LinearPlasticityThreshold)
        ];
        ProcessEvent(GetFunction("SetLinearPlasticity"), @params);
    }
    public void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit)
    {
        Span<(string name, object value)> @params = [
            ("PositionStrength", PositionStrength), 
            ("VelocityStrength", VelocityStrength), 
            ("InForceLimit", InForceLimit)
        ];
        ProcessEvent(GetFunction("SetLinearDriveParams"), @params);
    }
    public void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold)
    {
        Span<(string name, object value)> @params = [
            ("bLinearBreakable", bLinearBreakable), 
            ("LinearBreakThreshold", LinearBreakThreshold)
        ];
        ProcessEvent(GetFunction("SetLinearBreakable"), @params);
    }
    public void SetDisableCollision(bool bDisableCollision)
    {
        Span<(string name, object value)> @params = [
            ("bDisableCollision", bDisableCollision)
        ];
        ProcessEvent(GetFunction("SetDisableCollision"), @params);
    }
    public void SetConstraintReferencePosition(EConstraintFrame Frame, ref FVector RefPosition)
    {
        Span<(string name, object value)> @params = [
            ("Frame", Frame), 
            ("RefPosition", RefPosition)
        ];
        ProcessEvent(GetFunction("SetConstraintReferencePosition"), @params);
    }
    public void SetConstraintReferenceOrientation(EConstraintFrame Frame, ref FVector PriAxis, ref FVector SecAxis)
    {
        Span<(string name, object value)> @params = [
            ("Frame", Frame), 
            ("PriAxis", PriAxis), 
            ("SecAxis", SecAxis)
        ];
        ProcessEvent(GetFunction("SetConstraintReferenceOrientation"), @params);
    }
    public void SetConstraintReferenceFrame(EConstraintFrame Frame, ref FTransform RefFrame)
    {
        Span<(string name, object value)> @params = [
            ("Frame", Frame), 
            ("RefFrame", RefFrame)
        ];
        ProcessEvent(GetFunction("SetConstraintReferenceFrame"), @params);
    }
    public void SetConstrainedComponents(UPrimitiveComponent* Component1, FName BoneName1, UPrimitiveComponent* Component2, FName BoneName2)
    {
        Span<(string name, object value)> @params = [
            ("Component1", (IntPtr)Component1), 
            ("BoneName1", BoneName1), 
            ("Component2", (IntPtr)Component2), 
            ("BoneName2", BoneName2)
        ];
        ProcessEvent(GetFunction("SetConstrainedComponents"), @params);
    }
    public void SetAngularVelocityTarget(ref FVector InVelTarget)
    {
        Span<(string name, object value)> @params = [
            ("InVelTarget", InVelTarget)
        ];
        ProcessEvent(GetFunction("SetAngularVelocityTarget"), @params);
    }
    public void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive)
    {
        Span<(string name, object value)> @params = [
            ("bEnableTwistDrive", bEnableTwistDrive), 
            ("bEnableSwingDrive", bEnableSwingDrive)
        ];
        ProcessEvent(GetFunction("SetAngularVelocityDriveTwistAndSwing"), @params);
    }
    public void SetAngularVelocityDriveSLERP(bool bEnableSLERP)
    {
        Span<(string name, object value)> @params = [
            ("bEnableSLERP", bEnableSLERP)
        ];
        ProcessEvent(GetFunction("SetAngularVelocityDriveSLERP"), @params);
    }
    public void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
    {
        Span<(string name, object value)> @params = [
            ("bEnableSwingDrive", bEnableSwingDrive), 
            ("bEnableTwistDrive", bEnableTwistDrive)
        ];
        ProcessEvent(GetFunction("SetAngularVelocityDrive"), @params);
    }
    public void SetAngularTwistLimit(EAngularConstraintMotion ConstraintType, float TwistLimitAngle)
    {
        Span<(string name, object value)> @params = [
            ("ConstraintType", ConstraintType), 
            ("TwistLimitAngle", TwistLimitAngle)
        ];
        ProcessEvent(GetFunction("SetAngularTwistLimit"), @params);
    }
    public void SetAngularSwing2Limit(EAngularConstraintMotion MotionType, float Swing2LimitAngle)
    {
        Span<(string name, object value)> @params = [
            ("MotionType", MotionType), 
            ("Swing2LimitAngle", Swing2LimitAngle)
        ];
        ProcessEvent(GetFunction("SetAngularSwing2Limit"), @params);
    }
    public void SetAngularSwing1Limit(EAngularConstraintMotion MotionType, float Swing1LimitAngle)
    {
        Span<(string name, object value)> @params = [
            ("MotionType", MotionType), 
            ("Swing1LimitAngle", Swing1LimitAngle)
        ];
        ProcessEvent(GetFunction("SetAngularSwing1Limit"), @params);
    }
    public void SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold)
    {
        Span<(string name, object value)> @params = [
            ("bAngularPlasticity", bAngularPlasticity), 
            ("AngularPlasticityThreshold", AngularPlasticityThreshold)
        ];
        ProcessEvent(GetFunction("SetAngularPlasticity"), @params);
    }
    public void SetAngularOrientationTarget(ref FRotator InPosTarget)
    {
        Span<(string name, object value)> @params = [
            ("InPosTarget", InPosTarget)
        ];
        ProcessEvent(GetFunction("SetAngularOrientationTarget"), @params);
    }
    public void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
    {
        Span<(string name, object value)> @params = [
            ("bEnableSwingDrive", bEnableSwingDrive), 
            ("bEnableTwistDrive", bEnableTwistDrive)
        ];
        ProcessEvent(GetFunction("SetAngularOrientationDrive"), @params);
    }
    public void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit)
    {
        Span<(string name, object value)> @params = [
            ("PositionStrength", PositionStrength), 
            ("VelocityStrength", VelocityStrength), 
            ("InForceLimit", InForceLimit)
        ];
        ProcessEvent(GetFunction("SetAngularDriveParams"), @params);
    }
    public void SetAngularDriveMode(EAngularDriveMode DriveMode)
    {
        Span<(string name, object value)> @params = [
            ("DriveMode", DriveMode)
        ];
        ProcessEvent(GetFunction("SetAngularDriveMode"), @params);
    }
    public void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold)
    {
        Span<(string name, object value)> @params = [
            ("bAngularBreakable", bAngularBreakable), 
            ("AngularBreakThreshold", AngularBreakThreshold)
        ];
        ProcessEvent(GetFunction("SetAngularBreakable"), @params);
    }
    public bool IsBroken()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsBroken"), @params);
    }
    public float GetCurrentTwist()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetCurrentTwist"), @params);
    }
    public float GetCurrentSwing2()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetCurrentSwing2"), @params);
    }
    public float GetCurrentSwing1()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetCurrentSwing1"), @params);
    }
    public void GetConstraintForce(ref FVector OutLinearForce, ref FVector OutAngularForce)
    {
        Span<(string name, object value)> @params = [
            ("OutLinearForce", OutLinearForce), 
            ("OutAngularForce", OutAngularForce)
        ];
        ProcessEvent(GetFunction("GetConstraintForce"), @params);
    }
    public void BreakConstraint()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("BreakConstraint"), @params);
    }
}

public unsafe class PhysicsConstraintTemplate : ObjectBase<UPhysicsConstraintTemplate>
{
    public PhysicsConstraintTemplate(IntPtr pointer) : base(pointer) {}
}

public unsafe class PhysicsFieldComponent : ObjectBase<UPhysicsFieldComponent>
{
    public PhysicsFieldComponent(IntPtr pointer) : base(pointer) {}}

public unsafe class PhysicsHandleComponent : ObjectBase<UPhysicsHandleComponent>
{
    public PhysicsHandleComponent(IntPtr pointer) : base(pointer) {}
    public void SetTargetRotation(FRotator NewRotation)
    {
        Span<(string name, object value)> @params = [
            ("NewRotation", NewRotation)
        ];
        ProcessEvent(GetFunction("SetTargetRotation"), @params);
    }
    public void SetTargetLocationAndRotation(FVector NewLocation, FRotator NewRotation)
    {
        Span<(string name, object value)> @params = [
            ("NewLocation", NewLocation), 
            ("NewRotation", NewRotation)
        ];
        ProcessEvent(GetFunction("SetTargetLocationAndRotation"), @params);
    }
    public void SetTargetLocation(FVector NewLocation)
    {
        Span<(string name, object value)> @params = [
            ("NewLocation", NewLocation)
        ];
        ProcessEvent(GetFunction("SetTargetLocation"), @params);
    }
    public void SetLinearStiffness(float NewLinearStiffness)
    {
        Span<(string name, object value)> @params = [
            ("NewLinearStiffness", NewLinearStiffness)
        ];
        ProcessEvent(GetFunction("SetLinearStiffness"), @params);
    }
    public void SetLinearDamping(float NewLinearDamping)
    {
        Span<(string name, object value)> @params = [
            ("NewLinearDamping", NewLinearDamping)
        ];
        ProcessEvent(GetFunction("SetLinearDamping"), @params);
    }
    public void SetInterpolationSpeed(float NewInterpolationSpeed)
    {
        Span<(string name, object value)> @params = [
            ("NewInterpolationSpeed", NewInterpolationSpeed)
        ];
        ProcessEvent(GetFunction("SetInterpolationSpeed"), @params);
    }
    public void SetAngularStiffness(float NewAngularStiffness)
    {
        Span<(string name, object value)> @params = [
            ("NewAngularStiffness", NewAngularStiffness)
        ];
        ProcessEvent(GetFunction("SetAngularStiffness"), @params);
    }
    public void SetAngularDamping(float NewAngularDamping)
    {
        Span<(string name, object value)> @params = [
            ("NewAngularDamping", NewAngularDamping)
        ];
        ProcessEvent(GetFunction("SetAngularDamping"), @params);
    }
    public void ReleaseComponent()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ReleaseComponent"), @params);
    }
    public void GrabComponentAtLocationWithRotation(UPrimitiveComponent* Component, FName InBoneName, FVector Location, FRotator Rotation)
    {
        Span<(string name, object value)> @params = [
            ("Component", (IntPtr)Component), 
            ("InBoneName", InBoneName), 
            ("Location", Location), 
            ("Rotation", Rotation)
        ];
        ProcessEvent(GetFunction("GrabComponentAtLocationWithRotation"), @params);
    }
    public void GrabComponentAtLocation(UPrimitiveComponent* Component, FName InBoneName, FVector GrabLocation)
    {
        Span<(string name, object value)> @params = [
            ("Component", (IntPtr)Component), 
            ("InBoneName", InBoneName), 
            ("GrabLocation", GrabLocation)
        ];
        ProcessEvent(GetFunction("GrabComponentAtLocation"), @params);
    }
    public void GrabComponent(UPrimitiveComponent* Component, FName InBoneName, FVector GrabLocation, bool bConstrainRotation)
    {
        Span<(string name, object value)> @params = [
            ("Component", (IntPtr)Component), 
            ("InBoneName", InBoneName), 
            ("GrabLocation", GrabLocation), 
            ("bConstrainRotation", bConstrainRotation)
        ];
        ProcessEvent(GetFunction("GrabComponent"), @params);
    }
    public void GetTargetLocationAndRotation(ref FVector TargetLocation, ref FRotator TargetRotation)
    {
        Span<(string name, object value)> @params = [
            ("TargetLocation", TargetLocation), 
            ("TargetRotation", TargetRotation)
        ];
        ProcessEvent(GetFunction("GetTargetLocationAndRotation"), @params);
    }
    public UPrimitiveComponent* GetGrabbedComponent()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UPrimitiveComponent*)ProcessEvent<IntPtr>(GetFunction("GetGrabbedComponent"), @params);
    }
}

public unsafe class PhysicsSettings : ObjectBase<UPhysicsSettings>
{
    public PhysicsSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class PhysicsSpringComponent : ObjectBase<UPhysicsSpringComponent>
{
    public PhysicsSpringComponent(IntPtr pointer) : base(pointer) {}
    public FVector GetSpringRestingPoint()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetSpringRestingPoint"), @params);
    }
    public FVector GetSpringDirection()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetSpringDirection"), @params);
    }
    public FVector GetSpringCurrentEndPoint()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetSpringCurrentEndPoint"), @params);
    }
    public float GetNormalizedCompressionScalar()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetNormalizedCompressionScalar"), @params);
    }
}

public unsafe class PhysicsThruster : ObjectBase<APhysicsThruster>
{
    public PhysicsThruster(IntPtr pointer) : base(pointer) {}
}

public unsafe class PhysicsThrusterComponent : ObjectBase<UPhysicsThrusterComponent>
{
    public PhysicsThrusterComponent(IntPtr pointer) : base(pointer) {}
}

public unsafe class PlanarReflection : ObjectBase<APlanarReflection>
{
    public PlanarReflection(IntPtr pointer) : base(pointer) {}
    public void OnInterpToggle(bool bEnable)
    {
        Span<(string name, object value)> @params = [
            ("bEnable", bEnable)
        ];
        ProcessEvent(GetFunction("OnInterpToggle"), @params);
    }
}

public unsafe class SceneCaptureComponent : ObjectBase<USceneCaptureComponent>
{
    public SceneCaptureComponent(IntPtr pointer) : base(pointer) {}
    public void ShowOnlyComponent(UPrimitiveComponent* inComponent)
    {
        Span<(string name, object value)> @params = [
            ("inComponent", (IntPtr)inComponent)
        ];
        ProcessEvent(GetFunction("ShowOnlyComponent"), @params);
    }
    public void ShowOnlyActorComponents(AActor* InActor, bool bIncludeFromChildActors)
    {
        Span<(string name, object value)> @params = [
            ("InActor", (IntPtr)InActor), 
            ("bIncludeFromChildActors", bIncludeFromChildActors)
        ];
        ProcessEvent(GetFunction("ShowOnlyActorComponents"), @params);
    }
    public void SetCaptureSortPriority(int NewCaptureSortPriority)
    {
        Span<(string name, object value)> @params = [
            ("NewCaptureSortPriority", NewCaptureSortPriority)
        ];
        ProcessEvent(GetFunction("SetCaptureSortPriority"), @params);
    }
    public void RemoveShowOnlyComponent(UPrimitiveComponent* inComponent)
    {
        Span<(string name, object value)> @params = [
            ("inComponent", (IntPtr)inComponent)
        ];
        ProcessEvent(GetFunction("RemoveShowOnlyComponent"), @params);
    }
    public void RemoveShowOnlyActorComponents(AActor* InActor, bool bIncludeFromChildActors)
    {
        Span<(string name, object value)> @params = [
            ("InActor", (IntPtr)InActor), 
            ("bIncludeFromChildActors", bIncludeFromChildActors)
        ];
        ProcessEvent(GetFunction("RemoveShowOnlyActorComponents"), @params);
    }
    public void HideComponent(UPrimitiveComponent* inComponent)
    {
        Span<(string name, object value)> @params = [
            ("inComponent", (IntPtr)inComponent)
        ];
        ProcessEvent(GetFunction("HideComponent"), @params);
    }
    public void HideActorComponents(AActor* InActor, bool bIncludeFromChildActors)
    {
        Span<(string name, object value)> @params = [
            ("InActor", (IntPtr)InActor), 
            ("bIncludeFromChildActors", bIncludeFromChildActors)
        ];
        ProcessEvent(GetFunction("HideActorComponents"), @params);
    }
    public void ClearShowOnlyComponents()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClearShowOnlyComponents"), @params);
    }
    public void ClearHiddenComponents()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClearHiddenComponents"), @params);
    }
}

public unsafe class PlanarReflectionComponent : ObjectBase<UPlanarReflectionComponent>
{
    public PlanarReflectionComponent(IntPtr pointer) : base(pointer) {}
}

public unsafe class PlaneReflectionCapture : ObjectBase<APlaneReflectionCapture>
{
    public PlaneReflectionCapture(IntPtr pointer) : base(pointer) {}}

public unsafe class PlaneReflectionCaptureComponent : ObjectBase<UPlaneReflectionCaptureComponent>
{
    public PlaneReflectionCaptureComponent(IntPtr pointer) : base(pointer) {}
}

public unsafe class PlatformEventsComponent : ObjectBase<UPlatformEventsComponent>
{
    public PlatformEventsComponent(IntPtr pointer) : base(pointer) {}
    public bool SupportsConvertibleLaptops()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("SupportsConvertibleLaptops"), @params);
    }
    public void PlatformEventDelegate__DelegateSignature()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("PlatformEventDelegate__DelegateSignature"), @params);
    }
    public bool IsInTabletMode()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsInTabletMode"), @params);
    }
    public bool IsInLaptopMode()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsInLaptopMode"), @params);
    }
}

public unsafe class PlatformInterfaceWebResponse : ObjectBase<UPlatformInterfaceWebResponse>
{
    public PlatformInterfaceWebResponse(IntPtr pointer) : base(pointer) {}
    public int GetNumHeaders()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetNumHeaders"), @params);
    }
    public FString GetHeaderValue(FString HeaderName)
    {
        Span<(string name, object value)> @params = [
            ("HeaderName", HeaderName)
        ];
        return ProcessEvent<FString>(GetFunction("GetHeaderValue"), @params);
    }
    public void GetHeader(int HeaderIndex, ref FString Header, ref FString Value)
    {
        Span<(string name, object value)> @params = [
            ("HeaderIndex", HeaderIndex), 
            ("Header", Header), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("GetHeader"), @params);
    }
}

public unsafe class PlayerCameraManager : ObjectBase<APlayerCameraManager>
{
    public PlayerCameraManager(IntPtr pointer) : base(pointer) {}
    public void SwapPendingViewTargetWhenUsingClientSideCameraUpdates()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("SwapPendingViewTargetWhenUsingClientSideCameraUpdates"), @params);
    }
    public void StopCameraShake(UCameraShakeBase* ShakeInstance, bool bImmediately)
    {
        Span<(string name, object value)> @params = [
            ("ShakeInstance", (IntPtr)ShakeInstance), 
            ("bImmediately", bImmediately)
        ];
        ProcessEvent(GetFunction("StopCameraShake"), @params);
    }
    public void StopCameraFade()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("StopCameraFade"), @params);
    }
    public void StopCameraAnimInst(UCameraAnimInst* AnimInst, bool bImmediate)
    {
        Span<(string name, object value)> @params = [
            ("AnimInst", (IntPtr)AnimInst), 
            ("bImmediate", bImmediate)
        ];
        ProcessEvent(GetFunction("StopCameraAnimInst"), @params);
    }
    public void StopAllInstancesOfCameraShakeFromSource(TSubclassOf<UCameraShakeBase> Shake, UCameraShakeSourceComponent* SourceComponent, bool bImmediately)
    {
        Span<(string name, object value)> @params = [
            ("Shake", Shake), 
            ("SourceComponent", (IntPtr)SourceComponent), 
            ("bImmediately", bImmediately)
        ];
        ProcessEvent(GetFunction("StopAllInstancesOfCameraShakeFromSource"), @params);
    }
    public void StopAllInstancesOfCameraShake(TSubclassOf<UCameraShakeBase> Shake, bool bImmediately)
    {
        Span<(string name, object value)> @params = [
            ("Shake", Shake), 
            ("bImmediately", bImmediately)
        ];
        ProcessEvent(GetFunction("StopAllInstancesOfCameraShake"), @params);
    }
    public void StopAllInstancesOfCameraAnim(UCameraAnim* Anim, bool bImmediate)
    {
        Span<(string name, object value)> @params = [
            ("Anim", (IntPtr)Anim), 
            ("bImmediate", bImmediate)
        ];
        ProcessEvent(GetFunction("StopAllInstancesOfCameraAnim"), @params);
    }
    public void StopAllCameraShakesFromSource(UCameraShakeSourceComponent* SourceComponent, bool bImmediately)
    {
        Span<(string name, object value)> @params = [
            ("SourceComponent", (IntPtr)SourceComponent), 
            ("bImmediately", bImmediately)
        ];
        ProcessEvent(GetFunction("StopAllCameraShakesFromSource"), @params);
    }
    public void StopAllCameraShakes(bool bImmediately)
    {
        Span<(string name, object value)> @params = [
            ("bImmediately", bImmediately)
        ];
        ProcessEvent(GetFunction("StopAllCameraShakes"), @params);
    }
    public void StopAllCameraAnims(bool bImmediate)
    {
        Span<(string name, object value)> @params = [
            ("bImmediate", bImmediate)
        ];
        ProcessEvent(GetFunction("StopAllCameraAnims"), @params);
    }
    public UCameraShakeBase* StartCameraShakeFromSource(TSubclassOf<UCameraShakeBase> ShakeClass, UCameraShakeSourceComponent* SourceComponent, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot)
    {
        Span<(string name, object value)> @params = [
            ("ShakeClass", ShakeClass), 
            ("SourceComponent", (IntPtr)SourceComponent), 
            ("Scale", Scale), 
            ("PlaySpace", PlaySpace), 
            ("UserPlaySpaceRot", UserPlaySpaceRot)
        ];
        return (UCameraShakeBase*)ProcessEvent<IntPtr>(GetFunction("StartCameraShakeFromSource"), @params);
    }
    public UCameraShakeBase* StartCameraShake(TSubclassOf<UCameraShakeBase> ShakeClass, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot)
    {
        Span<(string name, object value)> @params = [
            ("ShakeClass", ShakeClass), 
            ("Scale", Scale), 
            ("PlaySpace", PlaySpace), 
            ("UserPlaySpaceRot", UserPlaySpaceRot)
        ];
        return (UCameraShakeBase*)ProcessEvent<IntPtr>(GetFunction("StartCameraShake"), @params);
    }
    public void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished)
    {
        Span<(string name, object value)> @params = [
            ("FromAlpha", FromAlpha), 
            ("ToAlpha", ToAlpha), 
            ("Duration", Duration), 
            ("Color", Color), 
            ("bShouldFadeAudio", bShouldFadeAudio), 
            ("bHoldWhenFinished", bHoldWhenFinished)
        ];
        ProcessEvent(GetFunction("StartCameraFade"), @params);
    }
    public void SetManualCameraFade(float InFadeAmount, FLinearColor Color, bool bInFadeAudio)
    {
        Span<(string name, object value)> @params = [
            ("InFadeAmount", InFadeAmount), 
            ("Color", Color), 
            ("bInFadeAudio", bInFadeAudio)
        ];
        ProcessEvent(GetFunction("SetManualCameraFade"), @params);
    }
    public void SetGameCameraCutThisFrame()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("SetGameCameraCutThisFrame"), @params);
    }
    public bool RemoveCameraModifier(UCameraModifier* ModifierToRemove)
    {
        Span<(string name, object value)> @params = [
            ("ModifierToRemove", (IntPtr)ModifierToRemove)
        ];
        return ProcessEvent<bool>(GetFunction("RemoveCameraModifier"), @params);
    }
    public void RemoveCameraLensEffect(AEmitterCameraLensEffectBase* Emitter)
    {
        Span<(string name, object value)> @params = [
            ("Emitter", (IntPtr)Emitter)
        ];
        ProcessEvent(GetFunction("RemoveCameraLensEffect"), @params);
    }
    public UCameraAnimInst* PlayCameraAnim(UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot)
    {
        Span<(string name, object value)> @params = [
            ("Anim", (IntPtr)Anim), 
            ("Rate", Rate), 
            ("Scale", Scale), 
            ("BlendInTime", BlendInTime), 
            ("BlendOutTime", BlendOutTime), 
            ("bLoop", bLoop), 
            ("bRandomStartTime", bRandomStartTime), 
            ("Duration", Duration), 
            ("PlaySpace", PlaySpace), 
            ("UserPlaySpaceRot", UserPlaySpaceRot)
        ];
        return (UCameraAnimInst*)ProcessEvent<IntPtr>(GetFunction("PlayCameraAnim"), @params);
    }
    public void PhotographyCameraModify(FVector NewCameraLocation, FVector PreviousCameraLocation, FVector OriginalCameraLocation, ref FVector ResultCameraLocation)
    {
        Span<(string name, object value)> @params = [
            ("NewCameraLocation", NewCameraLocation), 
            ("PreviousCameraLocation", PreviousCameraLocation), 
            ("OriginalCameraLocation", OriginalCameraLocation), 
            ("ResultCameraLocation", ResultCameraLocation)
        ];
        ProcessEvent(GetFunction("PhotographyCameraModify"), @params);
    }
    public void OnPhotographySessionStart()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnPhotographySessionStart"), @params);
    }
    public void OnPhotographySessionEnd()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnPhotographySessionEnd"), @params);
    }
    public void OnPhotographyMultiPartCaptureStart()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnPhotographyMultiPartCaptureStart"), @params);
    }
    public void OnPhotographyMultiPartCaptureEnd()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnPhotographyMultiPartCaptureEnd"), @params);
    }
    public APlayerController* GetOwningPlayerController()
    {
        Span<(string name, object value)> @params = [
        ];
        return (APlayerController*)ProcessEvent<IntPtr>(GetFunction("GetOwningPlayerController"), @params);
    }
    public float GetFOVAngle()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetFOVAngle"), @params);
    }
    public FRotator GetCameraRotation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FRotator>(GetFunction("GetCameraRotation"), @params);
    }
    public FVector GetCameraLocation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetCameraLocation"), @params);
    }
    public UCameraModifier* FindCameraModifierByClass(TSubclassOf<UCameraModifier> ModifierClass)
    {
        Span<(string name, object value)> @params = [
            ("ModifierClass", ModifierClass)
        ];
        return (UCameraModifier*)ProcessEvent<IntPtr>(GetFunction("FindCameraModifierByClass"), @params);
    }
    public void ClearCameraLensEffects()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClearCameraLensEffects"), @params);
    }
    public bool BlueprintUpdateCamera(AActor* CameraTarget, ref FVector NewCameraLocation, ref FRotator NewCameraRotation, ref float NewCameraFOV)
    {
        Span<(string name, object value)> @params = [
            ("CameraTarget", (IntPtr)CameraTarget), 
            ("NewCameraLocation", NewCameraLocation), 
            ("NewCameraRotation", NewCameraRotation), 
            ("NewCameraFOV", NewCameraFOV)
        ];
        return ProcessEvent<bool>(GetFunction("BlueprintUpdateCamera"), @params);
    }
    public UCameraModifier* AddNewCameraModifier(TSubclassOf<UCameraModifier> ModifierClass)
    {
        Span<(string name, object value)> @params = [
            ("ModifierClass", ModifierClass)
        ];
        return (UCameraModifier*)ProcessEvent<IntPtr>(GetFunction("AddNewCameraModifier"), @params);
    }
    public AEmitterCameraLensEffectBase* AddCameraLensEffect(TSubclassOf<AEmitterCameraLensEffectBase> LensEffectEmitterClass)
    {
        Span<(string name, object value)> @params = [
            ("LensEffectEmitterClass", LensEffectEmitterClass)
        ];
        return (AEmitterCameraLensEffectBase*)ProcessEvent<IntPtr>(GetFunction("AddCameraLensEffect"), @params);
    }
}

public unsafe class PlayerInput : ObjectBase<UPlayerInput>
{
    public PlayerInput(IntPtr pointer) : base(pointer) {}
    public void SetMouseSensitivity(float Sensitivity)
    {
        Span<(string name, object value)> @params = [
            ("Sensitivity", Sensitivity)
        ];
        ProcessEvent(GetFunction("SetMouseSensitivity"), @params);
    }
    public void SetBind(FName BindName, FString Command)
    {
        Span<(string name, object value)> @params = [
            ("BindName", BindName), 
            ("Command", Command)
        ];
        ProcessEvent(GetFunction("SetBind"), @params);
    }
    public void InvertAxisKey(FKey AxisKey)
    {
        Span<(string name, object value)> @params = [
            ("AxisKey", AxisKey)
        ];
        ProcessEvent(GetFunction("InvertAxisKey"), @params);
    }
    public void InvertAxis(FName AxisName)
    {
        Span<(string name, object value)> @params = [
            ("AxisName", AxisName)
        ];
        ProcessEvent(GetFunction("InvertAxis"), @params);
    }
    public void ClearSmoothing()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClearSmoothing"), @params);
    }
}

public unsafe class PlayerStartPIE : ObjectBase<APlayerStartPIE>
{
    public PlayerStartPIE(IntPtr pointer) : base(pointer) {}}

public unsafe class PlayerState : ObjectBase<APlayerState>
{
    public PlayerState(IntPtr pointer) : base(pointer) {}
    public void ReceiveOverrideWith(APlayerState* OldPlayerState)
    {
        Span<(string name, object value)> @params = [
            ("OldPlayerState", (IntPtr)OldPlayerState)
        ];
        ProcessEvent(GetFunction("ReceiveOverrideWith"), @params);
    }
    public void ReceiveCopyProperties(APlayerState* NewPlayerState)
    {
        Span<(string name, object value)> @params = [
            ("NewPlayerState", (IntPtr)NewPlayerState)
        ];
        ProcessEvent(GetFunction("ReceiveCopyProperties"), @params);
    }
    public void OnRep_UniqueId()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_UniqueId"), @params);
    }
    public void OnRep_Score()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_Score"), @params);
    }
    public void OnRep_PlayerName()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_PlayerName"), @params);
    }
    public void OnRep_PlayerId()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_PlayerId"), @params);
    }
    public void OnRep_bIsInactive()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_bIsInactive"), @params);
    }
    public bool IsOnlyASpectator()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsOnlyASpectator"), @params);
    }
    public FString GetPlayerName()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetPlayerName"), @params);
    }
}

public unsafe class PluginCommandlet : ObjectBase<UPluginCommandlet>
{
    public PluginCommandlet(IntPtr pointer) : base(pointer) {}}

public unsafe class PointLight : ObjectBase<APointLight>
{
    public PointLight(IntPtr pointer) : base(pointer) {}
    public void SetRadius(float NewRadius)
    {
        Span<(string name, object value)> @params = [
            ("NewRadius", NewRadius)
        ];
        ProcessEvent(GetFunction("SetRadius"), @params);
    }
    public void SetLightFalloffExponent(float NewLightFalloffExponent)
    {
        Span<(string name, object value)> @params = [
            ("NewLightFalloffExponent", NewLightFalloffExponent)
        ];
        ProcessEvent(GetFunction("SetLightFalloffExponent"), @params);
    }
}

public unsafe class PointLightComponent : ObjectBase<UPointLightComponent>
{
    public PointLightComponent(IntPtr pointer) : base(pointer) {}
    public void SetSourceRadius(float bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetSourceRadius"), @params);
    }
    public void SetSourceLength(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetSourceLength"), @params);
    }
    public void SetSoftSourceRadius(float bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetSoftSourceRadius"), @params);
    }
    public void SetLightFalloffExponent(float NewLightFalloffExponent)
    {
        Span<(string name, object value)> @params = [
            ("NewLightFalloffExponent", NewLightFalloffExponent)
        ];
        ProcessEvent(GetFunction("SetLightFalloffExponent"), @params);
    }
}

public unsafe class Polys : ObjectBase<UPolys>
{
    public Polys(IntPtr pointer) : base(pointer) {}}

public unsafe class PoseableMeshComponent : ObjectBase<UPoseableMeshComponent>
{
    public PoseableMeshComponent(IntPtr pointer) : base(pointer) {}
    public void SetBoneTransformByName(FName BoneName, ref FTransform InTransform, EBoneSpaces BoneSpace)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("InTransform", InTransform), 
            ("BoneSpace", BoneSpace)
        ];
        ProcessEvent(GetFunction("SetBoneTransformByName"), @params);
    }
    public void SetBoneScaleByName(FName BoneName, FVector InScale3D, EBoneSpaces BoneSpace)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("InScale3D", InScale3D), 
            ("BoneSpace", BoneSpace)
        ];
        ProcessEvent(GetFunction("SetBoneScaleByName"), @params);
    }
    public void SetBoneRotationByName(FName BoneName, FRotator InRotation, EBoneSpaces BoneSpace)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("InRotation", InRotation), 
            ("BoneSpace", BoneSpace)
        ];
        ProcessEvent(GetFunction("SetBoneRotationByName"), @params);
    }
    public void SetBoneLocationByName(FName BoneName, FVector InLocation, EBoneSpaces BoneSpace)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("InLocation", InLocation), 
            ("BoneSpace", BoneSpace)
        ];
        ProcessEvent(GetFunction("SetBoneLocationByName"), @params);
    }
    public void ResetBoneTransformByName(FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("ResetBoneTransformByName"), @params);
    }
    public FTransform GetBoneTransformByName(FName BoneName, EBoneSpaces BoneSpace)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("BoneSpace", BoneSpace)
        ];
        return ProcessEvent<FTransform>(GetFunction("GetBoneTransformByName"), @params);
    }
    public FVector GetBoneScaleByName(FName BoneName, EBoneSpaces BoneSpace)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("BoneSpace", BoneSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetBoneScaleByName"), @params);
    }
    public FRotator GetBoneRotationByName(FName BoneName, EBoneSpaces BoneSpace)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("BoneSpace", BoneSpace)
        ];
        return ProcessEvent<FRotator>(GetFunction("GetBoneRotationByName"), @params);
    }
    public FVector GetBoneLocationByName(FName BoneName, EBoneSpaces BoneSpace)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("BoneSpace", BoneSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetBoneLocationByName"), @params);
    }
    public void CopyPoseFromSkeletalComponent(USkeletalMeshComponent* InComponentToCopy)
    {
        Span<(string name, object value)> @params = [
            ("InComponentToCopy", (IntPtr)InComponentToCopy)
        ];
        ProcessEvent(GetFunction("CopyPoseFromSkeletalComponent"), @params);
    }
}

public unsafe class PoseAsset : ObjectBase<UPoseAsset>
{
    public PoseAsset(IntPtr pointer) : base(pointer) {}
}

public unsafe class PoseWatch : ObjectBase<UPoseWatch>
{
    public PoseWatch(IntPtr pointer) : base(pointer) {}
}

public unsafe class PostProcessComponent : ObjectBase<UPostProcessComponent>
{
    public PostProcessComponent(IntPtr pointer) : base(pointer) {}
    public void AddOrUpdateBlendable(TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight)
    {
        Span<(string name, object value)> @params = [
            ("InBlendableObject", InBlendableObject), 
            ("InWeight", InWeight)
        ];
        ProcessEvent(GetFunction("AddOrUpdateBlendable"), @params);
    }
}

public unsafe class PostProcessVolume : ObjectBase<APostProcessVolume>
{
    public PostProcessVolume(IntPtr pointer) : base(pointer) {}
    public void AddOrUpdateBlendable(TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight)
    {
        Span<(string name, object value)> @params = [
            ("InBlendableObject", InBlendableObject), 
            ("InWeight", InWeight)
        ];
        ProcessEvent(GetFunction("AddOrUpdateBlendable"), @params);
    }
}

public unsafe class PrecomputedVisibilityOverrideVolume : ObjectBase<APrecomputedVisibilityOverrideVolume>
{
    public PrecomputedVisibilityOverrideVolume(IntPtr pointer) : base(pointer) {}
}

public unsafe class PrecomputedVisibilityVolume : ObjectBase<APrecomputedVisibilityVolume>
{
    public PrecomputedVisibilityVolume(IntPtr pointer) : base(pointer) {}}

public unsafe class PreviewCollectionInterface : ObjectBase<IPreviewCollectionInterface>
{
    public PreviewCollectionInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class PreviewMeshCollection : ObjectBase<UPreviewMeshCollection>
{
    public PreviewMeshCollection(IntPtr pointer) : base(pointer) {}
}

public unsafe class ProjectileMovementComponent : ObjectBase<UProjectileMovementComponent>
{
    public ProjectileMovementComponent(IntPtr pointer) : base(pointer) {}
    public void StopSimulating(ref FHitResult HitResult)
    {
        Span<(string name, object value)> @params = [
            ("HitResult", HitResult)
        ];
        ProcessEvent(GetFunction("StopSimulating"), @params);
    }
    public void SetVelocityInLocalSpace(FVector NewVelocity)
    {
        Span<(string name, object value)> @params = [
            ("NewVelocity", NewVelocity)
        ];
        ProcessEvent(GetFunction("SetVelocityInLocalSpace"), @params);
    }
    public void SetInterpolatedComponent(USceneComponent* Component)
    {
        Span<(string name, object value)> @params = [
            ("Component", (IntPtr)Component)
        ];
        ProcessEvent(GetFunction("SetInterpolatedComponent"), @params);
    }
    public void ResetInterpolation()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ResetInterpolation"), @params);
    }
    public void OnProjectileStopDelegate__DelegateSignature(ref FHitResult ImpactResult)
    {
        Span<(string name, object value)> @params = [
            ("ImpactResult", ImpactResult)
        ];
        ProcessEvent(GetFunction("OnProjectileStopDelegate__DelegateSignature"), @params);
    }
    public void OnProjectileBounceDelegate__DelegateSignature(ref FHitResult ImpactResult, ref FVector ImpactVelocity)
    {
        Span<(string name, object value)> @params = [
            ("ImpactResult", ImpactResult), 
            ("ImpactVelocity", ImpactVelocity)
        ];
        ProcessEvent(GetFunction("OnProjectileBounceDelegate__DelegateSignature"), @params);
    }
    public void MoveInterpolationTarget(ref FVector NewLocation, ref FRotator NewRotation)
    {
        Span<(string name, object value)> @params = [
            ("NewLocation", NewLocation), 
            ("NewRotation", NewRotation)
        ];
        ProcessEvent(GetFunction("MoveInterpolationTarget"), @params);
    }
    public FVector LimitVelocity(FVector NewVelocity)
    {
        Span<(string name, object value)> @params = [
            ("NewVelocity", NewVelocity)
        ];
        return ProcessEvent<FVector>(GetFunction("LimitVelocity"), @params);
    }
    public bool IsVelocityUnderSimulationThreshold()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsVelocityUnderSimulationThreshold"), @params);
    }
    public bool IsInterpolationComplete()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsInterpolationComplete"), @params);
    }
}

public unsafe class ProxyLODMeshSimplificationSettings : ObjectBase<UProxyLODMeshSimplificationSettings>
{
    public ProxyLODMeshSimplificationSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class RadialForceActor : ObjectBase<ARadialForceActor>
{
    public RadialForceActor(IntPtr pointer) : base(pointer) {}
    public void ToggleForce()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ToggleForce"), @params);
    }
    public void FireImpulse()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("FireImpulse"), @params);
    }
    public void EnableForce()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("EnableForce"), @params);
    }
    public void DisableForce()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("DisableForce"), @params);
    }
}

public unsafe class RadialForceComponent : ObjectBase<URadialForceComponent>
{
    public RadialForceComponent(IntPtr pointer) : base(pointer) {}
    public void RemoveObjectTypeToAffect(EObjectTypeQuery ObjectType)
    {
        Span<(string name, object value)> @params = [
            ("ObjectType", ObjectType)
        ];
        ProcessEvent(GetFunction("RemoveObjectTypeToAffect"), @params);
    }
    public void FireImpulse()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("FireImpulse"), @params);
    }
    public void AddObjectTypeToAffect(EObjectTypeQuery ObjectType)
    {
        Span<(string name, object value)> @params = [
            ("ObjectType", ObjectType)
        ];
        ProcessEvent(GetFunction("AddObjectTypeToAffect"), @params);
    }
}

public unsafe class RectLight : ObjectBase<ARectLight>
{
    public RectLight(IntPtr pointer) : base(pointer) {}
}

public unsafe class RectLightComponent : ObjectBase<URectLightComponent>
{
    public RectLightComponent(IntPtr pointer) : base(pointer) {}
    public void SetSourceWidth(float bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetSourceWidth"), @params);
    }
    public void SetSourceTexture(UTexture* bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", (IntPtr)bNewValue)
        ];
        ProcessEvent(GetFunction("SetSourceTexture"), @params);
    }
    public void SetSourceHeight(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetSourceHeight"), @params);
    }
    public void SetBarnDoorLength(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetBarnDoorLength"), @params);
    }
    public void SetBarnDoorAngle(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetBarnDoorAngle"), @params);
    }
}

public unsafe class RendererSettings : ObjectBase<URendererSettings>
{
    public RendererSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class RendererOverrideSettings : ObjectBase<URendererOverrideSettings>
{
    public RendererOverrideSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class ReplayNetConnection : ObjectBase<UReplayNetConnection>
{
    public ReplayNetConnection(IntPtr pointer) : base(pointer) {}}

public unsafe class ReplaySubsystem : ObjectBase<UReplaySubsystem>
{
    public ReplaySubsystem(IntPtr pointer) : base(pointer) {}
}

public unsafe class ReplicationDriver : ObjectBase<UReplicationDriver>
{
    public ReplicationDriver(IntPtr pointer) : base(pointer) {}}

public unsafe class ReplicationConnectionDriver : ObjectBase<UReplicationConnectionDriver>
{
    public ReplicationConnectionDriver(IntPtr pointer) : base(pointer) {}}

public unsafe class ReporterBase : ObjectBase<UReporterBase>
{
    public ReporterBase(IntPtr pointer) : base(pointer) {}}

public unsafe class ReporterGraph : ObjectBase<UReporterGraph>
{
    public ReporterGraph(IntPtr pointer) : base(pointer) {}}

public unsafe class ReverbEffect : ObjectBase<UReverbEffect>
{
    public ReverbEffect(IntPtr pointer) : base(pointer) {}
}

public unsafe class Rig : ObjectBase<URig>
{
    public Rig(IntPtr pointer) : base(pointer) {}
}

public unsafe class RotatingMovementComponent : ObjectBase<URotatingMovementComponent>
{
    public RotatingMovementComponent(IntPtr pointer) : base(pointer) {}
}

public unsafe class RuntimeOptionsBase : ObjectBase<URuntimeOptionsBase>
{
    public RuntimeOptionsBase(IntPtr pointer) : base(pointer) {}}

public unsafe class RuntimeVirtualTexture : ObjectBase<URuntimeVirtualTexture>
{
    public RuntimeVirtualTexture(IntPtr pointer) : base(pointer) {}
    public int GetTileSize()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetTileSize"), @params);
    }
    public int GetTileCount()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetTileCount"), @params);
    }
    public int GetTileBorderSize()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetTileBorderSize"), @params);
    }
    public int GetSize()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetSize"), @params);
    }
    public int GetPageTableSize()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetPageTableSize"), @params);
    }
}

public unsafe class RuntimeVirtualTextureComponent : ObjectBase<URuntimeVirtualTextureComponent>
{
    public RuntimeVirtualTextureComponent(IntPtr pointer) : base(pointer) {}
    public void Invalidate(ref FBoxSphereBounds WorldBounds)
    {
        Span<(string name, object value)> @params = [
            ("WorldBounds", WorldBounds)
        ];
        ProcessEvent(GetFunction("Invalidate"), @params);
    }
}

public unsafe class RuntimeVirtualTextureVolume : ObjectBase<ARuntimeVirtualTextureVolume>
{
    public RuntimeVirtualTextureVolume(IntPtr pointer) : base(pointer) {}
}

public unsafe class RVOAvoidanceInterface : ObjectBase<IRVOAvoidanceInterface>
{
    public RVOAvoidanceInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class Scene : ObjectBase<UScene>
{
    public Scene(IntPtr pointer) : base(pointer) {}}

public unsafe class SceneCaptureComponent2D : ObjectBase<USceneCaptureComponent2D>
{
    public SceneCaptureComponent2D(IntPtr pointer) : base(pointer) {}
    public void RemoveBlendable(TScriptInterface<IBlendableInterface> InBlendableObject)
    {
        Span<(string name, object value)> @params = [
            ("InBlendableObject", InBlendableObject)
        ];
        ProcessEvent(GetFunction("RemoveBlendable"), @params);
    }
    public void CaptureScene()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("CaptureScene"), @params);
    }
    public void AddOrUpdateBlendable(TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight)
    {
        Span<(string name, object value)> @params = [
            ("InBlendableObject", InBlendableObject), 
            ("InWeight", InWeight)
        ];
        ProcessEvent(GetFunction("AddOrUpdateBlendable"), @params);
    }
}

public unsafe class SceneCaptureComponentCube : ObjectBase<USceneCaptureComponentCube>
{
    public SceneCaptureComponentCube(IntPtr pointer) : base(pointer) {}
    public void CaptureScene()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("CaptureScene"), @params);
    }
}

public unsafe class SceneCaptureCube : ObjectBase<ASceneCaptureCube>
{
    public SceneCaptureCube(IntPtr pointer) : base(pointer) {}
    public void OnInterpToggle(bool bEnable)
    {
        Span<(string name, object value)> @params = [
            ("bEnable", bEnable)
        ];
        ProcessEvent(GetFunction("OnInterpToggle"), @params);
    }
}

public unsafe class SCS_Node : ObjectBase<USCS_Node>
{
    public SCS_Node(IntPtr pointer) : base(pointer) {}
}

public unsafe class Selection : ObjectBase<USelection>
{
    public Selection(IntPtr pointer) : base(pointer) {}}

public unsafe class ServerStatReplicator : ObjectBase<AServerStatReplicator>
{
    public ServerStatReplicator(IntPtr pointer) : base(pointer) {}
}

public unsafe class ShadowMapTexture2D : ObjectBase<UShadowMapTexture2D>
{
    public ShadowMapTexture2D(IntPtr pointer) : base(pointer) {}
}

public unsafe class SimpleConstructionScript : ObjectBase<USimpleConstructionScript>
{
    public SimpleConstructionScript(IntPtr pointer) : base(pointer) {}
}

public unsafe class ActorComponent : ObjectBase<UActorComponent>
{
    public ActorComponent(IntPtr pointer) : base(pointer) {}
    public void ToggleActive()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ToggleActive"), @params);
    }
    public void SetTickGroup(ETickingGroup NewTickGroup)
    {
        Span<(string name, object value)> @params = [
            ("NewTickGroup", NewTickGroup)
        ];
        ProcessEvent(GetFunction("SetTickGroup"), @params);
    }
    public void SetTickableWhenPaused(bool bTickableWhenPaused)
    {
        Span<(string name, object value)> @params = [
            ("bTickableWhenPaused", bTickableWhenPaused)
        ];
        ProcessEvent(GetFunction("SetTickableWhenPaused"), @params);
    }
    public void SetIsReplicated(bool ShouldReplicate)
    {
        Span<(string name, object value)> @params = [
            ("ShouldReplicate", ShouldReplicate)
        ];
        ProcessEvent(GetFunction("SetIsReplicated"), @params);
    }
    public void SetComponentTickIntervalAndCooldown(float TickInterval)
    {
        Span<(string name, object value)> @params = [
            ("TickInterval", TickInterval)
        ];
        ProcessEvent(GetFunction("SetComponentTickIntervalAndCooldown"), @params);
    }
    public void SetComponentTickInterval(float TickInterval)
    {
        Span<(string name, object value)> @params = [
            ("TickInterval", TickInterval)
        ];
        ProcessEvent(GetFunction("SetComponentTickInterval"), @params);
    }
    public void SetComponentTickEnabled(bool bEnabled)
    {
        Span<(string name, object value)> @params = [
            ("bEnabled", bEnabled)
        ];
        ProcessEvent(GetFunction("SetComponentTickEnabled"), @params);
    }
    public void SetAutoActivate(bool bNewAutoActivate)
    {
        Span<(string name, object value)> @params = [
            ("bNewAutoActivate", bNewAutoActivate)
        ];
        ProcessEvent(GetFunction("SetAutoActivate"), @params);
    }
    public void SetActive(bool bNewActive, bool bReset)
    {
        Span<(string name, object value)> @params = [
            ("bNewActive", bNewActive), 
            ("bReset", bReset)
        ];
        ProcessEvent(GetFunction("SetActive"), @params);
    }
    public void RemoveTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent)
    {
        Span<(string name, object value)> @params = [
            ("PrerequisiteComponent", (IntPtr)PrerequisiteComponent)
        ];
        ProcessEvent(GetFunction("RemoveTickPrerequisiteComponent"), @params);
    }
    public void RemoveTickPrerequisiteActor(AActor* PrerequisiteActor)
    {
        Span<(string name, object value)> @params = [
            ("PrerequisiteActor", (IntPtr)PrerequisiteActor)
        ];
        ProcessEvent(GetFunction("RemoveTickPrerequisiteActor"), @params);
    }
    public void ReceiveTick(float DeltaSeconds)
    {
        Span<(string name, object value)> @params = [
            ("DeltaSeconds", DeltaSeconds)
        ];
        ProcessEvent(GetFunction("ReceiveTick"), @params);
    }
    public void ReceiveEndPlay(EEndPlayReason EndPlayReason)
    {
        Span<(string name, object value)> @params = [
            ("EndPlayReason", EndPlayReason)
        ];
        ProcessEvent(GetFunction("ReceiveEndPlay"), @params);
    }
    public void ReceiveBeginPlay()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ReceiveBeginPlay"), @params);
    }
    public void OnRep_IsActive()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_IsActive"), @params);
    }
    public void K2_DestroyComponent(UObject* Object)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object)
        ];
        ProcessEvent(GetFunction("K2_DestroyComponent"), @params);
    }
    public bool IsComponentTickEnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsComponentTickEnabled"), @params);
    }
    public bool IsBeingDestroyed()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsBeingDestroyed"), @params);
    }
    public bool IsActive()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsActive"), @params);
    }
    public AActor* GetOwner()
    {
        Span<(string name, object value)> @params = [
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("GetOwner"), @params);
    }
    public float GetComponentTickInterval()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetComponentTickInterval"), @params);
    }
    public void Deactivate()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Deactivate"), @params);
    }
    public bool ComponentHasTag(FName Tag)
    {
        Span<(string name, object value)> @params = [
            ("Tag", Tag)
        ];
        return ProcessEvent<bool>(GetFunction("ComponentHasTag"), @params);
    }
    public void AddTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent)
    {
        Span<(string name, object value)> @params = [
            ("PrerequisiteComponent", (IntPtr)PrerequisiteComponent)
        ];
        ProcessEvent(GetFunction("AddTickPrerequisiteComponent"), @params);
    }
    public void AddTickPrerequisiteActor(AActor* PrerequisiteActor)
    {
        Span<(string name, object value)> @params = [
            ("PrerequisiteActor", (IntPtr)PrerequisiteActor)
        ];
        ProcessEvent(GetFunction("AddTickPrerequisiteActor"), @params);
    }
    public void Activate(bool bReset)
    {
        Span<(string name, object value)> @params = [
            ("bReset", bReset)
        ];
        ProcessEvent(GetFunction("Activate"), @params);
    }
}

public unsafe class SkeletalMesh : ObjectBase<USkeletalMesh>
{
    public SkeletalMesh(IntPtr pointer) : base(pointer) {}
    public void SetMorphTargets(ref TArray<IntPtr> InMorphTargets)
    {
        Span<(string name, object value)> @params = [
            ("InMorphTargets", InMorphTargets)
        ];
        ProcessEvent(GetFunction("SetMorphTargets"), @params);
    }
    public void SetMeshClothingAssets(ref TArray<IntPtr> InMeshClothingAssets)
    {
        Span<(string name, object value)> @params = [
            ("InMeshClothingAssets", InMeshClothingAssets)
        ];
        ProcessEvent(GetFunction("SetMeshClothingAssets"), @params);
    }
    public void SetMaterials(ref TArray<FSkeletalMaterial> InMaterials)
    {
        Span<(string name, object value)> @params = [
            ("InMaterials", InMaterials)
        ];
        ProcessEvent(GetFunction("SetMaterials"), @params);
    }
    public void SetLODSettings(USkeletalMeshLODSettings* InLODSettings)
    {
        Span<(string name, object value)> @params = [
            ("InLODSettings", (IntPtr)InLODSettings)
        ];
        ProcessEvent(GetFunction("SetLODSettings"), @params);
    }
    public void SetDefaultAnimatingRig(TSoftObjectPtr<UObject> InAnimatingRig)
    {
        Span<(string name, object value)> @params = [
            ("InAnimatingRig", InAnimatingRig)
        ];
        ProcessEvent(GetFunction("SetDefaultAnimatingRig"), @params);
    }
    public int NumSockets()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("NumSockets"), @params);
    }
    public TArray<FString> K2_GetAllMorphTargetNames()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<FString>>(GetFunction("K2_GetAllMorphTargetNames"), @params);
    }
    public bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections)
    {
        Span<(string name, object value)> @params = [
            ("InSectionIndex", InSectionIndex), 
            ("bCheckCorrespondingSections", bCheckCorrespondingSections)
        ];
        return ProcessEvent<bool>(GetFunction("IsSectionUsingCloth"), @params);
    }
    public USkeletalMeshSocket* GetSocketByIndex(int Index)
    {
        Span<(string name, object value)> @params = [
            ("Index", Index)
        ];
        return (USkeletalMeshSocket*)ProcessEvent<IntPtr>(GetFunction("GetSocketByIndex"), @params);
    }
    public USkeleton* GetSkeleton()
    {
        Span<(string name, object value)> @params = [
        ];
        return (USkeleton*)ProcessEvent<IntPtr>(GetFunction("GetSkeleton"), @params);
    }
    public UPhysicsAsset* GetShadowPhysicsAsset()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UPhysicsAsset*)ProcessEvent<IntPtr>(GetFunction("GetShadowPhysicsAsset"), @params);
    }
    public UPhysicsAsset* GetPhysicsAsset()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UPhysicsAsset*)ProcessEvent<IntPtr>(GetFunction("GetPhysicsAsset"), @params);
    }
    public TArray<IntPtr> GetNodeMappingData()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<IntPtr>>(GetFunction("GetNodeMappingData"), @params);
    }
    public UNodeMappingContainer* GetNodeMappingContainer(UBlueprint* SourceAsset)
    {
        Span<(string name, object value)> @params = [
            ("SourceAsset", (IntPtr)SourceAsset)
        ];
        return (UNodeMappingContainer*)ProcessEvent<IntPtr>(GetFunction("GetNodeMappingContainer"), @params);
    }
    public TArray<IntPtr> GetMorphTargets()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<IntPtr>>(GetFunction("GetMorphTargets"), @params);
    }
    public TArray<IntPtr> GetMeshClothingAssets()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<IntPtr>>(GetFunction("GetMeshClothingAssets"), @params);
    }
    public TArray<FSkeletalMaterial> GetMaterials()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<FSkeletalMaterial>>(GetFunction("GetMaterials"), @params);
    }
    public USkeletalMeshLODSettings* GetLODSettings()
    {
        Span<(string name, object value)> @params = [
        ];
        return (USkeletalMeshLODSettings*)ProcessEvent<IntPtr>(GetFunction("GetLODSettings"), @params);
    }
    public FBoxSphereBounds GetImportedBounds()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FBoxSphereBounds>(GetFunction("GetImportedBounds"), @params);
    }
    public TSoftObjectPtr<UObject> GetDefaultAnimatingRig()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TSoftObjectPtr<UObject>>(GetFunction("GetDefaultAnimatingRig"), @params);
    }
    public FBoxSphereBounds GetBounds()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FBoxSphereBounds>(GetFunction("GetBounds"), @params);
    }
    public USkeletalMeshSocket* FindSocketInfo(FName InSocketName, ref FTransform OutTransform, ref int OutBoneIndex, ref int OutIndex)
    {
        Span<(string name, object value)> @params = [
            ("InSocketName", InSocketName), 
            ("OutTransform", OutTransform), 
            ("OutBoneIndex", OutBoneIndex), 
            ("OutIndex", OutIndex)
        ];
        return (USkeletalMeshSocket*)ProcessEvent<IntPtr>(GetFunction("FindSocketInfo"), @params);
    }
    public USkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, ref int OutIndex)
    {
        Span<(string name, object value)> @params = [
            ("InSocketName", InSocketName), 
            ("OutIndex", OutIndex)
        ];
        return (USkeletalMeshSocket*)ProcessEvent<IntPtr>(GetFunction("FindSocketAndIndex"), @params);
    }
    public USkeletalMeshSocket* FindSocket(FName InSocketName)
    {
        Span<(string name, object value)> @params = [
            ("InSocketName", InSocketName)
        ];
        return (USkeletalMeshSocket*)ProcessEvent<IntPtr>(GetFunction("FindSocket"), @params);
    }
}

public unsafe class SkeletalMeshActor : ObjectBase<ASkeletalMeshActor>
{
    public SkeletalMeshActor(IntPtr pointer) : base(pointer) {}
    public void OnRep_ReplicatedPhysAsset()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_ReplicatedPhysAsset"), @params);
    }
    public void OnRep_ReplicatedMesh()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_ReplicatedMesh"), @params);
    }
    public void OnRep_ReplicatedMaterial1()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_ReplicatedMaterial1"), @params);
    }
    public void OnRep_ReplicatedMaterial0()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_ReplicatedMaterial0"), @params);
    }
}

public unsafe class SkeletalMeshEditorData : ObjectBase<USkeletalMeshEditorData>
{
    public SkeletalMeshEditorData(IntPtr pointer) : base(pointer) {}}

public unsafe class SkeletalMeshLODSettings : ObjectBase<USkeletalMeshLODSettings>
{
    public SkeletalMeshLODSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class SkeletalMeshSimplificationSettings : ObjectBase<USkeletalMeshSimplificationSettings>
{
    public SkeletalMeshSimplificationSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class SkeletalMeshSocket : ObjectBase<USkeletalMeshSocket>
{
    public SkeletalMeshSocket(IntPtr pointer) : base(pointer) {}
    public void InitializeSocketFromLocation(USkeletalMeshComponent* SkelComp, FVector WorldLocation, FVector WorldNormal)
    {
        Span<(string name, object value)> @params = [
            ("SkelComp", (IntPtr)SkelComp), 
            ("WorldLocation", WorldLocation), 
            ("WorldNormal", WorldNormal)
        ];
        ProcessEvent(GetFunction("InitializeSocketFromLocation"), @params);
    }
    public FVector GetSocketLocation(USkeletalMeshComponent* SkelComp)
    {
        Span<(string name, object value)> @params = [
            ("SkelComp", (IntPtr)SkelComp)
        ];
        return ProcessEvent<FVector>(GetFunction("GetSocketLocation"), @params);
    }
}

public unsafe class SkyAtmosphereComponent : ObjectBase<USkyAtmosphereComponent>
{
    public SkyAtmosphereComponent(IntPtr pointer) : base(pointer) {}
    public void SetSkyLuminanceFactor(FLinearColor NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetSkyLuminanceFactor"), @params);
    }
    public void SetRayleighScatteringScale(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetRayleighScatteringScale"), @params);
    }
    public void SetRayleighScattering(FLinearColor NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetRayleighScattering"), @params);
    }
    public void SetRayleighExponentialDistribution(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetRayleighExponentialDistribution"), @params);
    }
    public void SetOtherAbsorptionScale(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetOtherAbsorptionScale"), @params);
    }
    public void SetOtherAbsorption(FLinearColor NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetOtherAbsorption"), @params);
    }
    public void SetMultiScatteringFactor(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetMultiScatteringFactor"), @params);
    }
    public void SetMieScatteringScale(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetMieScatteringScale"), @params);
    }
    public void SetMieScattering(FLinearColor NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetMieScattering"), @params);
    }
    public void SetMieExponentialDistribution(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetMieExponentialDistribution"), @params);
    }
    public void SetMieAnisotropy(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetMieAnisotropy"), @params);
    }
    public void SetMieAbsorptionScale(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetMieAbsorptionScale"), @params);
    }
    public void SetMieAbsorption(FLinearColor NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetMieAbsorption"), @params);
    }
    public void SetHeightFogContribution(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetHeightFogContribution"), @params);
    }
    public void SetAtmosphereHeight(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetAtmosphereHeight"), @params);
    }
    public void SetAerialPespectiveViewDistanceScale(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetAerialPespectiveViewDistanceScale"), @params);
    }
    public void OverrideAtmosphereLightDirection(int AtmosphereLightIndex, ref FVector LightDirection)
    {
        Span<(string name, object value)> @params = [
            ("AtmosphereLightIndex", AtmosphereLightIndex), 
            ("LightDirection", LightDirection)
        ];
        ProcessEvent(GetFunction("OverrideAtmosphereLightDirection"), @params);
    }
    public FLinearColor GetAtmosphereTransmitanceOnGroundAtPlanetTop(UDirectionalLightComponent* DirectionalLight)
    {
        Span<(string name, object value)> @params = [
            ("DirectionalLight", (IntPtr)DirectionalLight)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("GetAtmosphereTransmitanceOnGroundAtPlanetTop"), @params);
    }
}

public unsafe class SkyAtmosphere : ObjectBase<ASkyAtmosphere>
{
    public SkyAtmosphere(IntPtr pointer) : base(pointer) {}
}

public unsafe class SkyLightComponent : ObjectBase<USkyLightComponent>
{
    public SkyLightComponent(IntPtr pointer) : base(pointer) {}
    public void SetVolumetricScatteringIntensity(float NewIntensity)
    {
        Span<(string name, object value)> @params = [
            ("NewIntensity", NewIntensity)
        ];
        ProcessEvent(GetFunction("SetVolumetricScatteringIntensity"), @params);
    }
    public void SetOcclusionTint(ref FColor InTint)
    {
        Span<(string name, object value)> @params = [
            ("InTint", InTint)
        ];
        ProcessEvent(GetFunction("SetOcclusionTint"), @params);
    }
    public void SetOcclusionExponent(float InOcclusionExponent)
    {
        Span<(string name, object value)> @params = [
            ("InOcclusionExponent", InOcclusionExponent)
        ];
        ProcessEvent(GetFunction("SetOcclusionExponent"), @params);
    }
    public void SetOcclusionContrast(float InOcclusionContrast)
    {
        Span<(string name, object value)> @params = [
            ("InOcclusionContrast", InOcclusionContrast)
        ];
        ProcessEvent(GetFunction("SetOcclusionContrast"), @params);
    }
    public void SetMinOcclusion(float InMinOcclusion)
    {
        Span<(string name, object value)> @params = [
            ("InMinOcclusion", InMinOcclusion)
        ];
        ProcessEvent(GetFunction("SetMinOcclusion"), @params);
    }
    public void SetLowerHemisphereColor(ref FLinearColor InLowerHemisphereColor)
    {
        Span<(string name, object value)> @params = [
            ("InLowerHemisphereColor", InLowerHemisphereColor)
        ];
        ProcessEvent(GetFunction("SetLowerHemisphereColor"), @params);
    }
    public void SetLightColor(FLinearColor NewLightColor)
    {
        Span<(string name, object value)> @params = [
            ("NewLightColor", NewLightColor)
        ];
        ProcessEvent(GetFunction("SetLightColor"), @params);
    }
    public void SetIntensity(float NewIntensity)
    {
        Span<(string name, object value)> @params = [
            ("NewIntensity", NewIntensity)
        ];
        ProcessEvent(GetFunction("SetIntensity"), @params);
    }
    public void SetIndirectLightingIntensity(float NewIntensity)
    {
        Span<(string name, object value)> @params = [
            ("NewIntensity", NewIntensity)
        ];
        ProcessEvent(GetFunction("SetIndirectLightingIntensity"), @params);
    }
    public void SetCubemapBlend(UTextureCube* SourceCubemap, UTextureCube* DestinationCubemap, float InBlendFraction)
    {
        Span<(string name, object value)> @params = [
            ("SourceCubemap", (IntPtr)SourceCubemap), 
            ("DestinationCubemap", (IntPtr)DestinationCubemap), 
            ("InBlendFraction", InBlendFraction)
        ];
        ProcessEvent(GetFunction("SetCubemapBlend"), @params);
    }
    public void SetCubemap(UTextureCube* NewCubemap)
    {
        Span<(string name, object value)> @params = [
            ("NewCubemap", (IntPtr)NewCubemap)
        ];
        ProcessEvent(GetFunction("SetCubemap"), @params);
    }
    public void RecaptureSky()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("RecaptureSky"), @params);
    }
}

public unsafe class SlateBrushAsset : ObjectBase<USlateBrushAsset>
{
    public SlateBrushAsset(IntPtr pointer) : base(pointer) {}
}

public unsafe class SlateTextureAtlasInterface : ObjectBase<ISlateTextureAtlasInterface>
{
    public SlateTextureAtlasInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class SmokeTestCommandlet : ObjectBase<USmokeTestCommandlet>
{
    public SmokeTestCommandlet(IntPtr pointer) : base(pointer) {}}

public unsafe class SoundAttenuation : ObjectBase<USoundAttenuation>
{
    public SoundAttenuation(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundClass : ObjectBase<USoundClass>
{
    public SoundClass(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundConcurrency : ObjectBase<USoundConcurrency>
{
    public SoundConcurrency(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundCue : ObjectBase<USoundCue>
{
    public SoundCue(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundEffectSourcePresetChain : ObjectBase<USoundEffectSourcePresetChain>
{
    public SoundEffectSourcePresetChain(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundGroups : ObjectBase<USoundGroups>
{
    public SoundGroups(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundMix : ObjectBase<USoundMix>
{
    public SoundMix(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNode : ObjectBase<USoundNode>
{
    public SoundNode(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeAssetReferencer : ObjectBase<USoundNodeAssetReferencer>
{
    public SoundNodeAssetReferencer(IntPtr pointer) : base(pointer) {}}

public unsafe class SoundNodeAttenuation : ObjectBase<USoundNodeAttenuation>
{
    public SoundNodeAttenuation(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeBranch : ObjectBase<USoundNodeBranch>
{
    public SoundNodeBranch(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeConcatenator : ObjectBase<USoundNodeConcatenator>
{
    public SoundNodeConcatenator(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeDelay : ObjectBase<USoundNodeDelay>
{
    public SoundNodeDelay(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeDialoguePlayer : ObjectBase<USoundNodeDialoguePlayer>
{
    public SoundNodeDialoguePlayer(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeDistanceCrossFade : ObjectBase<USoundNodeDistanceCrossFade>
{
    public SoundNodeDistanceCrossFade(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeDoppler : ObjectBase<USoundNodeDoppler>
{
    public SoundNodeDoppler(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeEnveloper : ObjectBase<USoundNodeEnveloper>
{
    public SoundNodeEnveloper(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeGroupControl : ObjectBase<USoundNodeGroupControl>
{
    public SoundNodeGroupControl(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeLooping : ObjectBase<USoundNodeLooping>
{
    public SoundNodeLooping(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeMature : ObjectBase<USoundNodeMature>
{
    public SoundNodeMature(IntPtr pointer) : base(pointer) {}}

public unsafe class SoundNodeMixer : ObjectBase<USoundNodeMixer>
{
    public SoundNodeMixer(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeModulator : ObjectBase<USoundNodeModulator>
{
    public SoundNodeModulator(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeModulatorContinuous : ObjectBase<USoundNodeModulatorContinuous>
{
    public SoundNodeModulatorContinuous(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeOscillator : ObjectBase<USoundNodeOscillator>
{
    public SoundNodeOscillator(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeParamCrossFade : ObjectBase<USoundNodeParamCrossFade>
{
    public SoundNodeParamCrossFade(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeQualityLevel : ObjectBase<USoundNodeQualityLevel>
{
    public SoundNodeQualityLevel(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeRandom : ObjectBase<USoundNodeRandom>
{
    public SoundNodeRandom(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeSoundClass : ObjectBase<USoundNodeSoundClass>
{
    public SoundNodeSoundClass(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeSwitch : ObjectBase<USoundNodeSwitch>
{
    public SoundNodeSwitch(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeWaveParam : ObjectBase<USoundNodeWaveParam>
{
    public SoundNodeWaveParam(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundNodeWavePlayer : ObjectBase<USoundNodeWavePlayer>
{
    public SoundNodeWavePlayer(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundSourceBus : ObjectBase<USoundSourceBus>
{
    public SoundSourceBus(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundSubmixBase : ObjectBase<USoundSubmixBase>
{
    public SoundSubmixBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundSubmixWithParentBase : ObjectBase<USoundSubmixWithParentBase>
{
    public SoundSubmixWithParentBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundSubmix : ObjectBase<USoundSubmix>
{
    public SoundSubmix(IntPtr pointer) : base(pointer) {}
    public void StopSpectralAnalysis(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        ProcessEvent(GetFunction("StopSpectralAnalysis"), @params);
    }
    public void StopRecordingOutput(UObject* WorldContextObject, EAudioRecordingExportType ExportType, FString Name, FString Path, USoundWave* ExistingSoundWaveToOverwrite)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("ExportType", ExportType), 
            ("Name", Name), 
            ("Path", Path), 
            ("ExistingSoundWaveToOverwrite", (IntPtr)ExistingSoundWaveToOverwrite)
        ];
        ProcessEvent(GetFunction("StopRecordingOutput"), @params);
    }
    public void StopEnvelopeFollowing(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        ProcessEvent(GetFunction("StopEnvelopeFollowing"), @params);
    }
    public void StartSpectralAnalysis(UObject* WorldContextObject, EFFTSize FFTSize, EFFTPeakInterpolationMethod InterpolationMethod, EFFTWindowType WindowType, float HopSize, EAudioSpectrumType SpectrumType)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("FFTSize", FFTSize), 
            ("InterpolationMethod", InterpolationMethod), 
            ("WindowType", WindowType), 
            ("HopSize", HopSize), 
            ("SpectrumType", SpectrumType)
        ];
        ProcessEvent(GetFunction("StartSpectralAnalysis"), @params);
    }
    public void StartRecordingOutput(UObject* WorldContextObject, float ExpectedDuration)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("ExpectedDuration", ExpectedDuration)
        ];
        ProcessEvent(GetFunction("StartRecordingOutput"), @params);
    }
    public void StartEnvelopeFollowing(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        ProcessEvent(GetFunction("StartEnvelopeFollowing"), @params);
    }
    public void SetSubmixOutputVolume(UObject* WorldContextObject, float InOutputVolume)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("InOutputVolume", InOutputVolume)
        ];
        ProcessEvent(GetFunction("SetSubmixOutputVolume"), @params);
    }
}

public unsafe class SoundfieldSubmix : ObjectBase<USoundfieldSubmix>
{
    public SoundfieldSubmix(IntPtr pointer) : base(pointer) {}
}

public unsafe class EndpointSubmix : ObjectBase<UEndpointSubmix>
{
    public EndpointSubmix(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundfieldEndpointSubmix : ObjectBase<USoundfieldEndpointSubmix>
{
    public SoundfieldEndpointSubmix(IntPtr pointer) : base(pointer) {}
}

public unsafe class SpectatorPawn : ObjectBase<ASpectatorPawn>
{
    public SpectatorPawn(IntPtr pointer) : base(pointer) {}}

public unsafe class SpectatorPawnMovement : ObjectBase<USpectatorPawnMovement>
{
    public SpectatorPawnMovement(IntPtr pointer) : base(pointer) {}
}

public unsafe class SphereReflectionCapture : ObjectBase<ASphereReflectionCapture>
{
    public SphereReflectionCapture(IntPtr pointer) : base(pointer) {}
}

public unsafe class SphereReflectionCaptureComponent : ObjectBase<USphereReflectionCaptureComponent>
{
    public SphereReflectionCaptureComponent(IntPtr pointer) : base(pointer) {}
}

public unsafe class SplineMetadata : ObjectBase<USplineMetadata>
{
    public SplineMetadata(IntPtr pointer) : base(pointer) {}}

public unsafe class SplineMeshActor : ObjectBase<ASplineMeshActor>
{
    public SplineMeshActor(IntPtr pointer) : base(pointer) {}
}

public unsafe class SplineMeshComponent : ObjectBase<USplineMeshComponent>
{
    public SplineMeshComponent(IntPtr pointer) : base(pointer) {}
    public void UpdateMesh()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("UpdateMesh"), @params);
    }
    public void SetStartTangent(FVector StartTangent, bool bUpdateMesh)
    {
        Span<(string name, object value)> @params = [
            ("StartTangent", StartTangent), 
            ("bUpdateMesh", bUpdateMesh)
        ];
        ProcessEvent(GetFunction("SetStartTangent"), @params);
    }
    public void SetStartScale(FVector2D StartScale, bool bUpdateMesh)
    {
        Span<(string name, object value)> @params = [
            ("StartScale", StartScale), 
            ("bUpdateMesh", bUpdateMesh)
        ];
        ProcessEvent(GetFunction("SetStartScale"), @params);
    }
    public void SetStartRoll(float StartRoll, bool bUpdateMesh)
    {
        Span<(string name, object value)> @params = [
            ("StartRoll", StartRoll), 
            ("bUpdateMesh", bUpdateMesh)
        ];
        ProcessEvent(GetFunction("SetStartRoll"), @params);
    }
    public void SetStartPosition(FVector StartPos, bool bUpdateMesh)
    {
        Span<(string name, object value)> @params = [
            ("StartPos", StartPos), 
            ("bUpdateMesh", bUpdateMesh)
        ];
        ProcessEvent(GetFunction("SetStartPosition"), @params);
    }
    public void SetStartOffset(FVector2D StartOffset, bool bUpdateMesh)
    {
        Span<(string name, object value)> @params = [
            ("StartOffset", StartOffset), 
            ("bUpdateMesh", bUpdateMesh)
        ];
        ProcessEvent(GetFunction("SetStartOffset"), @params);
    }
    public void SetStartAndEnd(FVector StartPos, FVector StartTangent, FVector EndPos, FVector EndTangent, bool bUpdateMesh)
    {
        Span<(string name, object value)> @params = [
            ("StartPos", StartPos), 
            ("StartTangent", StartTangent), 
            ("EndPos", EndPos), 
            ("EndTangent", EndTangent), 
            ("bUpdateMesh", bUpdateMesh)
        ];
        ProcessEvent(GetFunction("SetStartAndEnd"), @params);
    }
    public void SetSplineUpDir(ref FVector InSplineUpDir, bool bUpdateMesh)
    {
        Span<(string name, object value)> @params = [
            ("InSplineUpDir", InSplineUpDir), 
            ("bUpdateMesh", bUpdateMesh)
        ];
        ProcessEvent(GetFunction("SetSplineUpDir"), @params);
    }
    public void SetForwardAxis(ESplineMeshAxis InForwardAxis, bool bUpdateMesh)
    {
        Span<(string name, object value)> @params = [
            ("InForwardAxis", InForwardAxis), 
            ("bUpdateMesh", bUpdateMesh)
        ];
        ProcessEvent(GetFunction("SetForwardAxis"), @params);
    }
    public void SetEndTangent(FVector EndTangent, bool bUpdateMesh)
    {
        Span<(string name, object value)> @params = [
            ("EndTangent", EndTangent), 
            ("bUpdateMesh", bUpdateMesh)
        ];
        ProcessEvent(GetFunction("SetEndTangent"), @params);
    }
    public void SetEndScale(FVector2D EndScale, bool bUpdateMesh)
    {
        Span<(string name, object value)> @params = [
            ("EndScale", EndScale), 
            ("bUpdateMesh", bUpdateMesh)
        ];
        ProcessEvent(GetFunction("SetEndScale"), @params);
    }
    public void SetEndRoll(float EndRoll, bool bUpdateMesh)
    {
        Span<(string name, object value)> @params = [
            ("EndRoll", EndRoll), 
            ("bUpdateMesh", bUpdateMesh)
        ];
        ProcessEvent(GetFunction("SetEndRoll"), @params);
    }
    public void SetEndPosition(FVector EndPos, bool bUpdateMesh)
    {
        Span<(string name, object value)> @params = [
            ("EndPos", EndPos), 
            ("bUpdateMesh", bUpdateMesh)
        ];
        ProcessEvent(GetFunction("SetEndPosition"), @params);
    }
    public void SetEndOffset(FVector2D EndOffset, bool bUpdateMesh)
    {
        Span<(string name, object value)> @params = [
            ("EndOffset", EndOffset), 
            ("bUpdateMesh", bUpdateMesh)
        ];
        ProcessEvent(GetFunction("SetEndOffset"), @params);
    }
    public void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh)
    {
        Span<(string name, object value)> @params = [
            ("InBoundaryMin", InBoundaryMin), 
            ("bUpdateMesh", bUpdateMesh)
        ];
        ProcessEvent(GetFunction("SetBoundaryMin"), @params);
    }
    public void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh)
    {
        Span<(string name, object value)> @params = [
            ("InBoundaryMax", InBoundaryMax), 
            ("bUpdateMesh", bUpdateMesh)
        ];
        ProcessEvent(GetFunction("SetBoundaryMax"), @params);
    }
    public FVector GetStartTangent()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetStartTangent"), @params);
    }
    public FVector2D GetStartScale()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector2D>(GetFunction("GetStartScale"), @params);
    }
    public float GetStartRoll()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetStartRoll"), @params);
    }
    public FVector GetStartPosition()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetStartPosition"), @params);
    }
    public FVector2D GetStartOffset()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector2D>(GetFunction("GetStartOffset"), @params);
    }
    public FVector GetSplineUpDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetSplineUpDir"), @params);
    }
    public ESplineMeshAxis GetForwardAxis()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<ESplineMeshAxis>(GetFunction("GetForwardAxis"), @params);
    }
    public FVector GetEndTangent()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetEndTangent"), @params);
    }
    public FVector2D GetEndScale()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector2D>(GetFunction("GetEndScale"), @params);
    }
    public float GetEndRoll()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetEndRoll"), @params);
    }
    public FVector GetEndPosition()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetEndPosition"), @params);
    }
    public FVector2D GetEndOffset()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector2D>(GetFunction("GetEndOffset"), @params);
    }
    public float GetBoundaryMin()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetBoundaryMin"), @params);
    }
    public float GetBoundaryMax()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetBoundaryMax"), @params);
    }
}

public unsafe class SpotLightComponent : ObjectBase<USpotLightComponent>
{
    public SpotLightComponent(IntPtr pointer) : base(pointer) {}
    public void SetOuterConeAngle(float NewOuterConeAngle)
    {
        Span<(string name, object value)> @params = [
            ("NewOuterConeAngle", NewOuterConeAngle)
        ];
        ProcessEvent(GetFunction("SetOuterConeAngle"), @params);
    }
    public void SetInnerConeAngle(float NewInnerConeAngle)
    {
        Span<(string name, object value)> @params = [
            ("NewInnerConeAngle", NewInnerConeAngle)
        ];
        ProcessEvent(GetFunction("SetInnerConeAngle"), @params);
    }
}

public unsafe class SpringArmComponent : ObjectBase<USpringArmComponent>
{
    public SpringArmComponent(IntPtr pointer) : base(pointer) {}
    public bool IsCollisionFixApplied()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsCollisionFixApplied"), @params);
    }
    public FVector GetUnfixedCameraPosition()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetUnfixedCameraPosition"), @params);
    }
    public FRotator GetTargetRotation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FRotator>(GetFunction("GetTargetRotation"), @params);
    }
}

public unsafe class SceneComponent : ObjectBase<USceneComponent>
{
    public SceneComponent(IntPtr pointer) : base(pointer) {}
    public void ToggleVisibility(bool bPropagateToChildren)
    {
        Span<(string name, object value)> @params = [
            ("bPropagateToChildren", bPropagateToChildren)
        ];
        ProcessEvent(GetFunction("ToggleVisibility"), @params);
    }
    public bool SnapTo(USceneComponent* InParent, FName InSocketName)
    {
        Span<(string name, object value)> @params = [
            ("InParent", (IntPtr)InParent), 
            ("InSocketName", InSocketName)
        ];
        return ProcessEvent<bool>(GetFunction("SnapTo"), @params);
    }
    public void SetWorldScale3D(FVector NewScale)
    {
        Span<(string name, object value)> @params = [
            ("NewScale", NewScale)
        ];
        ProcessEvent(GetFunction("SetWorldScale3D"), @params);
    }
    public void SetVisibility(bool bNewVisibility, bool bPropagateToChildren)
    {
        Span<(string name, object value)> @params = [
            ("bNewVisibility", bNewVisibility), 
            ("bPropagateToChildren", bPropagateToChildren)
        ];
        ProcessEvent(GetFunction("SetVisibility"), @params);
    }
    public void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume)
    {
        Span<(string name, object value)> @params = [
            ("bInShouldUpdatePhysicsVolume", bInShouldUpdatePhysicsVolume)
        ];
        ProcessEvent(GetFunction("SetShouldUpdatePhysicsVolume"), @params);
    }
    public void SetRelativeScale3D(FVector NewScale3D)
    {
        Span<(string name, object value)> @params = [
            ("NewScale3D", NewScale3D)
        ];
        ProcessEvent(GetFunction("SetRelativeScale3D"), @params);
    }
    public void SetMobility(EComponentMobility NewMobility)
    {
        Span<(string name, object value)> @params = [
            ("NewMobility", NewMobility)
        ];
        ProcessEvent(GetFunction("SetMobility"), @params);
    }
    public void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren)
    {
        Span<(string name, object value)> @params = [
            ("NewHidden", NewHidden), 
            ("bPropagateToChildren", bPropagateToChildren)
        ];
        ProcessEvent(GetFunction("SetHiddenInGame"), @params);
    }
    public void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale)
    {
        Span<(string name, object value)> @params = [
            ("bNewAbsoluteLocation", bNewAbsoluteLocation), 
            ("bNewAbsoluteRotation", bNewAbsoluteRotation), 
            ("bNewAbsoluteScale", bNewAbsoluteScale)
        ];
        ProcessEvent(GetFunction("SetAbsolute"), @params);
    }
    public void ResetRelativeTransform()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ResetRelativeTransform"), @params);
    }
    public void OnRep_Visibility(bool OldValue)
    {
        Span<(string name, object value)> @params = [
            ("OldValue", OldValue)
        ];
        ProcessEvent(GetFunction("OnRep_Visibility"), @params);
    }
    public void OnRep_Transform()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_Transform"), @params);
    }
    public void OnRep_AttachSocketName()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_AttachSocketName"), @params);
    }
    public void OnRep_AttachParent()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_AttachParent"), @params);
    }
    public void OnRep_AttachChildren()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_AttachChildren"), @params);
    }
    public void K2_SetWorldTransform(ref FTransform NewTransform, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("NewTransform", NewTransform), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_SetWorldTransform"), @params);
    }
    public void K2_SetWorldRotation(FRotator NewRotation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("NewRotation", NewRotation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_SetWorldRotation"), @params);
    }
    public void K2_SetWorldLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("NewLocation", NewLocation), 
            ("NewRotation", NewRotation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_SetWorldLocationAndRotation"), @params);
    }
    public void K2_SetWorldLocation(FVector NewLocation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("NewLocation", NewLocation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_SetWorldLocation"), @params);
    }
    public void K2_SetRelativeTransform(ref FTransform NewTransform, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("NewTransform", NewTransform), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_SetRelativeTransform"), @params);
    }
    public void K2_SetRelativeRotation(FRotator NewRotation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("NewRotation", NewRotation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_SetRelativeRotation"), @params);
    }
    public void K2_SetRelativeLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("NewLocation", NewLocation), 
            ("NewRotation", NewRotation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_SetRelativeLocationAndRotation"), @params);
    }
    public void K2_SetRelativeLocation(FVector NewLocation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("NewLocation", NewLocation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_SetRelativeLocation"), @params);
    }
    public FTransform K2_GetComponentToWorld()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FTransform>(GetFunction("K2_GetComponentToWorld"), @params);
    }
    public FVector K2_GetComponentScale()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("K2_GetComponentScale"), @params);
    }
    public FRotator K2_GetComponentRotation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FRotator>(GetFunction("K2_GetComponentRotation"), @params);
    }
    public FVector K2_GetComponentLocation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("K2_GetComponentLocation"), @params);
    }
    public void K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify)
    {
        Span<(string name, object value)> @params = [
            ("LocationRule", LocationRule), 
            ("RotationRule", RotationRule), 
            ("ScaleRule", ScaleRule), 
            ("bCallModify", bCallModify)
        ];
        ProcessEvent(GetFunction("K2_DetachFromComponent"), @params);
    }
    public bool K2_AttachToComponent(USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies)
    {
        Span<(string name, object value)> @params = [
            ("Parent", (IntPtr)Parent), 
            ("SocketName", SocketName), 
            ("LocationRule", LocationRule), 
            ("RotationRule", RotationRule), 
            ("ScaleRule", ScaleRule), 
            ("bWeldSimulatedBodies", bWeldSimulatedBodies)
        ];
        return ProcessEvent<bool>(GetFunction("K2_AttachToComponent"), @params);
    }
    public bool K2_AttachTo(USceneComponent* InParent, FName InSocketName, EAttachLocation AttachType, bool bWeldSimulatedBodies)
    {
        Span<(string name, object value)> @params = [
            ("InParent", (IntPtr)InParent), 
            ("InSocketName", InSocketName), 
            ("AttachType", AttachType), 
            ("bWeldSimulatedBodies", bWeldSimulatedBodies)
        ];
        return ProcessEvent<bool>(GetFunction("K2_AttachTo"), @params);
    }
    public void K2_AddWorldTransformKeepScale(ref FTransform DeltaTransform, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("DeltaTransform", DeltaTransform), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_AddWorldTransformKeepScale"), @params);
    }
    public void K2_AddWorldTransform(ref FTransform DeltaTransform, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("DeltaTransform", DeltaTransform), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_AddWorldTransform"), @params);
    }
    public void K2_AddWorldRotation(FRotator DeltaRotation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("DeltaRotation", DeltaRotation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_AddWorldRotation"), @params);
    }
    public void K2_AddWorldOffset(FVector DeltaLocation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("DeltaLocation", DeltaLocation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_AddWorldOffset"), @params);
    }
    public void K2_AddRelativeRotation(FRotator DeltaRotation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("DeltaRotation", DeltaRotation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_AddRelativeRotation"), @params);
    }
    public void K2_AddRelativeLocation(FVector DeltaLocation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("DeltaLocation", DeltaLocation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_AddRelativeLocation"), @params);
    }
    public void K2_AddLocalTransform(ref FTransform DeltaTransform, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("DeltaTransform", DeltaTransform), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_AddLocalTransform"), @params);
    }
    public void K2_AddLocalRotation(FRotator DeltaRotation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("DeltaRotation", DeltaRotation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_AddLocalRotation"), @params);
    }
    public void K2_AddLocalOffset(FVector DeltaLocation, bool bSweep, ref FHitResult SweepHitResult, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("DeltaLocation", DeltaLocation), 
            ("bSweep", bSweep), 
            ("SweepHitResult", SweepHitResult), 
            ("bTeleport", bTeleport)
        ];
        ProcessEvent(GetFunction("K2_AddLocalOffset"), @params);
    }
    public bool IsVisible()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsVisible"), @params);
    }
    public bool IsSimulatingPhysics(FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName)
        ];
        return ProcessEvent<bool>(GetFunction("IsSimulatingPhysics"), @params);
    }
    public bool IsAnySimulatingPhysics()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsAnySimulatingPhysics"), @params);
    }
    public FVector GetUpVector()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetUpVector"), @params);
    }
    public FTransform GetSocketTransform(FName InSocketName, ERelativeTransformSpace TransformSpace)
    {
        Span<(string name, object value)> @params = [
            ("InSocketName", InSocketName), 
            ("TransformSpace", TransformSpace)
        ];
        return ProcessEvent<FTransform>(GetFunction("GetSocketTransform"), @params);
    }
    public FRotator GetSocketRotation(FName InSocketName)
    {
        Span<(string name, object value)> @params = [
            ("InSocketName", InSocketName)
        ];
        return ProcessEvent<FRotator>(GetFunction("GetSocketRotation"), @params);
    }
    public FQuat GetSocketQuaternion(FName InSocketName)
    {
        Span<(string name, object value)> @params = [
            ("InSocketName", InSocketName)
        ];
        return ProcessEvent<FQuat>(GetFunction("GetSocketQuaternion"), @params);
    }
    public FVector GetSocketLocation(FName InSocketName)
    {
        Span<(string name, object value)> @params = [
            ("InSocketName", InSocketName)
        ];
        return ProcessEvent<FVector>(GetFunction("GetSocketLocation"), @params);
    }
    public bool GetShouldUpdatePhysicsVolume()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("GetShouldUpdatePhysicsVolume"), @params);
    }
    public FVector GetRightVector()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetRightVector"), @params);
    }
    public FTransform GetRelativeTransform()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FTransform>(GetFunction("GetRelativeTransform"), @params);
    }
    public APhysicsVolume* GetPhysicsVolume()
    {
        Span<(string name, object value)> @params = [
        ];
        return (APhysicsVolume*)ProcessEvent<IntPtr>(GetFunction("GetPhysicsVolume"), @params);
    }
    public void GetParentComponents(ref TArray<IntPtr> Parents)
    {
        Span<(string name, object value)> @params = [
            ("Parents", Parents)
        ];
        ProcessEvent(GetFunction("GetParentComponents"), @params);
    }
    public int GetNumChildrenComponents()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetNumChildrenComponents"), @params);
    }
    public FVector GetForwardVector()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetForwardVector"), @params);
    }
    public FVector GetComponentVelocity()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetComponentVelocity"), @params);
    }
    public void GetChildrenComponents(bool bIncludeAllDescendants, ref TArray<IntPtr> Children)
    {
        Span<(string name, object value)> @params = [
            ("bIncludeAllDescendants", bIncludeAllDescendants), 
            ("Children", Children)
        ];
        ProcessEvent(GetFunction("GetChildrenComponents"), @params);
    }
    public USceneComponent* GetChildComponent(int ChildIndex)
    {
        Span<(string name, object value)> @params = [
            ("ChildIndex", ChildIndex)
        ];
        return (USceneComponent*)ProcessEvent<IntPtr>(GetFunction("GetChildComponent"), @params);
    }
    public FName GetAttachSocketName()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FName>(GetFunction("GetAttachSocketName"), @params);
    }
    public USceneComponent* GetAttachParent()
    {
        Span<(string name, object value)> @params = [
        ];
        return (USceneComponent*)ProcessEvent<IntPtr>(GetFunction("GetAttachParent"), @params);
    }
    public TArray<FName> GetAllSocketNames()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<FName>>(GetFunction("GetAllSocketNames"), @params);
    }
    public bool DoesSocketExist(FName InSocketName)
    {
        Span<(string name, object value)> @params = [
            ("InSocketName", InSocketName)
        ];
        return ProcessEvent<bool>(GetFunction("DoesSocketExist"), @params);
    }
    public void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify)
    {
        Span<(string name, object value)> @params = [
            ("bMaintainWorldPosition", bMaintainWorldPosition), 
            ("bCallModify", bCallModify)
        ];
        ProcessEvent(GetFunction("DetachFromParent"), @params);
    }
}

public unsafe class StaticMesh : ObjectBase<UStaticMesh>
{
    public StaticMesh(IntPtr pointer) : base(pointer) {}
    public void SetStaticMaterials(ref TArray<FStaticMaterial> InStaticMaterials)
    {
        Span<(string name, object value)> @params = [
            ("InStaticMaterials", InStaticMaterials)
        ];
        ProcessEvent(GetFunction("SetStaticMaterials"), @params);
    }
    public void RemoveSocket(UStaticMeshSocket* Socket)
    {
        Span<(string name, object value)> @params = [
            ("Socket", (IntPtr)Socket)
        ];
        ProcessEvent(GetFunction("RemoveSocket"), @params);
    }
    public TArray<FStaticMaterial> GetStaticMaterials()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<FStaticMaterial>>(GetFunction("GetStaticMaterials"), @params);
    }
    public int GetNumSections(int InLOD)
    {
        Span<(string name, object value)> @params = [
            ("InLOD", InLOD)
        ];
        return ProcessEvent<int>(GetFunction("GetNumSections"), @params);
    }
    public int GetNumLODs()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetNumLODs"), @params);
    }
    public void GetMinimumLODForPlatforms(ref TMap<FName, int> PlatformMinimumLODs)
    {
        Span<(string name, object value)> @params = [
            ("PlatformMinimumLODs", PlatformMinimumLODs)
        ];
        ProcessEvent(GetFunction("GetMinimumLODForPlatforms"), @params);
    }
    public int GetMinimumLODForPlatform(ref FName PlatformName)
    {
        Span<(string name, object value)> @params = [
            ("PlatformName", PlatformName)
        ];
        return ProcessEvent<int>(GetFunction("GetMinimumLODForPlatform"), @params);
    }
    public int GetMaterialIndex(FName MaterialSlotName)
    {
        Span<(string name, object value)> @params = [
            ("MaterialSlotName", MaterialSlotName)
        ];
        return ProcessEvent<int>(GetFunction("GetMaterialIndex"), @params);
    }
    public UMaterialInterface* GetMaterial(int MaterialIndex)
    {
        Span<(string name, object value)> @params = [
            ("MaterialIndex", MaterialIndex)
        ];
        return (UMaterialInterface*)ProcessEvent<IntPtr>(GetFunction("GetMaterial"), @params);
    }
    public FBoxSphereBounds GetBounds()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FBoxSphereBounds>(GetFunction("GetBounds"), @params);
    }
    public FBox GetBoundingBox()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FBox>(GetFunction("GetBoundingBox"), @params);
    }
    public UStaticMeshSocket* FindSocket(FName InSocketName)
    {
        Span<(string name, object value)> @params = [
            ("InSocketName", InSocketName)
        ];
        return (UStaticMeshSocket*)ProcessEvent<IntPtr>(GetFunction("FindSocket"), @params);
    }
    public UStaticMeshDescription* CreateStaticMeshDescription(UObject* Outer)
    {
        Span<(string name, object value)> @params = [
            ("Outer", (IntPtr)Outer)
        ];
        return (UStaticMeshDescription*)ProcessEvent<IntPtr>(GetFunction("CreateStaticMeshDescription"), @params);
    }
    public void BuildFromStaticMeshDescriptions(ref TArray<IntPtr> StaticMeshDescriptions, bool bBuildSimpleCollision)
    {
        Span<(string name, object value)> @params = [
            ("StaticMeshDescriptions", StaticMeshDescriptions), 
            ("bBuildSimpleCollision", bBuildSimpleCollision)
        ];
        ProcessEvent(GetFunction("BuildFromStaticMeshDescriptions"), @params);
    }
    public void AddSocket(UStaticMeshSocket* Socket)
    {
        Span<(string name, object value)> @params = [
            ("Socket", (IntPtr)Socket)
        ];
        ProcessEvent(GetFunction("AddSocket"), @params);
    }
    public FName AddMaterial(UMaterialInterface* Material)
    {
        Span<(string name, object value)> @params = [
            ("Material", (IntPtr)Material)
        ];
        return ProcessEvent<FName>(GetFunction("AddMaterial"), @params);
    }
}

public unsafe class StaticMeshSocket : ObjectBase<UStaticMeshSocket>
{
    public StaticMeshSocket(IntPtr pointer) : base(pointer) {}
}

public unsafe class StereoLayerShape : ObjectBase<UStereoLayerShape>
{
    public StereoLayerShape(IntPtr pointer) : base(pointer) {}}

public unsafe class StereoLayerShapeQuad : ObjectBase<UStereoLayerShapeQuad>
{
    public StereoLayerShapeQuad(IntPtr pointer) : base(pointer) {}}

public unsafe class StereoLayerShapeCylinder : ObjectBase<UStereoLayerShapeCylinder>
{
    public StereoLayerShapeCylinder(IntPtr pointer) : base(pointer) {}
    public void SetRadius(float InRadius)
    {
        Span<(string name, object value)> @params = [
            ("InRadius", InRadius)
        ];
        ProcessEvent(GetFunction("SetRadius"), @params);
    }
    public void SetOverlayArc(float InOverlayArc)
    {
        Span<(string name, object value)> @params = [
            ("InOverlayArc", InOverlayArc)
        ];
        ProcessEvent(GetFunction("SetOverlayArc"), @params);
    }
    public void SetHeight(int InHeight)
    {
        Span<(string name, object value)> @params = [
            ("InHeight", InHeight)
        ];
        ProcessEvent(GetFunction("SetHeight"), @params);
    }
}

public unsafe class StereoLayerShapeCubemap : ObjectBase<UStereoLayerShapeCubemap>
{
    public StereoLayerShapeCubemap(IntPtr pointer) : base(pointer) {}}

public unsafe class PrimitiveComponent : ObjectBase<UPrimitiveComponent>
{
    public PrimitiveComponent(IntPtr pointer) : base(pointer) {}
    public bool WasRecentlyRendered(float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<bool>(GetFunction("WasRecentlyRendered"), @params);
    }
    public void WakeRigidBody(FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("WakeRigidBody"), @params);
    }
    public void WakeAllRigidBodies()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("WakeAllRigidBodies"), @params);
    }
    public void SetWalkableSlopeOverride(ref FWalkableSlopeOverride NewOverride)
    {
        Span<(string name, object value)> @params = [
            ("NewOverride", NewOverride)
        ];
        ProcessEvent(GetFunction("SetWalkableSlopeOverride"), @params);
    }
    public void SetVisibleInSceneCaptureOnly(bool bValue)
    {
        Span<(string name, object value)> @params = [
            ("bValue", bValue)
        ];
        ProcessEvent(GetFunction("SetVisibleInSceneCaptureOnly"), @params);
    }
    public void SetUseCCD(bool InUseCCD, FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("InUseCCD", InUseCCD), 
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("SetUseCCD"), @params);
    }
    public void SetTranslucentSortPriority(int NewTranslucentSortPriority)
    {
        Span<(string name, object value)> @params = [
            ("NewTranslucentSortPriority", NewTranslucentSortPriority)
        ];
        ProcessEvent(GetFunction("SetTranslucentSortPriority"), @params);
    }
    public void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset)
    {
        Span<(string name, object value)> @params = [
            ("NewTranslucencySortDistanceOffset", NewTranslucencySortDistanceOffset)
        ];
        ProcessEvent(GetFunction("SetTranslucencySortDistanceOffset"), @params);
    }
    public void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights)
    {
        Span<(string name, object value)> @params = [
            ("bNewSingleSampleShadowFromStationaryLights", bNewSingleSampleShadowFromStationaryLights)
        ];
        ProcessEvent(GetFunction("SetSingleSampleShadowFromStationaryLights"), @params);
    }
    public void SetSimulatePhysics(bool bSimulate)
    {
        Span<(string name, object value)> @params = [
            ("bSimulate", bSimulate)
        ];
        ProcessEvent(GetFunction("SetSimulatePhysics"), @params);
    }
    public void SetRenderInMainPass(bool bValue)
    {
        Span<(string name, object value)> @params = [
            ("bValue", bValue)
        ];
        ProcessEvent(GetFunction("SetRenderInMainPass"), @params);
    }
    public void SetRenderCustomDepth(bool bValue)
    {
        Span<(string name, object value)> @params = [
            ("bValue", bValue)
        ];
        ProcessEvent(GetFunction("SetRenderCustomDepth"), @params);
    }
    public void SetReceivesDecals(bool bNewReceivesDecals)
    {
        Span<(string name, object value)> @params = [
            ("bNewReceivesDecals", bNewReceivesDecals)
        ];
        ProcessEvent(GetFunction("SetReceivesDecals"), @params);
    }
    public void SetPhysMaterialOverride(UPhysicalMaterial* NewPhysMaterial)
    {
        Span<(string name, object value)> @params = [
            ("NewPhysMaterial", (IntPtr)NewPhysMaterial)
        ];
        ProcessEvent(GetFunction("SetPhysMaterialOverride"), @params);
    }
    public void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("NewMaxAngVel", NewMaxAngVel), 
            ("bAddToCurrent", bAddToCurrent), 
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("SetPhysicsMaxAngularVelocityInRadians"), @params);
    }
    public void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("NewMaxAngVel", NewMaxAngVel), 
            ("bAddToCurrent", bAddToCurrent), 
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("SetPhysicsMaxAngularVelocityInDegrees"), @params);
    }
    public void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("NewMaxAngVel", NewMaxAngVel), 
            ("bAddToCurrent", bAddToCurrent), 
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("SetPhysicsMaxAngularVelocity"), @params);
    }
    public void SetPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent, FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("NewVel", NewVel), 
            ("bAddToCurrent", bAddToCurrent), 
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("SetPhysicsLinearVelocity"), @params);
    }
    public void SetPhysicsAngularVelocityInRadians(FVector NewAngVel, bool bAddToCurrent, FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("NewAngVel", NewAngVel), 
            ("bAddToCurrent", bAddToCurrent), 
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("SetPhysicsAngularVelocityInRadians"), @params);
    }
    public void SetPhysicsAngularVelocityInDegrees(FVector NewAngVel, bool bAddToCurrent, FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("NewAngVel", NewAngVel), 
            ("bAddToCurrent", bAddToCurrent), 
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("SetPhysicsAngularVelocityInDegrees"), @params);
    }
    public void SetPhysicsAngularVelocity(FVector NewAngVel, bool bAddToCurrent, FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("NewAngVel", NewAngVel), 
            ("bAddToCurrent", bAddToCurrent), 
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("SetPhysicsAngularVelocity"), @params);
    }
    public void SetOwnerNoSee(bool bNewOwnerNoSee)
    {
        Span<(string name, object value)> @params = [
            ("bNewOwnerNoSee", bNewOwnerNoSee)
        ];
        ProcessEvent(GetFunction("SetOwnerNoSee"), @params);
    }
    public void SetOnlyOwnerSee(bool bNewOnlyOwnerSee)
    {
        Span<(string name, object value)> @params = [
            ("bNewOnlyOwnerSee", bNewOnlyOwnerSee)
        ];
        ProcessEvent(GetFunction("SetOnlyOwnerSee"), @params);
    }
    public void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision)
    {
        Span<(string name, object value)> @params = [
            ("bNewNotifyRigidBodyCollision", bNewNotifyRigidBodyCollision)
        ];
        ProcessEvent(GetFunction("SetNotifyRigidBodyCollision"), @params);
    }
    public void SetMaterialByName(FName MaterialSlotName, UMaterialInterface* Material)
    {
        Span<(string name, object value)> @params = [
            ("MaterialSlotName", MaterialSlotName), 
            ("Material", (IntPtr)Material)
        ];
        ProcessEvent(GetFunction("SetMaterialByName"), @params);
    }
    public void SetMaterial(int ElementIndex, UMaterialInterface* Material)
    {
        Span<(string name, object value)> @params = [
            ("ElementIndex", ElementIndex), 
            ("Material", (IntPtr)Material)
        ];
        ProcessEvent(GetFunction("SetMaterial"), @params);
    }
    public void SetMassScale(FName BoneName, float InMassScale)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("InMassScale", InMassScale)
        ];
        ProcessEvent(GetFunction("SetMassScale"), @params);
    }
    public void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("MassInKg", MassInKg), 
            ("bOverrideMass", bOverrideMass)
        ];
        ProcessEvent(GetFunction("SetMassOverrideInKg"), @params);
    }
    public void SetLinearDamping(float InDamping)
    {
        Span<(string name, object value)> @params = [
            ("InDamping", InDamping)
        ];
        ProcessEvent(GetFunction("SetLinearDamping"), @params);
    }
    public void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2)
    {
        Span<(string name, object value)> @params = [
            ("bChannel0", bChannel0), 
            ("bChannel1", bChannel1), 
            ("bChannel2", bChannel2)
        ];
        ProcessEvent(GetFunction("SetLightingChannels"), @params);
    }
    public void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup)
    {
        Span<(string name, object value)> @params = [
            ("bInLightAttachmentsAsGroup", bInLightAttachmentsAsGroup)
        ];
        ProcessEvent(GetFunction("SetLightAttachmentsAsGroup"), @params);
    }
    public void SetHiddenInSceneCapture(bool bValue)
    {
        Span<(string name, object value)> @params = [
            ("bValue", bValue)
        ];
        ProcessEvent(GetFunction("SetHiddenInSceneCapture"), @params);
    }
    public void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents)
    {
        Span<(string name, object value)> @params = [
            ("bInGenerateOverlapEvents", bInGenerateOverlapEvents)
        ];
        ProcessEvent(GetFunction("SetGenerateOverlapEvents"), @params);
    }
    public void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup)
    {
        Span<(string name, object value)> @params = [
            ("bInExcludeFromLightAttachmentGroup", bInExcludeFromLightAttachmentGroup)
        ];
        ProcessEvent(GetFunction("SetExcludeFromLightAttachmentGroup"), @params);
    }
    public void SetEnableGravity(bool bGravityEnabled)
    {
        Span<(string name, object value)> @params = [
            ("bGravityEnabled", bGravityEnabled)
        ];
        ProcessEvent(GetFunction("SetEnableGravity"), @params);
    }
    public void SetDefaultCustomPrimitiveDataVector4(int DataIndex, FVector4 Value)
    {
        Span<(string name, object value)> @params = [
            ("DataIndex", DataIndex), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetDefaultCustomPrimitiveDataVector4"), @params);
    }
    public void SetDefaultCustomPrimitiveDataVector3(int DataIndex, FVector Value)
    {
        Span<(string name, object value)> @params = [
            ("DataIndex", DataIndex), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetDefaultCustomPrimitiveDataVector3"), @params);
    }
    public void SetDefaultCustomPrimitiveDataVector2(int DataIndex, FVector2D Value)
    {
        Span<(string name, object value)> @params = [
            ("DataIndex", DataIndex), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetDefaultCustomPrimitiveDataVector2"), @params);
    }
    public void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value)
    {
        Span<(string name, object value)> @params = [
            ("DataIndex", DataIndex), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetDefaultCustomPrimitiveDataFloat"), @params);
    }
    public void SetCustomPrimitiveDataVector4(int DataIndex, FVector4 Value)
    {
        Span<(string name, object value)> @params = [
            ("DataIndex", DataIndex), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetCustomPrimitiveDataVector4"), @params);
    }
    public void SetCustomPrimitiveDataVector3(int DataIndex, FVector Value)
    {
        Span<(string name, object value)> @params = [
            ("DataIndex", DataIndex), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetCustomPrimitiveDataVector3"), @params);
    }
    public void SetCustomPrimitiveDataVector2(int DataIndex, FVector2D Value)
    {
        Span<(string name, object value)> @params = [
            ("DataIndex", DataIndex), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetCustomPrimitiveDataVector2"), @params);
    }
    public void SetCustomPrimitiveDataFloat(int DataIndex, float Value)
    {
        Span<(string name, object value)> @params = [
            ("DataIndex", DataIndex), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetCustomPrimitiveDataFloat"), @params);
    }
    public void SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit)
    {
        Span<(string name, object value)> @params = [
            ("WriteMaskBit", WriteMaskBit)
        ];
        ProcessEvent(GetFunction("SetCustomDepthStencilWriteMask"), @params);
    }
    public void SetCustomDepthStencilValue(int Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetCustomDepthStencilValue"), @params);
    }
    public void SetCullDistance(float NewCullDistance)
    {
        Span<(string name, object value)> @params = [
            ("NewCullDistance", NewCullDistance)
        ];
        ProcessEvent(GetFunction("SetCullDistance"), @params);
    }
    public void SetConstraintMode(EDOFMode ConstraintMode)
    {
        Span<(string name, object value)> @params = [
            ("ConstraintMode", ConstraintMode)
        ];
        ProcessEvent(GetFunction("SetConstraintMode"), @params);
    }
    public void SetCollisionResponseToChannel(ECollisionChannel Channel, ECollisionResponse NewResponse)
    {
        Span<(string name, object value)> @params = [
            ("Channel", Channel), 
            ("NewResponse", NewResponse)
        ];
        ProcessEvent(GetFunction("SetCollisionResponseToChannel"), @params);
    }
    public void SetCollisionResponseToAllChannels(ECollisionResponse NewResponse)
    {
        Span<(string name, object value)> @params = [
            ("NewResponse", NewResponse)
        ];
        ProcessEvent(GetFunction("SetCollisionResponseToAllChannels"), @params);
    }
    public void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps)
    {
        Span<(string name, object value)> @params = [
            ("InCollisionProfileName", InCollisionProfileName), 
            ("bUpdateOverlaps", bUpdateOverlaps)
        ];
        ProcessEvent(GetFunction("SetCollisionProfileName"), @params);
    }
    public void SetCollisionObjectType(ECollisionChannel Channel)
    {
        Span<(string name, object value)> @params = [
            ("Channel", Channel)
        ];
        ProcessEvent(GetFunction("SetCollisionObjectType"), @params);
    }
    public void SetCollisionEnabled(ECollisionEnabled NewType)
    {
        Span<(string name, object value)> @params = [
            ("NewType", NewType)
        ];
        ProcessEvent(GetFunction("SetCollisionEnabled"), @params);
    }
    public void SetCenterOfMass(FVector CenterOfMassOffset, FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("CenterOfMassOffset", CenterOfMassOffset), 
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("SetCenterOfMass"), @params);
    }
    public void SetCastShadow(bool NewCastShadow)
    {
        Span<(string name, object value)> @params = [
            ("NewCastShadow", NewCastShadow)
        ];
        ProcessEvent(GetFunction("SetCastShadow"), @params);
    }
    public void SetCastInsetShadow(bool bInCastInsetShadow)
    {
        Span<(string name, object value)> @params = [
            ("bInCastInsetShadow", bInCastInsetShadow)
        ];
        ProcessEvent(GetFunction("SetCastInsetShadow"), @params);
    }
    public void SetCastHiddenShadow(bool NewCastHiddenShadow)
    {
        Span<(string name, object value)> @params = [
            ("NewCastHiddenShadow", NewCastHiddenShadow)
        ];
        ProcessEvent(GetFunction("SetCastHiddenShadow"), @params);
    }
    public void SetBoundsScale(float NewBoundsScale)
    {
        Span<(string name, object value)> @params = [
            ("NewBoundsScale", NewBoundsScale)
        ];
        ProcessEvent(GetFunction("SetBoundsScale"), @params);
    }
    public void SetAngularDamping(float InDamping)
    {
        Span<(string name, object value)> @params = [
            ("InDamping", InDamping)
        ];
        ProcessEvent(GetFunction("SetAngularDamping"), @params);
    }
    public void SetAllUseCCD(bool InUseCCD)
    {
        Span<(string name, object value)> @params = [
            ("InUseCCD", InUseCCD)
        ];
        ProcessEvent(GetFunction("SetAllUseCCD"), @params);
    }
    public void SetAllPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent)
    {
        Span<(string name, object value)> @params = [
            ("NewVel", NewVel), 
            ("bAddToCurrent", bAddToCurrent)
        ];
        ProcessEvent(GetFunction("SetAllPhysicsLinearVelocity"), @params);
    }
    public void SetAllPhysicsAngularVelocityInRadians(ref FVector NewAngVel, bool bAddToCurrent)
    {
        Span<(string name, object value)> @params = [
            ("NewAngVel", NewAngVel), 
            ("bAddToCurrent", bAddToCurrent)
        ];
        ProcessEvent(GetFunction("SetAllPhysicsAngularVelocityInRadians"), @params);
    }
    public void SetAllPhysicsAngularVelocityInDegrees(ref FVector NewAngVel, bool bAddToCurrent)
    {
        Span<(string name, object value)> @params = [
            ("NewAngVel", NewAngVel), 
            ("bAddToCurrent", bAddToCurrent)
        ];
        ProcessEvent(GetFunction("SetAllPhysicsAngularVelocityInDegrees"), @params);
    }
    public void SetAllMassScale(float InMassScale)
    {
        Span<(string name, object value)> @params = [
            ("InMassScale", InMassScale)
        ];
        ProcessEvent(GetFunction("SetAllMassScale"), @params);
    }
    public FVector ScaleByMomentOfInertia(FVector InputVector, FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("InputVector", InputVector), 
            ("BoneName", BoneName)
        ];
        return ProcessEvent<FVector>(GetFunction("ScaleByMomentOfInertia"), @params);
    }
    public void PutRigidBodyToSleep(FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("PutRigidBodyToSleep"), @params);
    }
    public bool K2_SphereTraceComponent(FVector TraceStart, FVector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, ref FVector HitLocation, ref FVector HitNormal, ref FName BoneName, ref FHitResult OutHit)
    {
        Span<(string name, object value)> @params = [
            ("TraceStart", TraceStart), 
            ("TraceEnd", TraceEnd), 
            ("SphereRadius", SphereRadius), 
            ("bTraceComplex", bTraceComplex), 
            ("bShowTrace", bShowTrace), 
            ("bPersistentShowTrace", bPersistentShowTrace), 
            ("HitLocation", HitLocation), 
            ("HitNormal", HitNormal), 
            ("BoneName", BoneName), 
            ("OutHit", OutHit)
        ];
        return ProcessEvent<bool>(GetFunction("K2_SphereTraceComponent"), @params);
    }
    public bool K2_SphereOverlapComponent(FVector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, ref FVector HitLocation, ref FVector HitNormal, ref FName BoneName, ref FHitResult OutHit)
    {
        Span<(string name, object value)> @params = [
            ("InSphereCentre", InSphereCentre), 
            ("InSphereRadius", InSphereRadius), 
            ("bTraceComplex", bTraceComplex), 
            ("bShowTrace", bShowTrace), 
            ("bPersistentShowTrace", bPersistentShowTrace), 
            ("HitLocation", HitLocation), 
            ("HitNormal", HitNormal), 
            ("BoneName", BoneName), 
            ("OutHit", OutHit)
        ];
        return ProcessEvent<bool>(GetFunction("K2_SphereOverlapComponent"), @params);
    }
    public bool K2_LineTraceComponent(FVector TraceStart, FVector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, ref FVector HitLocation, ref FVector HitNormal, ref FName BoneName, ref FHitResult OutHit)
    {
        Span<(string name, object value)> @params = [
            ("TraceStart", TraceStart), 
            ("TraceEnd", TraceEnd), 
            ("bTraceComplex", bTraceComplex), 
            ("bShowTrace", bShowTrace), 
            ("bPersistentShowTrace", bPersistentShowTrace), 
            ("HitLocation", HitLocation), 
            ("HitNormal", HitNormal), 
            ("BoneName", BoneName), 
            ("OutHit", OutHit)
        ];
        return ProcessEvent<bool>(GetFunction("K2_LineTraceComponent"), @params);
    }
    public bool K2_IsQueryCollisionEnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("K2_IsQueryCollisionEnabled"), @params);
    }
    public bool K2_IsPhysicsCollisionEnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("K2_IsPhysicsCollisionEnabled"), @params);
    }
    public bool K2_IsCollisionEnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("K2_IsCollisionEnabled"), @params);
    }
    public bool K2_BoxOverlapComponent(FVector InBoxCentre, FBox InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, ref FVector HitLocation, ref FVector HitNormal, ref FName BoneName, ref FHitResult OutHit)
    {
        Span<(string name, object value)> @params = [
            ("InBoxCentre", InBoxCentre), 
            ("InBox", InBox), 
            ("bTraceComplex", bTraceComplex), 
            ("bShowTrace", bShowTrace), 
            ("bPersistentShowTrace", bPersistentShowTrace), 
            ("HitLocation", HitLocation), 
            ("HitNormal", HitNormal), 
            ("BoneName", BoneName), 
            ("OutHit", OutHit)
        ];
        return ProcessEvent<bool>(GetFunction("K2_BoxOverlapComponent"), @params);
    }
    public bool IsOverlappingComponent(UPrimitiveComponent* OtherComp)
    {
        Span<(string name, object value)> @params = [
            ("OtherComp", (IntPtr)OtherComp)
        ];
        return ProcessEvent<bool>(GetFunction("IsOverlappingComponent"), @params);
    }
    public bool IsOverlappingActor(AActor* Other)
    {
        Span<(string name, object value)> @params = [
            ("Other", (IntPtr)Other)
        ];
        return ProcessEvent<bool>(GetFunction("IsOverlappingActor"), @params);
    }
    public bool IsGravityEnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsGravityEnabled"), @params);
    }
    public bool IsAnyRigidBodyAwake()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsAnyRigidBodyAwake"), @params);
    }
    public void IgnoreComponentWhenMoving(UPrimitiveComponent* Component, bool bShouldIgnore)
    {
        Span<(string name, object value)> @params = [
            ("Component", (IntPtr)Component), 
            ("bShouldIgnore", bShouldIgnore)
        ];
        ProcessEvent(GetFunction("IgnoreComponentWhenMoving"), @params);
    }
    public void IgnoreActorWhenMoving(AActor* Actor, bool bShouldIgnore)
    {
        Span<(string name, object value)> @params = [
            ("Actor", (IntPtr)Actor), 
            ("bShouldIgnore", bShouldIgnore)
        ];
        ProcessEvent(GetFunction("IgnoreActorWhenMoving"), @params);
    }
    public FWalkableSlopeOverride GetWalkableSlopeOverride()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FWalkableSlopeOverride>(GetFunction("GetWalkableSlopeOverride"), @params);
    }
    public FVector GetPhysicsLinearVelocityAtPoint(FVector Point, FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("Point", Point), 
            ("BoneName", BoneName)
        ];
        return ProcessEvent<FVector>(GetFunction("GetPhysicsLinearVelocityAtPoint"), @params);
    }
    public FVector GetPhysicsLinearVelocity(FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName)
        ];
        return ProcessEvent<FVector>(GetFunction("GetPhysicsLinearVelocity"), @params);
    }
    public FVector GetPhysicsAngularVelocityInRadians(FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName)
        ];
        return ProcessEvent<FVector>(GetFunction("GetPhysicsAngularVelocityInRadians"), @params);
    }
    public FVector GetPhysicsAngularVelocityInDegrees(FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName)
        ];
        return ProcessEvent<FVector>(GetFunction("GetPhysicsAngularVelocityInDegrees"), @params);
    }
    public FVector GetPhysicsAngularVelocity(FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName)
        ];
        return ProcessEvent<FVector>(GetFunction("GetPhysicsAngularVelocity"), @params);
    }
    public void GetOverlappingComponents(ref TArray<IntPtr> OutOverlappingComponents)
    {
        Span<(string name, object value)> @params = [
            ("OutOverlappingComponents", OutOverlappingComponents)
        ];
        ProcessEvent(GetFunction("GetOverlappingComponents"), @params);
    }
    public void GetOverlappingActors(ref TArray<IntPtr> OverlappingActors, TSubclassOf<AActor> ClassFilter)
    {
        Span<(string name, object value)> @params = [
            ("OverlappingActors", OverlappingActors), 
            ("ClassFilter", ClassFilter)
        ];
        ProcessEvent(GetFunction("GetOverlappingActors"), @params);
    }
    public int GetNumMaterials()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetNumMaterials"), @params);
    }
    public UMaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, ref int SectionIndex)
    {
        Span<(string name, object value)> @params = [
            ("FaceIndex", FaceIndex), 
            ("SectionIndex", SectionIndex)
        ];
        return (UMaterialInterface*)ProcessEvent<IntPtr>(GetFunction("GetMaterialFromCollisionFaceIndex"), @params);
    }
    public UMaterialInterface* GetMaterial(int ElementIndex)
    {
        Span<(string name, object value)> @params = [
            ("ElementIndex", ElementIndex)
        ];
        return (UMaterialInterface*)ProcessEvent<IntPtr>(GetFunction("GetMaterial"), @params);
    }
    public float GetMassScale(FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName)
        ];
        return ProcessEvent<float>(GetFunction("GetMassScale"), @params);
    }
    public float GetMass()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetMass"), @params);
    }
    public float GetLinearDamping()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetLinearDamping"), @params);
    }
    public FVector GetInertiaTensor(FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName)
        ];
        return ProcessEvent<FVector>(GetFunction("GetInertiaTensor"), @params);
    }
    public bool GetGenerateOverlapEvents()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("GetGenerateOverlapEvents"), @params);
    }
    public ECollisionResponse GetCollisionResponseToChannel(ECollisionChannel Channel)
    {
        Span<(string name, object value)> @params = [
            ("Channel", Channel)
        ];
        return ProcessEvent<ECollisionResponse>(GetFunction("GetCollisionResponseToChannel"), @params);
    }
    public FName GetCollisionProfileName()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FName>(GetFunction("GetCollisionProfileName"), @params);
    }
    public ECollisionChannel GetCollisionObjectType()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<ECollisionChannel>(GetFunction("GetCollisionObjectType"), @params);
    }
    public ECollisionEnabled GetCollisionEnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<ECollisionEnabled>(GetFunction("GetCollisionEnabled"), @params);
    }
    public float GetClosestPointOnCollision(ref FVector Point, ref FVector OutPointOnBody, FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("Point", Point), 
            ("OutPointOnBody", OutPointOnBody), 
            ("BoneName", BoneName)
        ];
        return ProcessEvent<float>(GetFunction("GetClosestPointOnCollision"), @params);
    }
    public FVector GetCenterOfMass(FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName)
        ];
        return ProcessEvent<FVector>(GetFunction("GetCenterOfMass"), @params);
    }
    public float GetAngularDamping()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetAngularDamping"), @params);
    }
    public UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, UMaterialInterface* SourceMaterial, FName OptionalName)
    {
        Span<(string name, object value)> @params = [
            ("ElementIndex", ElementIndex), 
            ("SourceMaterial", (IntPtr)SourceMaterial), 
            ("OptionalName", OptionalName)
        ];
        return (UMaterialInstanceDynamic*)ProcessEvent<IntPtr>(GetFunction("CreateDynamicMaterialInstance"), @params);
    }
    public UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, UMaterialInterface* Parent)
    {
        Span<(string name, object value)> @params = [
            ("ElementIndex", ElementIndex), 
            ("Parent", (IntPtr)Parent)
        ];
        return (UMaterialInstanceDynamic*)ProcessEvent<IntPtr>(GetFunction("CreateAndSetMaterialInstanceDynamicFromMaterial"), @params);
    }
    public UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex)
    {
        Span<(string name, object value)> @params = [
            ("ElementIndex", ElementIndex)
        ];
        return (UMaterialInstanceDynamic*)ProcessEvent<IntPtr>(GetFunction("CreateAndSetMaterialInstanceDynamic"), @params);
    }
    public TArray<IntPtr> CopyArrayOfMoveIgnoreComponents()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<IntPtr>>(GetFunction("CopyArrayOfMoveIgnoreComponents"), @params);
    }
    public TArray<IntPtr> CopyArrayOfMoveIgnoreActors()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<IntPtr>>(GetFunction("CopyArrayOfMoveIgnoreActors"), @params);
    }
    public void ClearMoveIgnoreComponents()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClearMoveIgnoreComponents"), @params);
    }
    public void ClearMoveIgnoreActors()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClearMoveIgnoreActors"), @params);
    }
    public bool CanCharacterStepUp(APawn* Pawn)
    {
        Span<(string name, object value)> @params = [
            ("Pawn", (IntPtr)Pawn)
        ];
        return ProcessEvent<bool>(GetFunction("CanCharacterStepUp"), @params);
    }
    public void AddTorqueInRadians(FVector Torque, FName BoneName, bool bAccelChange)
    {
        Span<(string name, object value)> @params = [
            ("Torque", Torque), 
            ("BoneName", BoneName), 
            ("bAccelChange", bAccelChange)
        ];
        ProcessEvent(GetFunction("AddTorqueInRadians"), @params);
    }
    public void AddTorqueInDegrees(FVector Torque, FName BoneName, bool bAccelChange)
    {
        Span<(string name, object value)> @params = [
            ("Torque", Torque), 
            ("BoneName", BoneName), 
            ("bAccelChange", bAccelChange)
        ];
        ProcessEvent(GetFunction("AddTorqueInDegrees"), @params);
    }
    public void AddTorque(FVector Torque, FName BoneName, bool bAccelChange)
    {
        Span<(string name, object value)> @params = [
            ("Torque", Torque), 
            ("BoneName", BoneName), 
            ("bAccelChange", bAccelChange)
        ];
        ProcessEvent(GetFunction("AddTorque"), @params);
    }
    public void AddRadialImpulse(FVector Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff, bool bVelChange)
    {
        Span<(string name, object value)> @params = [
            ("Origin", Origin), 
            ("Radius", Radius), 
            ("Strength", Strength), 
            ("Falloff", Falloff), 
            ("bVelChange", bVelChange)
        ];
        ProcessEvent(GetFunction("AddRadialImpulse"), @params);
    }
    public void AddRadialForce(FVector Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff, bool bAccelChange)
    {
        Span<(string name, object value)> @params = [
            ("Origin", Origin), 
            ("Radius", Radius), 
            ("Strength", Strength), 
            ("Falloff", Falloff), 
            ("bAccelChange", bAccelChange)
        ];
        ProcessEvent(GetFunction("AddRadialForce"), @params);
    }
    public void AddImpulseAtLocation(FVector Impulse, FVector Location, FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("Impulse", Impulse), 
            ("Location", Location), 
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("AddImpulseAtLocation"), @params);
    }
    public void AddImpulse(FVector Impulse, FName BoneName, bool bVelChange)
    {
        Span<(string name, object value)> @params = [
            ("Impulse", Impulse), 
            ("BoneName", BoneName), 
            ("bVelChange", bVelChange)
        ];
        ProcessEvent(GetFunction("AddImpulse"), @params);
    }
    public void AddForceAtLocationLocal(FVector Force, FVector Location, FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("Force", Force), 
            ("Location", Location), 
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("AddForceAtLocationLocal"), @params);
    }
    public void AddForceAtLocation(FVector Force, FVector Location, FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("Force", Force), 
            ("Location", Location), 
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("AddForceAtLocation"), @params);
    }
    public void AddForce(FVector Force, FName BoneName, bool bAccelChange)
    {
        Span<(string name, object value)> @params = [
            ("Force", Force), 
            ("BoneName", BoneName), 
            ("bAccelChange", bAccelChange)
        ];
        ProcessEvent(GetFunction("AddForce"), @params);
    }
    public void AddAngularImpulseInRadians(FVector Impulse, FName BoneName, bool bVelChange)
    {
        Span<(string name, object value)> @params = [
            ("Impulse", Impulse), 
            ("BoneName", BoneName), 
            ("bVelChange", bVelChange)
        ];
        ProcessEvent(GetFunction("AddAngularImpulseInRadians"), @params);
    }
    public void AddAngularImpulseInDegrees(FVector Impulse, FName BoneName, bool bVelChange)
    {
        Span<(string name, object value)> @params = [
            ("Impulse", Impulse), 
            ("BoneName", BoneName), 
            ("bVelChange", bVelChange)
        ];
        ProcessEvent(GetFunction("AddAngularImpulseInDegrees"), @params);
    }
    public void AddAngularImpulse(FVector Impulse, FName BoneName, bool bVelChange)
    {
        Span<(string name, object value)> @params = [
            ("Impulse", Impulse), 
            ("BoneName", BoneName), 
            ("bVelChange", bVelChange)
        ];
        ProcessEvent(GetFunction("AddAngularImpulse"), @params);
    }
}

public unsafe class StereoLayerShapeEquirect : ObjectBase<UStereoLayerShapeEquirect>
{
    public StereoLayerShapeEquirect(IntPtr pointer) : base(pointer) {}
    public void SetEquirectProps(FEquirectProps InScaleBiases)
    {
        Span<(string name, object value)> @params = [
            ("InScaleBiases", InScaleBiases)
        ];
        ProcessEvent(GetFunction("SetEquirectProps"), @params);
    }
}

public unsafe class StereoLayerComponent : ObjectBase<UStereoLayerComponent>
{
    public StereoLayerComponent(IntPtr pointer) : base(pointer) {}
    public void SetUVRect(FBox2D InUVRect)
    {
        Span<(string name, object value)> @params = [
            ("InUVRect", InUVRect)
        ];
        ProcessEvent(GetFunction("SetUVRect"), @params);
    }
    public void SetTexture(UTexture* inTexture)
    {
        Span<(string name, object value)> @params = [
            ("inTexture", (IntPtr)inTexture)
        ];
        ProcessEvent(GetFunction("SetTexture"), @params);
    }
    public void SetQuadSize(FVector2D InQuadSize)
    {
        Span<(string name, object value)> @params = [
            ("InQuadSize", InQuadSize)
        ];
        ProcessEvent(GetFunction("SetQuadSize"), @params);
    }
    public void SetPriority(int InPriority)
    {
        Span<(string name, object value)> @params = [
            ("InPriority", InPriority)
        ];
        ProcessEvent(GetFunction("SetPriority"), @params);
    }
    public void SetLeftTexture(UTexture* inTexture)
    {
        Span<(string name, object value)> @params = [
            ("inTexture", (IntPtr)inTexture)
        ];
        ProcessEvent(GetFunction("SetLeftTexture"), @params);
    }
    public void SetEquirectProps(FEquirectProps InScaleBiases)
    {
        Span<(string name, object value)> @params = [
            ("InScaleBiases", InScaleBiases)
        ];
        ProcessEvent(GetFunction("SetEquirectProps"), @params);
    }
    public void MarkTextureForUpdate()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("MarkTextureForUpdate"), @params);
    }
    public FBox2D GetUVRect()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FBox2D>(GetFunction("GetUVRect"), @params);
    }
    public UTexture* GetTexture()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UTexture*)ProcessEvent<IntPtr>(GetFunction("GetTexture"), @params);
    }
    public FVector2D GetQuadSize()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector2D>(GetFunction("GetQuadSize"), @params);
    }
    public int GetPriority()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetPriority"), @params);
    }
    public UTexture* GetLeftTexture()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UTexture*)ProcessEvent<IntPtr>(GetFunction("GetLeftTexture"), @params);
    }
}

public unsafe class StereoLayerFunctionLibrary : ObjectBase<UStereoLayerFunctionLibrary>
{
    public StereoLayerFunctionLibrary(IntPtr pointer) : base(pointer) {}
    public void ShowSplashScreen()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ShowSplashScreen"), @params);
    }
    public void SetSplashScreen(UTexture* Texture, FVector2D Scale, FVector Offset, bool bShowLoadingMovie, bool bShowOnSet)
    {
        Span<(string name, object value)> @params = [
            ("Texture", (IntPtr)Texture), 
            ("Scale", Scale), 
            ("Offset", Offset), 
            ("bShowLoadingMovie", bShowLoadingMovie), 
            ("bShowOnSet", bShowOnSet)
        ];
        ProcessEvent(GetFunction("SetSplashScreen"), @params);
    }
    public void HideSplashScreen()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("HideSplashScreen"), @params);
    }
    public void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled)
    {
        Span<(string name, object value)> @params = [
            ("InAutoShowEnabled", InAutoShowEnabled)
        ];
        ProcessEvent(GetFunction("EnableAutoLoadingSplashScreen"), @params);
    }
}

public unsafe class StringTable : ObjectBase<UStringTable>
{
    public StringTable(IntPtr pointer) : base(pointer) {}}

public unsafe class SubsurfaceProfile : ObjectBase<USubsurfaceProfile>
{
    public SubsurfaceProfile(IntPtr pointer) : base(pointer) {}
}

public unsafe class SubsystemBlueprintLibrary : ObjectBase<USubsystemBlueprintLibrary>
{
    public SubsystemBlueprintLibrary(IntPtr pointer) : base(pointer) {}
    public UWorldSubsystem* GetWorldSubsystem(UObject* ContextObject, TSubclassOf<UWorldSubsystem> Class)
    {
        Span<(string name, object value)> @params = [
            ("ContextObject", (IntPtr)ContextObject), 
            ("Class", Class)
        ];
        return (UWorldSubsystem*)ProcessEvent<IntPtr>(GetFunction("GetWorldSubsystem"), @params);
    }
    public ULocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(APlayerController* PlayerController, TSubclassOf<ULocalPlayerSubsystem> Class)
    {
        Span<(string name, object value)> @params = [
            ("PlayerController", (IntPtr)PlayerController), 
            ("Class", Class)
        ];
        return (ULocalPlayerSubsystem*)ProcessEvent<IntPtr>(GetFunction("GetLocalPlayerSubSystemFromPlayerController"), @params);
    }
    public ULocalPlayerSubsystem* GetLocalPlayerSubsystem(UObject* ContextObject, TSubclassOf<ULocalPlayerSubsystem> Class)
    {
        Span<(string name, object value)> @params = [
            ("ContextObject", (IntPtr)ContextObject), 
            ("Class", Class)
        ];
        return (ULocalPlayerSubsystem*)ProcessEvent<IntPtr>(GetFunction("GetLocalPlayerSubsystem"), @params);
    }
    public UGameInstanceSubsystem* GetGameInstanceSubsystem(UObject* ContextObject, TSubclassOf<UGameInstanceSubsystem> Class)
    {
        Span<(string name, object value)> @params = [
            ("ContextObject", (IntPtr)ContextObject), 
            ("Class", Class)
        ];
        return (UGameInstanceSubsystem*)ProcessEvent<IntPtr>(GetFunction("GetGameInstanceSubsystem"), @params);
    }
    public UEngineSubsystem* GetEngineSubsystem(TSubclassOf<UEngineSubsystem> Class)
    {
        Span<(string name, object value)> @params = [
            ("Class", Class)
        ];
        return (UEngineSubsystem*)ProcessEvent<IntPtr>(GetFunction("GetEngineSubsystem"), @params);
    }
}

public unsafe class SubUVAnimation : ObjectBase<USubUVAnimation>
{
    public SubUVAnimation(IntPtr pointer) : base(pointer) {}
}

public unsafe class SystemTimeTimecodeProvider : ObjectBase<USystemTimeTimecodeProvider>
{
    public SystemTimeTimecodeProvider(IntPtr pointer) : base(pointer) {}
}

public unsafe class TextPropertyTestObject : ObjectBase<UTextPropertyTestObject>
{
    public TextPropertyTestObject(IntPtr pointer) : base(pointer) {}
}

public unsafe class TextRenderActor : ObjectBase<ATextRenderActor>
{
    public TextRenderActor(IntPtr pointer) : base(pointer) {}
}

public unsafe class TextRenderComponent : ObjectBase<UTextRenderComponent>
{
    public TextRenderComponent(IntPtr pointer) : base(pointer) {}
    public void SetYScale(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetYScale"), @params);
    }
    public void SetXScale(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetXScale"), @params);
    }
    public void SetWorldSize(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetWorldSize"), @params);
    }
    public void SetVertSpacingAdjust(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetVertSpacingAdjust"), @params);
    }
    public void SetVerticalAlignment(EVerticalTextAligment Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetVerticalAlignment"), @params);
    }
    public void SetTextRenderColor(FColor Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetTextRenderColor"), @params);
    }
    public void SetTextMaterial(UMaterialInterface* Material)
    {
        Span<(string name, object value)> @params = [
            ("Material", (IntPtr)Material)
        ];
        ProcessEvent(GetFunction("SetTextMaterial"), @params);
    }
    public void SetText(FString Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetText"), @params);
    }
    public void SetHorizSpacingAdjust(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetHorizSpacingAdjust"), @params);
    }
    public void SetHorizontalAlignment(EHorizTextAligment Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetHorizontalAlignment"), @params);
    }
    public void SetFont(UFont* Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", (IntPtr)Value)
        ];
        ProcessEvent(GetFunction("SetFont"), @params);
    }
    public void K2_SetText(ref FText Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("K2_SetText"), @params);
    }
    public FVector GetTextWorldSize()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetTextWorldSize"), @params);
    }
    public FVector GetTextLocalSize()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetTextLocalSize"), @params);
    }
}

public unsafe class Texture2DArray : ObjectBase<UTexture2DArray>
{
    public Texture2DArray(IntPtr pointer) : base(pointer) {}
}

public unsafe class Texture2DDynamic : ObjectBase<UTexture2DDynamic>
{
    public Texture2DDynamic(IntPtr pointer) : base(pointer) {}
}

public unsafe class TextureLightProfile : ObjectBase<UTextureLightProfile>
{
    public TextureLightProfile(IntPtr pointer) : base(pointer) {}
}

public unsafe class TextureMipDataProviderFactory : ObjectBase<UTextureMipDataProviderFactory>
{
    public TextureMipDataProviderFactory(IntPtr pointer) : base(pointer) {}}

public unsafe class TextureRenderTarget2DArray : ObjectBase<UTextureRenderTarget2DArray>
{
    public TextureRenderTarget2DArray(IntPtr pointer) : base(pointer) {}
}

public unsafe class TextureRenderTargetCube : ObjectBase<UTextureRenderTargetCube>
{
    public TextureRenderTargetCube(IntPtr pointer) : base(pointer) {}
}

public unsafe class TextureRenderTargetVolume : ObjectBase<UTextureRenderTargetVolume>
{
    public TextureRenderTargetVolume(IntPtr pointer) : base(pointer) {}
}

public unsafe class ThumbnailInfo : ObjectBase<UThumbnailInfo>
{
    public ThumbnailInfo(IntPtr pointer) : base(pointer) {}}

public unsafe class TimelineComponent : ObjectBase<UTimelineComponent>
{
    public TimelineComponent(IntPtr pointer) : base(pointer) {}
    public void Stop()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Stop"), @params);
    }
    public void SetVectorCurve(UCurveVector* NewVectorCurve, FName VectorTrackName)
    {
        Span<(string name, object value)> @params = [
            ("NewVectorCurve", (IntPtr)NewVectorCurve), 
            ("VectorTrackName", VectorTrackName)
        ];
        ProcessEvent(GetFunction("SetVectorCurve"), @params);
    }
    public void SetTimelineLengthMode(ETimelineLengthMode NewLengthMode)
    {
        Span<(string name, object value)> @params = [
            ("NewLengthMode", NewLengthMode)
        ];
        ProcessEvent(GetFunction("SetTimelineLengthMode"), @params);
    }
    public void SetTimelineLength(float NewLength)
    {
        Span<(string name, object value)> @params = [
            ("NewLength", NewLength)
        ];
        ProcessEvent(GetFunction("SetTimelineLength"), @params);
    }
    public void SetPlayRate(float NewRate)
    {
        Span<(string name, object value)> @params = [
            ("NewRate", NewRate)
        ];
        ProcessEvent(GetFunction("SetPlayRate"), @params);
    }
    public void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate)
    {
        Span<(string name, object value)> @params = [
            ("NewPosition", NewPosition), 
            ("bFireEvents", bFireEvents), 
            ("bFireUpdate", bFireUpdate)
        ];
        ProcessEvent(GetFunction("SetPlaybackPosition"), @params);
    }
    public void SetNewTime(float NewTime)
    {
        Span<(string name, object value)> @params = [
            ("NewTime", NewTime)
        ];
        ProcessEvent(GetFunction("SetNewTime"), @params);
    }
    public void SetLooping(bool bNewLooping)
    {
        Span<(string name, object value)> @params = [
            ("bNewLooping", bNewLooping)
        ];
        ProcessEvent(GetFunction("SetLooping"), @params);
    }
    public void SetLinearColorCurve(UCurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName)
    {
        Span<(string name, object value)> @params = [
            ("NewLinearColorCurve", (IntPtr)NewLinearColorCurve), 
            ("LinearColorTrackName", LinearColorTrackName)
        ];
        ProcessEvent(GetFunction("SetLinearColorCurve"), @params);
    }
    public void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation)
    {
        Span<(string name, object value)> @params = [
            ("bNewIgnoreTimeDilation", bNewIgnoreTimeDilation)
        ];
        ProcessEvent(GetFunction("SetIgnoreTimeDilation"), @params);
    }
    public void SetFloatCurve(UCurveFloat* NewFloatCurve, FName FloatTrackName)
    {
        Span<(string name, object value)> @params = [
            ("NewFloatCurve", (IntPtr)NewFloatCurve), 
            ("FloatTrackName", FloatTrackName)
        ];
        ProcessEvent(GetFunction("SetFloatCurve"), @params);
    }
    public void ReverseFromEnd()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ReverseFromEnd"), @params);
    }
    public void Reverse()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Reverse"), @params);
    }
    public void PlayFromStart()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("PlayFromStart"), @params);
    }
    public void Play()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Play"), @params);
    }
    public void OnRep_Timeline()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_Timeline"), @params);
    }
    public bool IsReversing()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsReversing"), @params);
    }
    public bool IsPlaying()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsPlaying"), @params);
    }
    public bool IsLooping()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsLooping"), @params);
    }
    public float GetTimelineLength()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetTimelineLength"), @params);
    }
    public float GetPlayRate()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetPlayRate"), @params);
    }
    public float GetPlaybackPosition()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetPlaybackPosition"), @params);
    }
    public bool GetIgnoreTimeDilation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("GetIgnoreTimeDilation"), @params);
    }
}

public unsafe class TimelineTemplate : ObjectBase<UTimelineTemplate>
{
    public TimelineTemplate(IntPtr pointer) : base(pointer) {}
}

public unsafe class TireType : ObjectBase<UTireType>
{
    public TireType(IntPtr pointer) : base(pointer) {}
}

public unsafe class TouchInterface : ObjectBase<UTouchInterface>
{
    public TouchInterface(IntPtr pointer) : base(pointer) {}
}

public unsafe class TriggerBase : ObjectBase<ATriggerBase>
{
    public TriggerBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class TriggerBox : ObjectBase<ATriggerBox>
{
    public TriggerBox(IntPtr pointer) : base(pointer) {}}

public unsafe class TriggerCapsule : ObjectBase<ATriggerCapsule>
{
    public TriggerCapsule(IntPtr pointer) : base(pointer) {}}

public unsafe class TriggerSphere : ObjectBase<ATriggerSphere>
{
    public TriggerSphere(IntPtr pointer) : base(pointer) {}}

public unsafe class TwitterIntegrationBase : ObjectBase<UTwitterIntegrationBase>
{
    public TwitterIntegrationBase(IntPtr pointer) : base(pointer) {}
    public bool TwitterRequest(FString URL, ref TArray<FString> ParamKeysAndValues, ETwitterRequestMethod RequestMethod, int AccountIndex)
    {
        Span<(string name, object value)> @params = [
            ("URL", URL), 
            ("ParamKeysAndValues", ParamKeysAndValues), 
            ("RequestMethod", RequestMethod), 
            ("AccountIndex", AccountIndex)
        ];
        return ProcessEvent<bool>(GetFunction("TwitterRequest"), @params);
    }
    public bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture)
    {
        Span<(string name, object value)> @params = [
            ("InitialMessage", InitialMessage), 
            ("URL", URL), 
            ("Picture", Picture)
        ];
        return ProcessEvent<bool>(GetFunction("ShowTweetUI"), @params);
    }
    public void Init()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Init"), @params);
    }
    public int GetNumAccounts()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetNumAccounts"), @params);
    }
    public FString GetAccountName(int AccountIndex)
    {
        Span<(string name, object value)> @params = [
            ("AccountIndex", AccountIndex)
        ];
        return ProcessEvent<FString>(GetFunction("GetAccountName"), @params);
    }
    public bool CanShowTweetUI()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("CanShowTweetUI"), @params);
    }
    public bool AuthorizeAccounts()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("AuthorizeAccounts"), @params);
    }
}

public unsafe class UserDefinedEnum : ObjectBase<UUserDefinedEnum>
{
    public UserDefinedEnum(IntPtr pointer) : base(pointer) {}
}

public unsafe class UserDefinedStruct : ObjectBase<UUserDefinedStruct>
{
    public UserDefinedStruct(IntPtr pointer) : base(pointer) {}
}

public unsafe class UserInterfaceSettings : ObjectBase<UUserInterfaceSettings>
{
    public UserInterfaceSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class VectorField : ObjectBase<UVectorField>
{
    public VectorField(IntPtr pointer) : base(pointer) {}
}

public unsafe class VectorFieldAnimated : ObjectBase<UVectorFieldAnimated>
{
    public VectorFieldAnimated(IntPtr pointer) : base(pointer) {}
}

public unsafe class VectorFieldComponent : ObjectBase<UVectorFieldComponent>
{
    public VectorFieldComponent(IntPtr pointer) : base(pointer) {}
    public void SetIntensity(float NewIntensity)
    {
        Span<(string name, object value)> @params = [
            ("NewIntensity", NewIntensity)
        ];
        ProcessEvent(GetFunction("SetIntensity"), @params);
    }
}

public unsafe class VectorFieldStatic : ObjectBase<UVectorFieldStatic>
{
    public VectorFieldStatic(IntPtr pointer) : base(pointer) {}
}

public unsafe class VectorFieldVolume : ObjectBase<AVectorFieldVolume>
{
    public VectorFieldVolume(IntPtr pointer) : base(pointer) {}
}

public unsafe class ViewportStatsSubsystem : ObjectBase<UViewportStatsSubsystem>
{
    public ViewportStatsSubsystem(IntPtr pointer) : base(pointer) {}
    public void RemoveDisplayDelegate(int IndexToRemove)
    {
        Span<(string name, object value)> @params = [
            ("IndexToRemove", IndexToRemove)
        ];
        ProcessEvent(GetFunction("RemoveDisplayDelegate"), @params);
    }
    public void AddTimedDisplay(FText Text, FLinearColor Color, float Duration)
    {
        Span<(string name, object value)> @params = [
            ("Text", Text), 
            ("Color", Color), 
            ("Duration", Duration)
        ];
        ProcessEvent(GetFunction("AddTimedDisplay"), @params);
    }
}

public unsafe class VirtualTexture : ObjectBase<UVirtualTexture>
{
    public VirtualTexture(IntPtr pointer) : base(pointer) {}}

public unsafe class LightMapVirtualTexture : ObjectBase<ULightMapVirtualTexture>
{
    public LightMapVirtualTexture(IntPtr pointer) : base(pointer) {}}

public unsafe class RuntimeVirtualTextureStreamingProxy : ObjectBase<URuntimeVirtualTextureStreamingProxy>
{
    public RuntimeVirtualTextureStreamingProxy(IntPtr pointer) : base(pointer) {}}

public unsafe class VirtualTexture2D : ObjectBase<UVirtualTexture2D>
{
    public VirtualTexture2D(IntPtr pointer) : base(pointer) {}
}

public unsafe class VirtualTextureBuilder : ObjectBase<UVirtualTextureBuilder>
{
    public VirtualTextureBuilder(IntPtr pointer) : base(pointer) {}
}

public unsafe class VirtualTexturePoolConfig : ObjectBase<UVirtualTexturePoolConfig>
{
    public VirtualTexturePoolConfig(IntPtr pointer) : base(pointer) {}
}

public unsafe class VisualLoggerAutomationTests : ObjectBase<UVisualLoggerAutomationTests>
{
    public VisualLoggerAutomationTests(IntPtr pointer) : base(pointer) {}}

public unsafe class VisualLoggerDebugSnapshotInterface : ObjectBase<IVisualLoggerDebugSnapshotInterface>
{
    public VisualLoggerDebugSnapshotInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class VisualLoggerKismetLibrary : ObjectBase<UVisualLoggerKismetLibrary>
{
    public VisualLoggerKismetLibrary(IntPtr pointer) : base(pointer) {}
    public void RedirectVislog(UObject* SourceOwner, UObject* DestinationOwner)
    {
        Span<(string name, object value)> @params = [
            ("SourceOwner", (IntPtr)SourceOwner), 
            ("DestinationOwner", (IntPtr)DestinationOwner)
        ];
        ProcessEvent(GetFunction("RedirectVislog"), @params);
    }
    public void LogText(UObject* WorldContextObject, FString Text, FName LogCategory, bool bAddToMessageLog)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Text", Text), 
            ("LogCategory", LogCategory), 
            ("bAddToMessageLog", bAddToMessageLog)
        ];
        ProcessEvent(GetFunction("LogText"), @params);
    }
    public void LogSegment(UObject* WorldContextObject, FVector SegmentStart, FVector SegmentEnd, FString Text, FLinearColor ObjectColor, float Thickness, FName CategoryName, bool bAddToMessageLog)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("SegmentStart", SegmentStart), 
            ("SegmentEnd", SegmentEnd), 
            ("Text", Text), 
            ("ObjectColor", ObjectColor), 
            ("Thickness", Thickness), 
            ("CategoryName", CategoryName), 
            ("bAddToMessageLog", bAddToMessageLog)
        ];
        ProcessEvent(GetFunction("LogSegment"), @params);
    }
    public void LogLocation(UObject* WorldContextObject, FVector Location, FString Text, FLinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Location", Location), 
            ("Text", Text), 
            ("ObjectColor", ObjectColor), 
            ("Radius", Radius), 
            ("LogCategory", LogCategory), 
            ("bAddToMessageLog", bAddToMessageLog)
        ];
        ProcessEvent(GetFunction("LogLocation"), @params);
    }
    public void LogBox(UObject* WorldContextObject, FBox BoxShape, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("BoxShape", BoxShape), 
            ("Text", Text), 
            ("ObjectColor", ObjectColor), 
            ("LogCategory", LogCategory), 
            ("bAddToMessageLog", bAddToMessageLog)
        ];
        ProcessEvent(GetFunction("LogBox"), @params);
    }
    public void EnableRecording(bool bEnabled)
    {
        Span<(string name, object value)> @params = [
            ("bEnabled", bEnabled)
        ];
        ProcessEvent(GetFunction("EnableRecording"), @params);
    }
}

public unsafe class VoiceChannel : ObjectBase<UVoiceChannel>
{
    public VoiceChannel(IntPtr pointer) : base(pointer) {}}

public unsafe class VOIPTalker : ObjectBase<UVOIPTalker>
{
    public VOIPTalker(IntPtr pointer) : base(pointer) {}
    public void RegisterWithPlayerState(APlayerState* OwningState)
    {
        Span<(string name, object value)> @params = [
            ("OwningState", (IntPtr)OwningState)
        ];
        ProcessEvent(GetFunction("RegisterWithPlayerState"), @params);
    }
    public float GetVoiceLevel()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetVoiceLevel"), @params);
    }
    public UVOIPTalker* CreateTalkerForPlayer(APlayerState* OwningState)
    {
        Span<(string name, object value)> @params = [
            ("OwningState", (IntPtr)OwningState)
        ];
        return (UVOIPTalker*)ProcessEvent<IntPtr>(GetFunction("CreateTalkerForPlayer"), @params);
    }
    public void BPOnTalkingEnd()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("BPOnTalkingEnd"), @params);
    }
    public void BPOnTalkingBegin(UAudioComponent* AudioComponent)
    {
        Span<(string name, object value)> @params = [
            ("AudioComponent", (IntPtr)AudioComponent)
        ];
        ProcessEvent(GetFunction("BPOnTalkingBegin"), @params);
    }
}

public unsafe class VOIPStatics : ObjectBase<UVOIPStatics>
{
    public VOIPStatics(IntPtr pointer) : base(pointer) {}
    public void SetMicThreshold(float InThreshold)
    {
        Span<(string name, object value)> @params = [
            ("InThreshold", InThreshold)
        ];
        ProcessEvent(GetFunction("SetMicThreshold"), @params);
    }
}

public unsafe class VolumeTexture : ObjectBase<UVolumeTexture>
{
    public VolumeTexture(IntPtr pointer) : base(pointer) {}}

public unsafe class VolumetricCloudComponent : ObjectBase<UVolumetricCloudComponent>
{
    public VolumetricCloudComponent(IntPtr pointer) : base(pointer) {}
    public void SetViewSampleCountScale(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetViewSampleCountScale"), @params);
    }
    public void SetTracingStartMaxDistance(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetTracingStartMaxDistance"), @params);
    }
    public void SetTracingMaxDistance(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetTracingMaxDistance"), @params);
    }
    public void SetStopTracingTransmittanceThreshold(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetStopTracingTransmittanceThreshold"), @params);
    }
    public void SetSkyLightCloudBottomOcclusion(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetSkyLightCloudBottomOcclusion"), @params);
    }
    public void SetShadowViewSampleCountScale(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetShadowViewSampleCountScale"), @params);
    }
    public void SetShadowTracingDistance(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetShadowTracingDistance"), @params);
    }
    public void SetShadowReflectionSampleCountScale(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetShadowReflectionSampleCountScale"), @params);
    }
    public void SetReflectionSampleCountScale(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetReflectionSampleCountScale"), @params);
    }
    public void SetPlanetRadius(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetPlanetRadius"), @params);
    }
    public void SetMaterial(UMaterialInterface* NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", (IntPtr)NewValue)
        ];
        ProcessEvent(GetFunction("SetMaterial"), @params);
    }
    public void SetLayerHeight(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetLayerHeight"), @params);
    }
    public void SetLayerBottomAltitude(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetLayerBottomAltitude"), @params);
    }
    public void SetGroundAlbedo(FColor NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetGroundAlbedo"), @params);
    }
    public void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetbUsePerSampleAtmosphericLightTransmittance"), @params);
    }
}

public unsafe class VolumetricCloud : ObjectBase<AVolumetricCloud>
{
    public VolumetricCloud(IntPtr pointer) : base(pointer) {}
}

public unsafe class VolumetricLightmapDensityVolume : ObjectBase<AVolumetricLightmapDensityVolume>
{
    public VolumetricLightmapDensityVolume(IntPtr pointer) : base(pointer) {}
}

public unsafe class WindDirectionalSource : ObjectBase<AWindDirectionalSource>
{
    public WindDirectionalSource(IntPtr pointer) : base(pointer) {}
}

public unsafe class WindDirectionalSourceComponent : ObjectBase<UWindDirectionalSourceComponent>
{
    public WindDirectionalSourceComponent(IntPtr pointer) : base(pointer) {}
    public void SetWindType(EWindSourceType InNewType)
    {
        Span<(string name, object value)> @params = [
            ("InNewType", InNewType)
        ];
        ProcessEvent(GetFunction("SetWindType"), @params);
    }
    public void SetStrength(float InNewStrength)
    {
        Span<(string name, object value)> @params = [
            ("InNewStrength", InNewStrength)
        ];
        ProcessEvent(GetFunction("SetStrength"), @params);
    }
    public void SetSpeed(float InNewSpeed)
    {
        Span<(string name, object value)> @params = [
            ("InNewSpeed", InNewSpeed)
        ];
        ProcessEvent(GetFunction("SetSpeed"), @params);
    }
    public void SetRadius(float InNewRadius)
    {
        Span<(string name, object value)> @params = [
            ("InNewRadius", InNewRadius)
        ];
        ProcessEvent(GetFunction("SetRadius"), @params);
    }
    public void SetMinimumGustAmount(float InNewMinGust)
    {
        Span<(string name, object value)> @params = [
            ("InNewMinGust", InNewMinGust)
        ];
        ProcessEvent(GetFunction("SetMinimumGustAmount"), @params);
    }
    public void SetMaximumGustAmount(float InNewMaxGust)
    {
        Span<(string name, object value)> @params = [
            ("InNewMaxGust", InNewMaxGust)
        ];
        ProcessEvent(GetFunction("SetMaximumGustAmount"), @params);
    }
}

public unsafe class WorldComposition : ObjectBase<UWorldComposition>
{
    public WorldComposition(IntPtr pointer) : base(pointer) {}
}

public unsafe class HierarchicalLODSetup : ObjectBase<UHierarchicalLODSetup>
{
    public HierarchicalLODSetup(IntPtr pointer) : base(pointer) {}
}

public unsafe class WorldSettings : ObjectBase<AWorldSettings>
{
    public WorldSettings(IntPtr pointer) : base(pointer) {}
    public void OnRep_WorldGravityZ()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_WorldGravityZ"), @params);
    }
}

public unsafe class FXSystemComponent : ObjectBase<UFXSystemComponent>
{
    public FXSystemComponent(IntPtr pointer) : base(pointer) {}
    public void SetVectorParameter(FName ParameterName, FVector Param)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName), 
            ("Param", Param)
        ];
        ProcessEvent(GetFunction("SetVectorParameter"), @params);
    }
    public void SetUseAutoManageAttachment(bool bAutoManage)
    {
        Span<(string name, object value)> @params = [
            ("bAutoManage", bAutoManage)
        ];
        ProcessEvent(GetFunction("SetUseAutoManageAttachment"), @params);
    }
    public void SetIntParameter(FName ParameterName, int Param)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName), 
            ("Param", Param)
        ];
        ProcessEvent(GetFunction("SetIntParameter"), @params);
    }
    public void SetFloatParameter(FName ParameterName, float Param)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName), 
            ("Param", Param)
        ];
        ProcessEvent(GetFunction("SetFloatParameter"), @params);
    }
    public void SetEmitterEnable(FName EmitterName, bool bNewEnableState)
    {
        Span<(string name, object value)> @params = [
            ("EmitterName", EmitterName), 
            ("bNewEnableState", bNewEnableState)
        ];
        ProcessEvent(GetFunction("SetEmitterEnable"), @params);
    }
    public void SetColorParameter(FName ParameterName, FLinearColor Param)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName), 
            ("Param", Param)
        ];
        ProcessEvent(GetFunction("SetColorParameter"), @params);
    }
    public void SetBoolParameter(FName ParameterName, bool Param)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName), 
            ("Param", Param)
        ];
        ProcessEvent(GetFunction("SetBoolParameter"), @params);
    }
    public void SetAutoAttachmentParameters(USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule)
    {
        Span<(string name, object value)> @params = [
            ("Parent", (IntPtr)Parent), 
            ("SocketName", SocketName), 
            ("LocationRule", LocationRule), 
            ("RotationRule", RotationRule), 
            ("ScaleRule", ScaleRule)
        ];
        ProcessEvent(GetFunction("SetAutoAttachmentParameters"), @params);
    }
    public void SetActorParameter(FName ParameterName, AActor* Param)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName), 
            ("Param", (IntPtr)Param)
        ];
        ProcessEvent(GetFunction("SetActorParameter"), @params);
    }
    public void ReleaseToPool()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ReleaseToPool"), @params);
    }
    public UFXSystemAsset* GetFXSystemAsset()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UFXSystemAsset*)ProcessEvent<IntPtr>(GetFunction("GetFXSystemAsset"), @params);
    }
}

public unsafe class BlueprintFunctionLibrary : ObjectBase<UBlueprintFunctionLibrary>
{
    public BlueprintFunctionLibrary(IntPtr pointer) : base(pointer) {}}

public unsafe class FXSystemAsset : ObjectBase<UFXSystemAsset>
{
    public FXSystemAsset(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimNotify : ObjectBase<UAnimNotify>
{
    public AnimNotify(IntPtr pointer) : base(pointer) {}
    public bool Received_Notify(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation)
    {
        Span<(string name, object value)> @params = [
            ("MeshComp", (IntPtr)MeshComp), 
            ("Animation", (IntPtr)Animation)
        ];
        return ProcessEvent<bool>(GetFunction("Received_Notify"), @params);
    }
    public FString GetNotifyName()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetNotifyName"), @params);
    }
}

public unsafe class AnimNotifyState : ObjectBase<UAnimNotifyState>
{
    public AnimNotifyState(IntPtr pointer) : base(pointer) {}
    public bool Received_NotifyTick(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, float FrameDeltaTime)
    {
        Span<(string name, object value)> @params = [
            ("MeshComp", (IntPtr)MeshComp), 
            ("Animation", (IntPtr)Animation), 
            ("FrameDeltaTime", FrameDeltaTime)
        ];
        return ProcessEvent<bool>(GetFunction("Received_NotifyTick"), @params);
    }
    public bool Received_NotifyEnd(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation)
    {
        Span<(string name, object value)> @params = [
            ("MeshComp", (IntPtr)MeshComp), 
            ("Animation", (IntPtr)Animation)
        ];
        return ProcessEvent<bool>(GetFunction("Received_NotifyEnd"), @params);
    }
    public bool Received_NotifyBegin(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, float TotalDuration)
    {
        Span<(string name, object value)> @params = [
            ("MeshComp", (IntPtr)MeshComp), 
            ("Animation", (IntPtr)Animation), 
            ("TotalDuration", TotalDuration)
        ];
        return ProcessEvent<bool>(GetFunction("Received_NotifyBegin"), @params);
    }
    public FString GetNotifyName()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetNotifyName"), @params);
    }
}

public unsafe class CameraShakePattern : ObjectBase<UCameraShakePattern>
{
    public CameraShakePattern(IntPtr pointer) : base(pointer) {}}

public unsafe class Player : ObjectBase<UPlayer>
{
    public Player(IntPtr pointer) : base(pointer) {}
}

public unsafe class NetConnection : ObjectBase<UNetConnection>
{
    public NetConnection(IntPtr pointer) : base(pointer) {}
}

public unsafe class NetDriver : ObjectBase<UNetDriver>
{
    public NetDriver(IntPtr pointer) : base(pointer) {}
}

public unsafe class BlueprintAsyncActionBase : ObjectBase<UBlueprintAsyncActionBase>
{
    public BlueprintAsyncActionBase(IntPtr pointer) : base(pointer) {}
    public void Activate()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Activate"), @params);
    }
}

public unsafe class OnlineBlueprintCallProxyBase : ObjectBase<UOnlineBlueprintCallProxyBase>
{
    public OnlineBlueprintCallProxyBase(IntPtr pointer) : base(pointer) {}}

public unsafe class OnlineEngineInterface : ObjectBase<UOnlineEngineInterface>
{
    public OnlineEngineInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class OnlineSession : ObjectBase<UOnlineSession>
{
    public OnlineSession(IntPtr pointer) : base(pointer) {}}

public unsafe class GameInstance : ObjectBase<UGameInstance>
{
    public GameInstance(IntPtr pointer) : base(pointer) {}
    public void ReceiveShutdown()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ReceiveShutdown"), @params);
    }
    public void ReceiveInit()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ReceiveInit"), @params);
    }
    public void HandleTravelError(ETravelFailure FailureType)
    {
        Span<(string name, object value)> @params = [
            ("FailureType", FailureType)
        ];
        ProcessEvent(GetFunction("HandleTravelError"), @params);
    }
    public void HandleNetworkError(ENetworkFailure FailureType, bool bIsServer)
    {
        Span<(string name, object value)> @params = [
            ("FailureType", FailureType), 
            ("bIsServer", bIsServer)
        ];
        ProcessEvent(GetFunction("HandleNetworkError"), @params);
    }
    public void DebugRemovePlayer(int ControllerId)
    {
        Span<(string name, object value)> @params = [
            ("ControllerId", ControllerId)
        ];
        ProcessEvent(GetFunction("DebugRemovePlayer"), @params);
    }
    public void DebugCreatePlayer(int ControllerId)
    {
        Span<(string name, object value)> @params = [
            ("ControllerId", ControllerId)
        ];
        ProcessEvent(GetFunction("DebugCreatePlayer"), @params);
    }
}

public unsafe class Subsystem : ObjectBase<USubsystem>
{
    public Subsystem(IntPtr pointer) : base(pointer) {}}

public unsafe class GameInstanceSubsystem : ObjectBase<UGameInstanceSubsystem>
{
    public GameInstanceSubsystem(IntPtr pointer) : base(pointer) {}}

public unsafe class MeshComponent : ObjectBase<UMeshComponent>
{
    public MeshComponent(IntPtr pointer) : base(pointer) {}
    public void SetVectorParameterValueOnMaterials(FName ParameterName, FVector ParameterValue)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName), 
            ("ParameterValue", ParameterValue)
        ];
        ProcessEvent(GetFunction("SetVectorParameterValueOnMaterials"), @params);
    }
    public void SetScalarParameterValueOnMaterials(FName ParameterName, float ParameterValue)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName), 
            ("ParameterValue", ParameterValue)
        ];
        ProcessEvent(GetFunction("SetScalarParameterValueOnMaterials"), @params);
    }
    public void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups)
    {
        Span<(string name, object value)> @params = [
            ("Seconds", Seconds), 
            ("bPrioritizeCharacterTextures", bPrioritizeCharacterTextures), 
            ("CinematicTextureGroups", CinematicTextureGroups)
        ];
        ProcessEvent(GetFunction("PrestreamTextures"), @params);
    }
    public bool IsMaterialSlotNameValid(FName MaterialSlotName)
    {
        Span<(string name, object value)> @params = [
            ("MaterialSlotName", MaterialSlotName)
        ];
        return ProcessEvent<bool>(GetFunction("IsMaterialSlotNameValid"), @params);
    }
    public TArray<FName> GetMaterialSlotNames()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<FName>>(GetFunction("GetMaterialSlotNames"), @params);
    }
    public TArray<IntPtr> GetMaterials()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<IntPtr>>(GetFunction("GetMaterials"), @params);
    }
    public int GetMaterialIndex(FName MaterialSlotName)
    {
        Span<(string name, object value)> @params = [
            ("MaterialSlotName", MaterialSlotName)
        ];
        return ProcessEvent<int>(GetFunction("GetMaterialIndex"), @params);
    }
}

public unsafe class SkinnedMeshComponent : ObjectBase<USkinnedMeshComponent>
{
    public SkinnedMeshComponent(IntPtr pointer) : base(pointer) {}
    public void UnloadSkinWeightProfile(FName InProfileName)
    {
        Span<(string name, object value)> @params = [
            ("InProfileName", InProfileName)
        ];
        ProcessEvent(GetFunction("UnloadSkinWeightProfile"), @params);
    }
    public void UnHideBoneByName(FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("UnHideBoneByName"), @params);
    }
    public void TransformToBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, ref FVector OutPosition, ref FRotator OutRotation)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("InPosition", InPosition), 
            ("InRotation", InRotation), 
            ("OutPosition", OutPosition), 
            ("OutRotation", OutRotation)
        ];
        ProcessEvent(GetFunction("TransformToBoneSpace"), @params);
    }
    public void TransformFromBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, ref FVector OutPosition, ref FRotator OutRotation)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("InPosition", InPosition), 
            ("InRotation", InRotation), 
            ("OutPosition", OutPosition), 
            ("OutRotation", OutRotation)
        ];
        ProcessEvent(GetFunction("TransformFromBoneSpace"), @params);
    }
    public void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex)
    {
        Span<(string name, object value)> @params = [
            ("MaterialID", MaterialID), 
            ("SectionIndex", SectionIndex), 
            ("bShow", bShow), 
            ("LODIndex", LODIndex)
        ];
        ProcessEvent(GetFunction("ShowMaterialSection"), @params);
    }
    public void ShowAllMaterialSections(int LODIndex)
    {
        Span<(string name, object value)> @params = [
            ("LODIndex", LODIndex)
        ];
        ProcessEvent(GetFunction("ShowAllMaterialSections"), @params);
    }
    public void SetVertexOffsetUsage(int LODIndex, int Usage)
    {
        Span<(string name, object value)> @params = [
            ("LODIndex", LODIndex), 
            ("Usage", Usage)
        ];
        ProcessEvent(GetFunction("SetVertexOffsetUsage"), @params);
    }
    public void SetVertexColorOverride_LinearColor(int LODIndex, ref TArray<FLinearColor> VertexColors)
    {
        Span<(string name, object value)> @params = [
            ("LODIndex", LODIndex), 
            ("VertexColors", VertexColors)
        ];
        ProcessEvent(GetFunction("SetVertexColorOverride_LinearColor"), @params);
    }
    public bool SetSkinWeightProfile(FName InProfileName)
    {
        Span<(string name, object value)> @params = [
            ("InProfileName", InProfileName)
        ];
        return ProcessEvent<bool>(GetFunction("SetSkinWeightProfile"), @params);
    }
    public void SetSkinWeightOverride(int LODIndex, ref TArray<FSkelMeshSkinWeightInfo> SkinWeights)
    {
        Span<(string name, object value)> @params = [
            ("LODIndex", LODIndex), 
            ("SkinWeights", SkinWeights)
        ];
        ProcessEvent(GetFunction("SetSkinWeightOverride"), @params);
    }
    public void SetSkeletalMesh(USkeletalMesh* NewMesh, bool bReinitPose)
    {
        Span<(string name, object value)> @params = [
            ("NewMesh", (IntPtr)NewMesh), 
            ("bReinitPose", bReinitPose)
        ];
        ProcessEvent(GetFunction("SetSkeletalMesh"), @params);
    }
    public void SetRenderStatic(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetRenderStatic"), @params);
    }
    public void SetPreSkinningOffsets(int LODIndex, TArray<FVector> Offsets)
    {
        Span<(string name, object value)> @params = [
            ("LODIndex", LODIndex), 
            ("Offsets", Offsets)
        ];
        ProcessEvent(GetFunction("SetPreSkinningOffsets"), @params);
    }
    public void SetPostSkinningOffsets(int LODIndex, TArray<FVector> Offsets)
    {
        Span<(string name, object value)> @params = [
            ("LODIndex", LODIndex), 
            ("Offsets", Offsets)
        ];
        ProcessEvent(GetFunction("SetPostSkinningOffsets"), @params);
    }
    public void SetPhysicsAsset(UPhysicsAsset* NewPhysicsAsset, bool bForceReInit)
    {
        Span<(string name, object value)> @params = [
            ("NewPhysicsAsset", (IntPtr)NewPhysicsAsset), 
            ("bForceReInit", bForceReInit)
        ];
        ProcessEvent(GetFunction("SetPhysicsAsset"), @params);
    }
    public void SetMinLOD(int InNewMinLOD)
    {
        Span<(string name, object value)> @params = [
            ("InNewMinLOD", InNewMinLOD)
        ];
        ProcessEvent(GetFunction("SetMinLOD"), @params);
    }
    public void SetMasterPoseComponent(USkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate)
    {
        Span<(string name, object value)> @params = [
            ("NewMasterBoneComponent", (IntPtr)NewMasterBoneComponent), 
            ("bForceUpdate", bForceUpdate)
        ];
        ProcessEvent(GetFunction("SetMasterPoseComponent"), @params);
    }
    public void SetForcedLOD(int InNewForcedLOD)
    {
        Span<(string name, object value)> @params = [
            ("InNewForcedLOD", InNewForcedLOD)
        ];
        ProcessEvent(GetFunction("SetForcedLOD"), @params);
    }
    public void SetCastCapsuleIndirectShadow(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetCastCapsuleIndirectShadow"), @params);
    }
    public void SetCastCapsuleDirectShadow(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetCastCapsuleDirectShadow"), @params);
    }
    public void SetCapsuleIndirectShadowMinVisibility(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetCapsuleIndirectShadowMinVisibility"), @params);
    }
    public bool IsUsingSkinWeightProfile()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsUsingSkinWeightProfile"), @params);
    }
    public bool IsMaterialSectionShown(int MaterialID, int LODIndex)
    {
        Span<(string name, object value)> @params = [
            ("MaterialID", MaterialID), 
            ("LODIndex", LODIndex)
        ];
        return ProcessEvent<bool>(GetFunction("IsMaterialSectionShown"), @params);
    }
    public bool IsBoneHiddenByName(FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName)
        ];
        return ProcessEvent<bool>(GetFunction("IsBoneHiddenByName"), @params);
    }
    public void HideBoneByName(FName BoneName, EPhysBodyOp PhysBodyOption)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("PhysBodyOption", PhysBodyOption)
        ];
        ProcessEvent(GetFunction("HideBoneByName"), @params);
    }
    public int GetVertexOffsetUsage(int LODIndex)
    {
        Span<(string name, object value)> @params = [
            ("LODIndex", LODIndex)
        ];
        return ProcessEvent<int>(GetFunction("GetVertexOffsetUsage"), @params);
    }
    public bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, ref float OutTwistAngle, ref float OutSwingAngle)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("OutTwistAngle", OutTwistAngle), 
            ("OutSwingAngle", OutSwingAngle)
        ];
        return ProcessEvent<bool>(GetFunction("GetTwistAndSwingAngleOfDeltaRotationFromRefPose"), @params);
    }
    public FName GetSocketBoneName(FName InSocketName)
    {
        Span<(string name, object value)> @params = [
            ("InSocketName", InSocketName)
        ];
        return ProcessEvent<FName>(GetFunction("GetSocketBoneName"), @params);
    }
    public FVector GetRefPosePosition(int BoneIndex)
    {
        Span<(string name, object value)> @params = [
            ("BoneIndex", BoneIndex)
        ];
        return ProcessEvent<FVector>(GetFunction("GetRefPosePosition"), @params);
    }
    public FName GetParentBone(FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName)
        ];
        return ProcessEvent<FName>(GetFunction("GetParentBone"), @params);
    }
    public int GetNumLODs()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetNumLODs"), @params);
    }
    public int GetNumBones()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetNumBones"), @params);
    }
    public int GetForcedLOD()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetForcedLOD"), @params);
    }
    public FTransform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("BaseName", BaseName)
        ];
        return ProcessEvent<FTransform>(GetFunction("GetDeltaTransformFromRefPose"), @params);
    }
    public FName GetCurrentSkinWeightProfileName()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FName>(GetFunction("GetCurrentSkinWeightProfileName"), @params);
    }
    public FName GetBoneName(int BoneIndex)
    {
        Span<(string name, object value)> @params = [
            ("BoneIndex", BoneIndex)
        ];
        return ProcessEvent<FName>(GetFunction("GetBoneName"), @params);
    }
    public int GetBoneIndex(FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName)
        ];
        return ProcessEvent<int>(GetFunction("GetBoneIndex"), @params);
    }
    public FName FindClosestBone_K2(FVector TestLocation, ref FVector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset)
    {
        Span<(string name, object value)> @params = [
            ("TestLocation", TestLocation), 
            ("BoneLocation", BoneLocation), 
            ("IgnoreScale", IgnoreScale), 
            ("bRequirePhysicsAsset", bRequirePhysicsAsset)
        ];
        return ProcessEvent<FName>(GetFunction("FindClosestBone_K2"), @params);
    }
    public void ClearVertexColorOverride(int LODIndex)
    {
        Span<(string name, object value)> @params = [
            ("LODIndex", LODIndex)
        ];
        ProcessEvent(GetFunction("ClearVertexColorOverride"), @params);
    }
    public void ClearSkinWeightProfile()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClearSkinWeightProfile"), @params);
    }
    public void ClearSkinWeightOverride(int LODIndex)
    {
        Span<(string name, object value)> @params = [
            ("LODIndex", LODIndex)
        ];
        ProcessEvent(GetFunction("ClearSkinWeightOverride"), @params);
    }
    public bool BoneIsChildOf(FName BoneName, FName ParentBoneName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("ParentBoneName", ParentBoneName)
        ];
        return ProcessEvent<bool>(GetFunction("BoneIsChildOf"), @params);
    }
}

public unsafe class SkeletalMeshComponent : ObjectBase<USkeletalMeshComponent>
{
    public SkeletalMeshComponent(IntPtr pointer) : base(pointer) {}
    public void UnlinkAnimClassLayers(TSubclassOf<UAnimInstance> InClass)
    {
        Span<(string name, object value)> @params = [
            ("InClass", InClass)
        ];
        ProcessEvent(GetFunction("UnlinkAnimClassLayers"), @params);
    }
    public void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace)
    {
        Span<(string name, object value)> @params = [
            ("bRestoreSimulationSpace", bRestoreSimulationSpace)
        ];
        ProcessEvent(GetFunction("UnbindClothFromMasterPoseComponent"), @params);
    }
    public void ToggleDisablePostProcessBlueprint()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ToggleDisablePostProcessBlueprint"), @params);
    }
    public void TermBodiesBelow(FName ParentBoneName)
    {
        Span<(string name, object value)> @params = [
            ("ParentBoneName", ParentBoneName)
        ];
        ProcessEvent(GetFunction("TermBodiesBelow"), @params);
    }
    public void SuspendClothingSimulation()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("SuspendClothingSimulation"), @params);
    }
    public void Stop()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Stop"), @params);
    }
    public void SnapshotPose(ref FPoseSnapshot Snapshot)
    {
        Span<(string name, object value)> @params = [
            ("Snapshot", Snapshot)
        ];
        ProcessEvent(GetFunction("SnapshotPose"), @params);
    }
    public void SetUpdateClothInEditor(bool NewUpdateState)
    {
        Span<(string name, object value)> @params = [
            ("NewUpdateState", NewUpdateState)
        ];
        ProcessEvent(GetFunction("SetUpdateClothInEditor"), @params);
    }
    public void SetUpdateAnimationInEditor(bool NewUpdateState)
    {
        Span<(string name, object value)> @params = [
            ("NewUpdateState", NewUpdateState)
        ];
        ProcessEvent(GetFunction("SetUpdateAnimationInEditor"), @params);
    }
    public void SetTeleportRotationThreshold(float Threshold)
    {
        Span<(string name, object value)> @params = [
            ("Threshold", Threshold)
        ];
        ProcessEvent(GetFunction("SetTeleportRotationThreshold"), @params);
    }
    public void SetTeleportDistanceThreshold(float Threshold)
    {
        Span<(string name, object value)> @params = [
            ("Threshold", Threshold)
        ];
        ProcessEvent(GetFunction("SetTeleportDistanceThreshold"), @params);
    }
    public void SetPosition(float InPos, bool bFireNotifies)
    {
        Span<(string name, object value)> @params = [
            ("InPos", InPos), 
            ("bFireNotifies", bFireNotifies)
        ];
        ProcessEvent(GetFunction("SetPosition"), @params);
    }
    public void SetPlayRate(float Rate)
    {
        Span<(string name, object value)> @params = [
            ("Rate", Rate)
        ];
        ProcessEvent(GetFunction("SetPlayRate"), @params);
    }
    public void SetPhysicsBlendWeight(float PhysicsBlendWeight)
    {
        Span<(string name, object value)> @params = [
            ("PhysicsBlendWeight", PhysicsBlendWeight)
        ];
        ProcessEvent(GetFunction("SetPhysicsBlendWeight"), @params);
    }
    public void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf)
    {
        Span<(string name, object value)> @params = [
            ("bNewNotifyRigidBodyCollision", bNewNotifyRigidBodyCollision), 
            ("BoneName", BoneName), 
            ("bIncludeSelf", bIncludeSelf)
        ];
        ProcessEvent(GetFunction("SetNotifyRigidBodyCollisionBelow"), @params);
    }
    public void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight)
    {
        Span<(string name, object value)> @params = [
            ("MorphTargetName", MorphTargetName), 
            ("Value", Value), 
            ("bRemoveZeroWeight", bRemoveZeroWeight)
        ];
        ProcessEvent(GetFunction("SetMorphTarget"), @params);
    }
    public void SetEnablePhysicsBlending(bool bNewBlendPhysics)
    {
        Span<(string name, object value)> @params = [
            ("bNewBlendPhysics", bNewBlendPhysics)
        ];
        ProcessEvent(GetFunction("SetEnablePhysicsBlending"), @params);
    }
    public void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf)
    {
        Span<(string name, object value)> @params = [
            ("bEnableGravity", bEnableGravity), 
            ("BoneName", BoneName), 
            ("bIncludeSelf", bIncludeSelf)
        ];
        ProcessEvent(GetFunction("SetEnableGravityOnAllBodiesBelow"), @params);
    }
    public void SetEnableBodyGravity(bool bEnableGravity, FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("bEnableGravity", bEnableGravity), 
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("SetEnableBodyGravity"), @params);
    }
    public void SetDisablePostProcessBlueprint(bool bInDisablePostProcess)
    {
        Span<(string name, object value)> @params = [
            ("bInDisablePostProcess", bInDisablePostProcess)
        ];
        ProcessEvent(GetFunction("SetDisablePostProcessBlueprint"), @params);
    }
    public void SetDisableAnimCurves(bool bInDisableAnimCurves)
    {
        Span<(string name, object value)> @params = [
            ("bInDisableAnimCurves", bInDisableAnimCurves)
        ];
        ProcessEvent(GetFunction("SetDisableAnimCurves"), @params);
    }
    public void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound)
    {
        Span<(string name, object value)> @params = [
            ("ProfileName", ProfileName), 
            ("bDefaultIfNotFound", bDefaultIfNotFound)
        ];
        ProcessEvent(GetFunction("SetConstraintProfileForAll"), @params);
    }
    public void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound)
    {
        Span<(string name, object value)> @params = [
            ("JointName", JointName), 
            ("ProfileName", ProfileName), 
            ("bDefaultIfNotFound", bDefaultIfNotFound)
        ];
        ProcessEvent(GetFunction("SetConstraintProfile"), @params);
    }
    public void SetClothMaxDistanceScale(float Scale)
    {
        Span<(string name, object value)> @params = [
            ("Scale", Scale)
        ];
        ProcessEvent(GetFunction("SetClothMaxDistanceScale"), @params);
    }
    public void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("bNewNotifyRigidBodyCollision", bNewNotifyRigidBodyCollision), 
            ("BoneName", BoneName)
        ];
        ProcessEvent(GetFunction("SetBodyNotifyRigidBodyCollision"), @params);
    }
    public void SetAnimClass(UClass* NewClass)
    {
        Span<(string name, object value)> @params = [
            ("NewClass", (IntPtr)NewClass)
        ];
        ProcessEvent(GetFunction("SetAnimClass"), @params);
    }
    public void SetAnimationMode(EAnimationMode InAnimationMode)
    {
        Span<(string name, object value)> @params = [
            ("InAnimationMode", InAnimationMode)
        ];
        ProcessEvent(GetFunction("SetAnimationMode"), @params);
    }
    public void SetAnimation(UAnimationAsset* NewAnimToPlay)
    {
        Span<(string name, object value)> @params = [
            ("NewAnimToPlay", (IntPtr)NewAnimToPlay)
        ];
        ProcessEvent(GetFunction("SetAnimation"), @params);
    }
    public void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle)
    {
        Span<(string name, object value)> @params = [
            ("InBoneName", InBoneName), 
            ("Swing1LimitAngle", Swing1LimitAngle), 
            ("TwistLimitAngle", TwistLimitAngle), 
            ("Swing2LimitAngle", Swing2LimitAngle)
        ];
        ProcessEvent(GetFunction("SetAngularLimits"), @params);
    }
    public void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim)
    {
        Span<(string name, object value)> @params = [
            ("bInAllow", bInAllow), 
            ("bReinitAnim", bReinitAnim)
        ];
        ProcessEvent(GetFunction("SetAllowRigidBodyAnimNode"), @params);
    }
    public void SetAllowedAnimCurvesEvaluation(ref TArray<FName> List, bool bAllow)
    {
        Span<(string name, object value)> @params = [
            ("List", List), 
            ("bAllow", bAllow)
        ];
        ProcessEvent(GetFunction("SetAllowedAnimCurvesEvaluation"), @params);
    }
    public void SetAllowAnimCurveEvaluation(bool bInAllow)
    {
        Span<(string name, object value)> @params = [
            ("bInAllow", bInAllow)
        ];
        ProcessEvent(GetFunction("SetAllowAnimCurveEvaluation"), @params);
    }
    public void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType)
    {
        Span<(string name, object value)> @params = [
            ("bEnableSwingDrive", bEnableSwingDrive), 
            ("bEnableTwistDrive", bEnableTwistDrive), 
            ("bSkipCustomPhysicsType", bSkipCustomPhysicsType)
        ];
        ProcessEvent(GetFunction("SetAllMotorsAngularVelocityDrive"), @params);
    }
    public void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType)
    {
        Span<(string name, object value)> @params = [
            ("bEnableSwingDrive", bEnableSwingDrive), 
            ("bEnableTwistDrive", bEnableTwistDrive), 
            ("bSkipCustomPhysicsType", bSkipCustomPhysicsType)
        ];
        ProcessEvent(GetFunction("SetAllMotorsAngularPositionDrive"), @params);
    }
    public void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType)
    {
        Span<(string name, object value)> @params = [
            ("InSpring", InSpring), 
            ("InDamping", InDamping), 
            ("InForceLimit", InForceLimit), 
            ("bSkipCustomPhysicsType", bSkipCustomPhysicsType)
        ];
        ProcessEvent(GetFunction("SetAllMotorsAngularDriveParams"), @params);
    }
    public void SetAllBodiesSimulatePhysics(bool bNewSimulate)
    {
        Span<(string name, object value)> @params = [
            ("bNewSimulate", bNewSimulate)
        ];
        ProcessEvent(GetFunction("SetAllBodiesSimulatePhysics"), @params);
    }
    public void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType)
    {
        Span<(string name, object value)> @params = [
            ("PhysicsBlendWeight", PhysicsBlendWeight), 
            ("bSkipCustomPhysicsType", bSkipCustomPhysicsType)
        ];
        ProcessEvent(GetFunction("SetAllBodiesPhysicsBlendWeight"), @params);
    }
    public void SetAllBodiesBelowSimulatePhysics(ref FName InBoneName, bool bNewSimulate, bool bIncludeSelf)
    {
        Span<(string name, object value)> @params = [
            ("InBoneName", InBoneName), 
            ("bNewSimulate", bNewSimulate), 
            ("bIncludeSelf", bIncludeSelf)
        ];
        ProcessEvent(GetFunction("SetAllBodiesBelowSimulatePhysics"), @params);
    }
    public void SetAllBodiesBelowPhysicsBlendWeight(ref FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf)
    {
        Span<(string name, object value)> @params = [
            ("InBoneName", InBoneName), 
            ("PhysicsBlendWeight", PhysicsBlendWeight), 
            ("bSkipCustomPhysicsType", bSkipCustomPhysicsType), 
            ("bIncludeSelf", bIncludeSelf)
        ];
        ProcessEvent(GetFunction("SetAllBodiesBelowPhysicsBlendWeight"), @params);
    }
    public void ResumeClothingSimulation()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ResumeClothingSimulation"), @params);
    }
    public void ResetClothTeleportMode()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ResetClothTeleportMode"), @params);
    }
    public void ResetAnimInstanceDynamics(ETeleportType InTeleportType)
    {
        Span<(string name, object value)> @params = [
            ("InTeleportType", InTeleportType)
        ];
        ProcessEvent(GetFunction("ResetAnimInstanceDynamics"), @params);
    }
    public void ResetAllowedAnimCurveEvaluation()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ResetAllowedAnimCurveEvaluation"), @params);
    }
    public void ResetAllBodiesSimulatePhysics()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ResetAllBodiesSimulatePhysics"), @params);
    }
    public void PlayAnimation(UAnimationAsset* NewAnimToPlay, bool bLooping)
    {
        Span<(string name, object value)> @params = [
            ("NewAnimToPlay", (IntPtr)NewAnimToPlay), 
            ("bLooping", bLooping)
        ];
        ProcessEvent(GetFunction("PlayAnimation"), @params);
    }
    public void Play(bool bLooping)
    {
        Span<(string name, object value)> @params = [
            ("bLooping", bLooping)
        ];
        ProcessEvent(GetFunction("Play"), @params);
    }
    public void OverrideAnimationData(UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate)
    {
        Span<(string name, object value)> @params = [
            ("InAnimToPlay", (IntPtr)InAnimToPlay), 
            ("bIsLooping", bIsLooping), 
            ("bIsPlaying", bIsPlaying), 
            ("Position", Position), 
            ("PlayRate", PlayRate)
        ];
        ProcessEvent(GetFunction("OverrideAnimationData"), @params);
    }
    public void LinkAnimGraphByTag(FName InTag, TSubclassOf<UAnimInstance> InClass)
    {
        Span<(string name, object value)> @params = [
            ("InTag", InTag), 
            ("InClass", InClass)
        ];
        ProcessEvent(GetFunction("LinkAnimGraphByTag"), @params);
    }
    public void LinkAnimClassLayers(TSubclassOf<UAnimInstance> InClass)
    {
        Span<(string name, object value)> @params = [
            ("InClass", InClass)
        ];
        ProcessEvent(GetFunction("LinkAnimClassLayers"), @params);
    }
    public bool K2_GetClosestPointOnPhysicsAsset(ref FVector WorldPosition, ref FVector ClosestWorldPosition, ref FVector Normal, ref FName BoneName, ref float Distance)
    {
        Span<(string name, object value)> @params = [
            ("WorldPosition", WorldPosition), 
            ("ClosestWorldPosition", ClosestWorldPosition), 
            ("Normal", Normal), 
            ("BoneName", BoneName), 
            ("Distance", Distance)
        ];
        return ProcessEvent<bool>(GetFunction("K2_GetClosestPointOnPhysicsAsset"), @params);
    }
    public bool IsPlaying()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsPlaying"), @params);
    }
    public bool IsClothingSimulationSuspended()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsClothingSimulationSuspended"), @params);
    }
    public bool IsBodyGravityEnabled(FName BoneName)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName)
        ];
        return ProcessEvent<bool>(GetFunction("IsBodyGravityEnabled"), @params);
    }
    public bool HasValidAnimationInstance()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("HasValidAnimationInstance"), @params);
    }
    public float GetTeleportRotationThreshold()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetTeleportRotationThreshold"), @params);
    }
    public float GetTeleportDistanceThreshold()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetTeleportDistanceThreshold"), @params);
    }
    public bool GetStringAttribute_Ref(ref FName BoneName, ref FName AttributeName, ref FString OutValue, ECustomBoneAttributeLookup LookupType)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("AttributeName", AttributeName), 
            ("OutValue", OutValue), 
            ("LookupType", LookupType)
        ];
        return ProcessEvent<bool>(GetFunction("GetStringAttribute_Ref"), @params);
    }
    public bool GetStringAttribute(ref FName BoneName, ref FName AttributeName, FString DefaultValue, ref FString OutValue, ECustomBoneAttributeLookup LookupType)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("AttributeName", AttributeName), 
            ("DefaultValue", DefaultValue), 
            ("OutValue", OutValue), 
            ("LookupType", LookupType)
        ];
        return ProcessEvent<bool>(GetFunction("GetStringAttribute"), @params);
    }
    public FVector GetSkeletalCenterOfMass()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetSkeletalCenterOfMass"), @params);
    }
    public UAnimInstance* GetPostProcessInstance()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UAnimInstance*)ProcessEvent<IntPtr>(GetFunction("GetPostProcessInstance"), @params);
    }
    public float GetPosition()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetPosition"), @params);
    }
    public float GetPlayRate()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetPlayRate"), @params);
    }
    public float GetMorphTarget(FName MorphTargetName)
    {
        Span<(string name, object value)> @params = [
            ("MorphTargetName", MorphTargetName)
        ];
        return ProcessEvent<float>(GetFunction("GetMorphTarget"), @params);
    }
    public UAnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup)
    {
        Span<(string name, object value)> @params = [
            ("InGroup", InGroup)
        ];
        return (UAnimInstance*)ProcessEvent<IntPtr>(GetFunction("GetLinkedAnimLayerInstanceByGroup"), @params);
    }
    public UAnimInstance* GetLinkedAnimLayerInstanceByClass(TSubclassOf<UAnimInstance> InClass)
    {
        Span<(string name, object value)> @params = [
            ("InClass", InClass)
        ];
        return (UAnimInstance*)ProcessEvent<IntPtr>(GetFunction("GetLinkedAnimLayerInstanceByClass"), @params);
    }
    public void GetLinkedAnimGraphInstancesByTag(FName InTag, ref TArray<IntPtr> OutLinkedInstances)
    {
        Span<(string name, object value)> @params = [
            ("InTag", InTag), 
            ("OutLinkedInstances", OutLinkedInstances)
        ];
        ProcessEvent(GetFunction("GetLinkedAnimGraphInstancesByTag"), @params);
    }
    public UAnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag)
    {
        Span<(string name, object value)> @params = [
            ("InTag", InTag)
        ];
        return (UAnimInstance*)ProcessEvent<IntPtr>(GetFunction("GetLinkedAnimGraphInstanceByTag"), @params);
    }
    public bool GetIntegerAttribute_Ref(ref FName BoneName, ref FName AttributeName, ref int OutValue, ECustomBoneAttributeLookup LookupType)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("AttributeName", AttributeName), 
            ("OutValue", OutValue), 
            ("LookupType", LookupType)
        ];
        return ProcessEvent<bool>(GetFunction("GetIntegerAttribute_Ref"), @params);
    }
    public bool GetIntegerAttribute(ref FName BoneName, ref FName AttributeName, int DefaultValue, ref int OutValue, ECustomBoneAttributeLookup LookupType)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("AttributeName", AttributeName), 
            ("DefaultValue", DefaultValue), 
            ("OutValue", OutValue), 
            ("LookupType", LookupType)
        ];
        return ProcessEvent<bool>(GetFunction("GetIntegerAttribute"), @params);
    }
    public bool GetFloatAttribute_Ref(ref FName BoneName, ref FName AttributeName, ref float OutValue, ECustomBoneAttributeLookup LookupType)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("AttributeName", AttributeName), 
            ("OutValue", OutValue), 
            ("LookupType", LookupType)
        ];
        return ProcessEvent<bool>(GetFunction("GetFloatAttribute_Ref"), @params);
    }
    public bool GetFloatAttribute(ref FName BoneName, ref FName AttributeName, float DefaultValue, ref float OutValue, ECustomBoneAttributeLookup LookupType)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("AttributeName", AttributeName), 
            ("DefaultValue", DefaultValue), 
            ("OutValue", OutValue), 
            ("LookupType", LookupType)
        ];
        return ProcessEvent<bool>(GetFunction("GetFloatAttribute"), @params);
    }
    public bool GetDisablePostProcessBlueprint()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("GetDisablePostProcessBlueprint"), @params);
    }
    public bool GetDisableAnimCurves()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("GetDisableAnimCurves"), @params);
    }
    public void GetCurrentJointAngles(FName InBoneName, ref float Swing1Angle, ref float TwistAngle, ref float Swing2Angle)
    {
        Span<(string name, object value)> @params = [
            ("InBoneName", InBoneName), 
            ("Swing1Angle", Swing1Angle), 
            ("TwistAngle", TwistAngle), 
            ("Swing2Angle", Swing2Angle)
        ];
        ProcessEvent(GetFunction("GetCurrentJointAngles"), @params);
    }
    public float GetClothMaxDistanceScale()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetClothMaxDistanceScale"), @params);
    }
    public UClothingSimulationInteractor* GetClothingSimulationInteractor()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UClothingSimulationInteractor*)ProcessEvent<IntPtr>(GetFunction("GetClothingSimulationInteractor"), @params);
    }
    public float GetBoneMass(FName BoneName, bool bScaleMass)
    {
        Span<(string name, object value)> @params = [
            ("BoneName", BoneName), 
            ("bScaleMass", bScaleMass)
        ];
        return ProcessEvent<float>(GetFunction("GetBoneMass"), @params);
    }
    public UAnimInstance* GetAnimInstance()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UAnimInstance*)ProcessEvent<IntPtr>(GetFunction("GetAnimInstance"), @params);
    }
    public UClass* GetAnimClass()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UClass*)ProcessEvent<IntPtr>(GetFunction("GetAnimClass"), @params);
    }
    public EAnimationMode GetAnimationMode()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<EAnimationMode>(GetFunction("GetAnimationMode"), @params);
    }
    public bool GetAllowRigidBodyAnimNode()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("GetAllowRigidBodyAnimNode"), @params);
    }
    public bool GetAllowedAnimCurveEvaluate()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("GetAllowedAnimCurveEvaluate"), @params);
    }
    public void ForceClothNextUpdateTeleportAndReset()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ForceClothNextUpdateTeleportAndReset"), @params);
    }
    public void ForceClothNextUpdateTeleport()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ForceClothNextUpdateTeleport"), @params);
    }
    public FName FindConstraintBoneName(int ConstraintIndex)
    {
        Span<(string name, object value)> @params = [
            ("ConstraintIndex", ConstraintIndex)
        ];
        return ProcessEvent<FName>(GetFunction("FindConstraintBoneName"), @params);
    }
    public void ClearMorphTargets()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClearMorphTargets"), @params);
    }
    public void BreakConstraint(FVector Impulse, FVector HitLocation, FName InBoneName)
    {
        Span<(string name, object value)> @params = [
            ("Impulse", Impulse), 
            ("HitLocation", HitLocation), 
            ("InBoneName", InBoneName)
        ];
        ProcessEvent(GetFunction("BreakConstraint"), @params);
    }
    public void BindClothToMasterPoseComponent()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("BindClothToMasterPoseComponent"), @params);
    }
    public void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow)
    {
        Span<(string name, object value)> @params = [
            ("NameOfCurve", NameOfCurve), 
            ("bAllow", bAllow)
        ];
        ProcessEvent(GetFunction("AllowAnimCurveEvaluation"), @params);
    }
    public void AddImpulseToAllBodiesBelow(FVector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf)
    {
        Span<(string name, object value)> @params = [
            ("Impulse", Impulse), 
            ("BoneName", BoneName), 
            ("bVelChange", bVelChange), 
            ("bIncludeSelf", bIncludeSelf)
        ];
        ProcessEvent(GetFunction("AddImpulseToAllBodiesBelow"), @params);
    }
    public void AddForceToAllBodiesBelow(FVector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf)
    {
        Span<(string name, object value)> @params = [
            ("Force", Force), 
            ("BoneName", BoneName), 
            ("bAccelChange", bAccelChange), 
            ("bIncludeSelf", bIncludeSelf)
        ];
        ProcessEvent(GetFunction("AddForceToAllBodiesBelow"), @params);
    }
    public void AccumulateAllBodiesBelowPhysicsBlendWeight(ref FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType)
    {
        Span<(string name, object value)> @params = [
            ("InBoneName", InBoneName), 
            ("AddPhysicsBlendWeight", AddPhysicsBlendWeight), 
            ("bSkipCustomPhysicsType", bSkipCustomPhysicsType)
        ];
        ProcessEvent(GetFunction("AccumulateAllBodiesBelowPhysicsBlendWeight"), @params);
    }
}

public unsafe class AnimInstance : ObjectBase<UAnimInstance>
{
    public AnimInstance(IntPtr pointer) : base(pointer) {}
    public void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic)
    {
        Span<(string name, object value)> @params = [
            ("bUnlockMovement", bUnlockMovement), 
            ("UnlockAILogic", UnlockAILogic)
        ];
        ProcessEvent(GetFunction("UnlockAIResources"), @params);
    }
    public void UnlinkAnimClassLayers(TSubclassOf<UAnimInstance> InClass)
    {
        Span<(string name, object value)> @params = [
            ("InClass", InClass)
        ];
        ProcessEvent(GetFunction("UnlinkAnimClassLayers"), @params);
    }
    public APawn* TryGetPawnOwner()
    {
        Span<(string name, object value)> @params = [
        ];
        return (APawn*)ProcessEvent<IntPtr>(GetFunction("TryGetPawnOwner"), @params);
    }
    public void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName)
    {
        Span<(string name, object value)> @params = [
            ("InBlendOutTime", InBlendOutTime), 
            ("SlotNodeName", SlotNodeName)
        ];
        ProcessEvent(GetFunction("StopSlotAnimation"), @params);
    }
    public void SnapshotPose(ref FPoseSnapshot Snapshot)
    {
        Span<(string name, object value)> @params = [
            ("Snapshot", Snapshot)
        ];
        ProcessEvent(GetFunction("SnapshotPose"), @params);
    }
    public void SetRootMotionMode(ERootMotionMode Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetRootMotionMode"), @params);
    }
    public void SetReceiveNotifiesFromLinkedInstances(bool bSet)
    {
        Span<(string name, object value)> @params = [
            ("bSet", bSet)
        ];
        ProcessEvent(GetFunction("SetReceiveNotifiesFromLinkedInstances"), @params);
    }
    public void SetPropagateNotifiesToLinkedInstances(bool bSet)
    {
        Span<(string name, object value)> @params = [
            ("bSet", bSet)
        ];
        ProcessEvent(GetFunction("SetPropagateNotifiesToLinkedInstances"), @params);
    }
    public void SetMorphTarget(FName MorphTargetName, float Value)
    {
        Span<(string name, object value)> @params = [
            ("MorphTargetName", MorphTargetName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetMorphTarget"), @params);
    }
    public void SavePoseSnapshot(FName SnapshotName)
    {
        Span<(string name, object value)> @params = [
            ("SnapshotName", SnapshotName)
        ];
        ProcessEvent(GetFunction("SavePoseSnapshot"), @params);
    }
    public void ResetDynamics(ETeleportType InTeleportType)
    {
        Span<(string name, object value)> @params = [
            ("InTeleportType", InTeleportType)
        ];
        ProcessEvent(GetFunction("ResetDynamics"), @params);
    }
    public UAnimMontage* PlaySlotAnimationAsDynamicMontage(UAnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt)
    {
        Span<(string name, object value)> @params = [
            ("Asset", (IntPtr)Asset), 
            ("SlotNodeName", SlotNodeName), 
            ("BlendInTime", BlendInTime), 
            ("BlendOutTime", BlendOutTime), 
            ("InPlayRate", InPlayRate), 
            ("LoopCount", LoopCount), 
            ("BlendOutTriggerTime", BlendOutTriggerTime), 
            ("InTimeToStartMontageAt", InTimeToStartMontageAt)
        ];
        return (UAnimMontage*)ProcessEvent<IntPtr>(GetFunction("PlaySlotAnimationAsDynamicMontage"), @params);
    }
    public float PlaySlotAnimation(UAnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount)
    {
        Span<(string name, object value)> @params = [
            ("Asset", (IntPtr)Asset), 
            ("SlotNodeName", SlotNodeName), 
            ("BlendInTime", BlendInTime), 
            ("BlendOutTime", BlendOutTime), 
            ("InPlayRate", InPlayRate), 
            ("LoopCount", LoopCount)
        ];
        return ProcessEvent<float>(GetFunction("PlaySlotAnimation"), @params);
    }
    public void Montage_StopGroupByName(float InBlendOutTime, FName GroupName)
    {
        Span<(string name, object value)> @params = [
            ("InBlendOutTime", InBlendOutTime), 
            ("GroupName", GroupName)
        ];
        ProcessEvent(GetFunction("Montage_StopGroupByName"), @params);
    }
    public void Montage_Stop(float InBlendOutTime, UAnimMontage* Montage)
    {
        Span<(string name, object value)> @params = [
            ("InBlendOutTime", InBlendOutTime), 
            ("Montage", (IntPtr)Montage)
        ];
        ProcessEvent(GetFunction("Montage_Stop"), @params);
    }
    public void Montage_SetPosition(UAnimMontage* Montage, float NewPosition)
    {
        Span<(string name, object value)> @params = [
            ("Montage", (IntPtr)Montage), 
            ("NewPosition", NewPosition)
        ];
        ProcessEvent(GetFunction("Montage_SetPosition"), @params);
    }
    public void Montage_SetPlayRate(UAnimMontage* Montage, float NewPlayRate)
    {
        Span<(string name, object value)> @params = [
            ("Montage", (IntPtr)Montage), 
            ("NewPlayRate", NewPlayRate)
        ];
        ProcessEvent(GetFunction("Montage_SetPlayRate"), @params);
    }
    public void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, UAnimMontage* Montage)
    {
        Span<(string name, object value)> @params = [
            ("SectionNameToChange", SectionNameToChange), 
            ("NextSection", NextSection), 
            ("Montage", (IntPtr)Montage)
        ];
        ProcessEvent(GetFunction("Montage_SetNextSection"), @params);
    }
    public void Montage_Resume(UAnimMontage* Montage)
    {
        Span<(string name, object value)> @params = [
            ("Montage", (IntPtr)Montage)
        ];
        ProcessEvent(GetFunction("Montage_Resume"), @params);
    }
    public float Montage_Play(UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages)
    {
        Span<(string name, object value)> @params = [
            ("MontageToPlay", (IntPtr)MontageToPlay), 
            ("InPlayRate", InPlayRate), 
            ("ReturnValueType", ReturnValueType), 
            ("InTimeToStartMontageAt", InTimeToStartMontageAt), 
            ("bStopAllMontages", bStopAllMontages)
        ];
        return ProcessEvent<float>(GetFunction("Montage_Play"), @params);
    }
    public void Montage_Pause(UAnimMontage* Montage)
    {
        Span<(string name, object value)> @params = [
            ("Montage", (IntPtr)Montage)
        ];
        ProcessEvent(GetFunction("Montage_Pause"), @params);
    }
    public void Montage_JumpToSectionsEnd(FName SectionName, UAnimMontage* Montage)
    {
        Span<(string name, object value)> @params = [
            ("SectionName", SectionName), 
            ("Montage", (IntPtr)Montage)
        ];
        ProcessEvent(GetFunction("Montage_JumpToSectionsEnd"), @params);
    }
    public void Montage_JumpToSection(FName SectionName, UAnimMontage* Montage)
    {
        Span<(string name, object value)> @params = [
            ("SectionName", SectionName), 
            ("Montage", (IntPtr)Montage)
        ];
        ProcessEvent(GetFunction("Montage_JumpToSection"), @params);
    }
    public bool Montage_IsPlaying(UAnimMontage* Montage)
    {
        Span<(string name, object value)> @params = [
            ("Montage", (IntPtr)Montage)
        ];
        return ProcessEvent<bool>(GetFunction("Montage_IsPlaying"), @params);
    }
    public bool Montage_IsActive(UAnimMontage* Montage)
    {
        Span<(string name, object value)> @params = [
            ("Montage", (IntPtr)Montage)
        ];
        return ProcessEvent<bool>(GetFunction("Montage_IsActive"), @params);
    }
    public float Montage_GetPosition(UAnimMontage* Montage)
    {
        Span<(string name, object value)> @params = [
            ("Montage", (IntPtr)Montage)
        ];
        return ProcessEvent<float>(GetFunction("Montage_GetPosition"), @params);
    }
    public float Montage_GetPlayRate(UAnimMontage* Montage)
    {
        Span<(string name, object value)> @params = [
            ("Montage", (IntPtr)Montage)
        ];
        return ProcessEvent<float>(GetFunction("Montage_GetPlayRate"), @params);
    }
    public bool Montage_GetIsStopped(UAnimMontage* Montage)
    {
        Span<(string name, object value)> @params = [
            ("Montage", (IntPtr)Montage)
        ];
        return ProcessEvent<bool>(GetFunction("Montage_GetIsStopped"), @params);
    }
    public FName Montage_GetCurrentSection(UAnimMontage* Montage)
    {
        Span<(string name, object value)> @params = [
            ("Montage", (IntPtr)Montage)
        ];
        return ProcessEvent<FName>(GetFunction("Montage_GetCurrentSection"), @params);
    }
    public float Montage_GetBlendTime(UAnimMontage* Montage)
    {
        Span<(string name, object value)> @params = [
            ("Montage", (IntPtr)Montage)
        ];
        return ProcessEvent<float>(GetFunction("Montage_GetBlendTime"), @params);
    }
    public void LockAIResources(bool bLockMovement, bool LockAILogic)
    {
        Span<(string name, object value)> @params = [
            ("bLockMovement", bLockMovement), 
            ("LockAILogic", LockAILogic)
        ];
        ProcessEvent(GetFunction("LockAIResources"), @params);
    }
    public void LinkAnimGraphByTag(FName InTag, TSubclassOf<UAnimInstance> InClass)
    {
        Span<(string name, object value)> @params = [
            ("InTag", InTag), 
            ("InClass", InClass)
        ];
        ProcessEvent(GetFunction("LinkAnimGraphByTag"), @params);
    }
    public void LinkAnimClassLayers(TSubclassOf<UAnimInstance> InClass)
    {
        Span<(string name, object value)> @params = [
            ("InClass", InClass)
        ];
        ProcessEvent(GetFunction("LinkAnimClassLayers"), @params);
    }
    public bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder)
    {
        Span<(string name, object value)> @params = [
            ("InSyncGroupName", InSyncGroupName), 
            ("PreviousMarker", PreviousMarker), 
            ("NextMarker", NextMarker), 
            ("bRespectMarkerOrder", bRespectMarkerOrder)
        ];
        return ProcessEvent<bool>(GetFunction("IsSyncGroupBetweenMarkers"), @params);
    }
    public bool IsPlayingSlotAnimation(UAnimSequenceBase* Asset, FName SlotNodeName)
    {
        Span<(string name, object value)> @params = [
            ("Asset", (IntPtr)Asset), 
            ("SlotNodeName", SlotNodeName)
        ];
        return ProcessEvent<bool>(GetFunction("IsPlayingSlotAnimation"), @params);
    }
    public bool IsAnyMontagePlaying()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsAnyMontagePlaying"), @params);
    }
    public bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName)
    {
        Span<(string name, object value)> @params = [
            ("SyncGroup", SyncGroup), 
            ("MarkerName", MarkerName)
        ];
        return ProcessEvent<bool>(GetFunction("HasMarkerBeenHitThisFrame"), @params);
    }
    public bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, ref float OutMarkerTime)
    {
        Span<(string name, object value)> @params = [
            ("SyncGroup", SyncGroup), 
            ("MarkerName", MarkerName), 
            ("OutMarkerTime", OutMarkerTime)
        ];
        return ProcessEvent<bool>(GetFunction("GetTimeToClosestMarker"), @params);
    }
    public FMarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName)
    {
        Span<(string name, object value)> @params = [
            ("InSyncGroupName", InSyncGroupName)
        ];
        return ProcessEvent<FMarkerSyncAnimPosition>(GetFunction("GetSyncGroupPosition"), @params);
    }
    public float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex)
    {
        Span<(string name, object value)> @params = [
            ("MachineIndex", MachineIndex), 
            ("StateIndex", StateIndex)
        ];
        return ProcessEvent<float>(GetFunction("GetRelevantAnimTimeRemainingFraction"), @params);
    }
    public float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex)
    {
        Span<(string name, object value)> @params = [
            ("MachineIndex", MachineIndex), 
            ("StateIndex", StateIndex)
        ];
        return ProcessEvent<float>(GetFunction("GetRelevantAnimTimeRemaining"), @params);
    }
    public float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex)
    {
        Span<(string name, object value)> @params = [
            ("MachineIndex", MachineIndex), 
            ("StateIndex", StateIndex)
        ];
        return ProcessEvent<float>(GetFunction("GetRelevantAnimTimeFraction"), @params);
    }
    public float GetRelevantAnimTime(int MachineIndex, int StateIndex)
    {
        Span<(string name, object value)> @params = [
            ("MachineIndex", MachineIndex), 
            ("StateIndex", StateIndex)
        ];
        return ProcessEvent<float>(GetFunction("GetRelevantAnimTime"), @params);
    }
    public float GetRelevantAnimLength(int MachineIndex, int StateIndex)
    {
        Span<(string name, object value)> @params = [
            ("MachineIndex", MachineIndex), 
            ("StateIndex", StateIndex)
        ];
        return ProcessEvent<float>(GetFunction("GetRelevantAnimLength"), @params);
    }
    public bool GetReceiveNotifiesFromLinkedInstances()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("GetReceiveNotifiesFromLinkedInstances"), @params);
    }
    public bool GetPropagateNotifiesToLinkedInstances()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("GetPropagateNotifiesToLinkedInstances"), @params);
    }
    public USkeletalMeshComponent* GetOwningComponent()
    {
        Span<(string name, object value)> @params = [
        ];
        return (USkeletalMeshComponent*)ProcessEvent<IntPtr>(GetFunction("GetOwningComponent"), @params);
    }
    public AActor* GetOwningActor()
    {
        Span<(string name, object value)> @params = [
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("GetOwningActor"), @params);
    }
    public void GetLinkedAnimLayerInstancesByGroup(FName InGroup, ref TArray<IntPtr> OutLinkedInstances)
    {
        Span<(string name, object value)> @params = [
            ("InGroup", InGroup), 
            ("OutLinkedInstances", OutLinkedInstances)
        ];
        ProcessEvent(GetFunction("GetLinkedAnimLayerInstancesByGroup"), @params);
    }
    public UAnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, TSubclassOf<UAnimInstance> InClass)
    {
        Span<(string name, object value)> @params = [
            ("InGroup", InGroup), 
            ("InClass", InClass)
        ];
        return (UAnimInstance*)ProcessEvent<IntPtr>(GetFunction("GetLinkedAnimLayerInstanceByGroupAndClass"), @params);
    }
    public UAnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup)
    {
        Span<(string name, object value)> @params = [
            ("InGroup", InGroup)
        ];
        return (UAnimInstance*)ProcessEvent<IntPtr>(GetFunction("GetLinkedAnimLayerInstanceByGroup"), @params);
    }
    public UAnimInstance* GetLinkedAnimLayerInstanceByClass(TSubclassOf<UAnimInstance> InClass)
    {
        Span<(string name, object value)> @params = [
            ("InClass", InClass)
        ];
        return (UAnimInstance*)ProcessEvent<IntPtr>(GetFunction("GetLinkedAnimLayerInstanceByClass"), @params);
    }
    public void GetLinkedAnimGraphInstancesByTag(FName InTag, ref TArray<IntPtr> OutLinkedInstances)
    {
        Span<(string name, object value)> @params = [
            ("InTag", InTag), 
            ("OutLinkedInstances", OutLinkedInstances)
        ];
        ProcessEvent(GetFunction("GetLinkedAnimGraphInstancesByTag"), @params);
    }
    public UAnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag)
    {
        Span<(string name, object value)> @params = [
            ("InTag", InTag)
        ];
        return (UAnimInstance*)ProcessEvent<IntPtr>(GetFunction("GetLinkedAnimGraphInstanceByTag"), @params);
    }
    public float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex)
    {
        Span<(string name, object value)> @params = [
            ("MachineIndex", MachineIndex), 
            ("TransitionIndex", TransitionIndex)
        ];
        return ProcessEvent<float>(GetFunction("GetInstanceTransitionTimeElapsedFraction"), @params);
    }
    public float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex)
    {
        Span<(string name, object value)> @params = [
            ("MachineIndex", MachineIndex), 
            ("TransitionIndex", TransitionIndex)
        ];
        return ProcessEvent<float>(GetFunction("GetInstanceTransitionTimeElapsed"), @params);
    }
    public float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex)
    {
        Span<(string name, object value)> @params = [
            ("MachineIndex", MachineIndex), 
            ("TransitionIndex", TransitionIndex)
        ];
        return ProcessEvent<float>(GetFunction("GetInstanceTransitionCrossfadeDuration"), @params);
    }
    public float GetInstanceStateWeight(int MachineIndex, int StateIndex)
    {
        Span<(string name, object value)> @params = [
            ("MachineIndex", MachineIndex), 
            ("StateIndex", StateIndex)
        ];
        return ProcessEvent<float>(GetFunction("GetInstanceStateWeight"), @params);
    }
    public float GetInstanceMachineWeight(int MachineIndex)
    {
        Span<(string name, object value)> @params = [
            ("MachineIndex", MachineIndex)
        ];
        return ProcessEvent<float>(GetFunction("GetInstanceMachineWeight"), @params);
    }
    public float GetInstanceCurrentStateElapsedTime(int MachineIndex)
    {
        Span<(string name, object value)> @params = [
            ("MachineIndex", MachineIndex)
        ];
        return ProcessEvent<float>(GetFunction("GetInstanceCurrentStateElapsedTime"), @params);
    }
    public float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex)
    {
        Span<(string name, object value)> @params = [
            ("AssetPlayerIndex", AssetPlayerIndex)
        ];
        return ProcessEvent<float>(GetFunction("GetInstanceAssetPlayerTimeFromEndFraction"), @params);
    }
    public float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex)
    {
        Span<(string name, object value)> @params = [
            ("AssetPlayerIndex", AssetPlayerIndex)
        ];
        return ProcessEvent<float>(GetFunction("GetInstanceAssetPlayerTimeFromEnd"), @params);
    }
    public float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex)
    {
        Span<(string name, object value)> @params = [
            ("AssetPlayerIndex", AssetPlayerIndex)
        ];
        return ProcessEvent<float>(GetFunction("GetInstanceAssetPlayerTimeFraction"), @params);
    }
    public float GetInstanceAssetPlayerTime(int AssetPlayerIndex)
    {
        Span<(string name, object value)> @params = [
            ("AssetPlayerIndex", AssetPlayerIndex)
        ];
        return ProcessEvent<float>(GetFunction("GetInstanceAssetPlayerTime"), @params);
    }
    public float GetInstanceAssetPlayerLength(int AssetPlayerIndex)
    {
        Span<(string name, object value)> @params = [
            ("AssetPlayerIndex", AssetPlayerIndex)
        ];
        return ProcessEvent<float>(GetFunction("GetInstanceAssetPlayerLength"), @params);
    }
    public float GetCurveValue(FName CurveName)
    {
        Span<(string name, object value)> @params = [
            ("CurveName", CurveName)
        ];
        return ProcessEvent<float>(GetFunction("GetCurveValue"), @params);
    }
    public FName GetCurrentStateName(int MachineIndex)
    {
        Span<(string name, object value)> @params = [
            ("MachineIndex", MachineIndex)
        ];
        return ProcessEvent<FName>(GetFunction("GetCurrentStateName"), @params);
    }
    public UAnimMontage* GetCurrentActiveMontage()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UAnimMontage*)ProcessEvent<IntPtr>(GetFunction("GetCurrentActiveMontage"), @params);
    }
    public void GetAllCurveNames(ref TArray<FName> OutNames)
    {
        Span<(string name, object value)> @params = [
            ("OutNames", OutNames)
        ];
        ProcessEvent(GetFunction("GetAllCurveNames"), @params);
    }
    public void GetActiveCurveNames(EAnimCurveType CurveType, ref TArray<FName> OutNames)
    {
        Span<(string name, object value)> @params = [
            ("CurveType", CurveType), 
            ("OutNames", OutNames)
        ];
        ProcessEvent(GetFunction("GetActiveCurveNames"), @params);
    }
    public void ClearMorphTargets()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClearMorphTargets"), @params);
    }
    public float CalculateDirection(ref FVector Velocity, ref FRotator BaseRotation)
    {
        Span<(string name, object value)> @params = [
            ("Velocity", Velocity), 
            ("BaseRotation", BaseRotation)
        ];
        return ProcessEvent<float>(GetFunction("CalculateDirection"), @params);
    }
    public void BlueprintUpdateAnimation(float DeltaTimeX)
    {
        Span<(string name, object value)> @params = [
            ("DeltaTimeX", DeltaTimeX)
        ];
        ProcessEvent(GetFunction("BlueprintUpdateAnimation"), @params);
    }
    public void BlueprintPostEvaluateAnimation()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("BlueprintPostEvaluateAnimation"), @params);
    }
    public void BlueprintLinkedAnimationLayersInitialized()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("BlueprintLinkedAnimationLayersInitialized"), @params);
    }
    public void BlueprintInitializeAnimation()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("BlueprintInitializeAnimation"), @params);
    }
    public void BlueprintBeginPlay()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("BlueprintBeginPlay"), @params);
    }
}

public unsafe class DataAsset : ObjectBase<UDataAsset>
{
    public DataAsset(IntPtr pointer) : base(pointer) {}
}

public unsafe class Pawn : ObjectBase<APawn>
{
    public Pawn(IntPtr pointer) : base(pointer) {}
    public void SpawnDefaultController()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("SpawnDefaultController"), @params);
    }
    public void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue), 
            ("bForceUpdate", bForceUpdate)
        ];
        ProcessEvent(GetFunction("SetCanAffectNavigationGeneration"), @params);
    }
    public void ReceiveUnpossessed(AController* OldController)
    {
        Span<(string name, object value)> @params = [
            ("OldController", (IntPtr)OldController)
        ];
        ProcessEvent(GetFunction("ReceiveUnpossessed"), @params);
    }
    public void ReceivePossessed(AController* NewController)
    {
        Span<(string name, object value)> @params = [
            ("NewController", (IntPtr)NewController)
        ];
        ProcessEvent(GetFunction("ReceivePossessed"), @params);
    }
    public void PawnMakeNoise(float Loudness, FVector NoiseLocation, bool bUseNoiseMakerLocation, AActor* NoiseMaker)
    {
        Span<(string name, object value)> @params = [
            ("Loudness", Loudness), 
            ("NoiseLocation", NoiseLocation), 
            ("bUseNoiseMakerLocation", bUseNoiseMakerLocation), 
            ("NoiseMaker", (IntPtr)NoiseMaker)
        ];
        ProcessEvent(GetFunction("PawnMakeNoise"), @params);
    }
    public void OnRep_PlayerState()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_PlayerState"), @params);
    }
    public void OnRep_Controller()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_Controller"), @params);
    }
    public void LaunchPawn(FVector LaunchVelocity, bool bXYOverride, bool bZOverride)
    {
        Span<(string name, object value)> @params = [
            ("LaunchVelocity", LaunchVelocity), 
            ("bXYOverride", bXYOverride), 
            ("bZOverride", bZOverride)
        ];
        ProcessEvent(GetFunction("LaunchPawn"), @params);
    }
    public FVector K2_GetMovementInputVector()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("K2_GetMovementInputVector"), @params);
    }
    public bool IsPlayerControlled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsPlayerControlled"), @params);
    }
    public bool IsPawnControlled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsPawnControlled"), @params);
    }
    public bool IsMoveInputIgnored()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsMoveInputIgnored"), @params);
    }
    public bool IsLocallyControlled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsLocallyControlled"), @params);
    }
    public bool IsControlled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsControlled"), @params);
    }
    public bool IsBotControlled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsBotControlled"), @params);
    }
    public FVector GetPendingMovementInputVector()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetPendingMovementInputVector"), @params);
    }
    public FVector GetNavAgentLocation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetNavAgentLocation"), @params);
    }
    public UPawnMovementComponent* GetMovementComponent()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UPawnMovementComponent*)ProcessEvent<IntPtr>(GetFunction("GetMovementComponent"), @params);
    }
    public AActor* GetMovementBaseActor(APawn* Pawn)
    {
        Span<(string name, object value)> @params = [
            ("Pawn", (IntPtr)Pawn)
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("GetMovementBaseActor"), @params);
    }
    public FVector GetLastMovementInputVector()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetLastMovementInputVector"), @params);
    }
    public FRotator GetControlRotation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FRotator>(GetFunction("GetControlRotation"), @params);
    }
    public AController* GetController()
    {
        Span<(string name, object value)> @params = [
        ];
        return (AController*)ProcessEvent<IntPtr>(GetFunction("GetController"), @params);
    }
    public FRotator GetBaseAimRotation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FRotator>(GetFunction("GetBaseAimRotation"), @params);
    }
    public void DetachFromControllerPendingDestroy()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("DetachFromControllerPendingDestroy"), @params);
    }
    public FVector ConsumeMovementInputVector()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("ConsumeMovementInputVector"), @params);
    }
    public void AddMovementInput(FVector WorldDirection, float ScaleValue, bool bForce)
    {
        Span<(string name, object value)> @params = [
            ("WorldDirection", WorldDirection), 
            ("ScaleValue", ScaleValue), 
            ("bForce", bForce)
        ];
        ProcessEvent(GetFunction("AddMovementInput"), @params);
    }
    public void AddControllerYawInput(float Val)
    {
        Span<(string name, object value)> @params = [
            ("Val", Val)
        ];
        ProcessEvent(GetFunction("AddControllerYawInput"), @params);
    }
    public void AddControllerRollInput(float Val)
    {
        Span<(string name, object value)> @params = [
            ("Val", Val)
        ];
        ProcessEvent(GetFunction("AddControllerRollInput"), @params);
    }
    public void AddControllerPitchInput(float Val)
    {
        Span<(string name, object value)> @params = [
            ("Val", Val)
        ];
        ProcessEvent(GetFunction("AddControllerPitchInput"), @params);
    }
}

public unsafe class Character : ObjectBase<ACharacter>
{
    public Character(IntPtr pointer) : base(pointer) {}
    public void UnCrouch(bool bClientSimulation)
    {
        Span<(string name, object value)> @params = [
            ("bClientSimulation", bClientSimulation)
        ];
        ProcessEvent(GetFunction("UnCrouch"), @params);
    }
    public void StopJumping()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("StopJumping"), @params);
    }
    public void StopAnimMontage(UAnimMontage* AnimMontage)
    {
        Span<(string name, object value)> @params = [
            ("AnimMontage", (IntPtr)AnimMontage)
        ];
        ProcessEvent(GetFunction("StopAnimMontage"), @params);
    }
    public void ServerMovePacked(ref FCharacterServerMovePackedBits PackedBits)
    {
        Span<(string name, object value)> @params = [
            ("PackedBits", PackedBits)
        ];
        ProcessEvent(GetFunction("ServerMovePacked"), @params);
    }
    public void ServerMoveOld(float OldTimeStamp, FVector_NetQuantize10 OldAccel, byte OldMoveFlags)
    {
        Span<(string name, object value)> @params = [
            ("OldTimeStamp", OldTimeStamp), 
            ("OldAccel", OldAccel), 
            ("OldMoveFlags", OldMoveFlags)
        ];
        ProcessEvent(GetFunction("ServerMoveOld"), @params);
    }
    public void ServerMoveNoBase(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint View, byte ClientMovementMode)
    {
        Span<(string name, object value)> @params = [
            ("Timestamp", Timestamp), 
            ("InAccel", InAccel), 
            ("ClientLoc", ClientLoc), 
            ("CompressedMoveFlags", CompressedMoveFlags), 
            ("ClientRoll", ClientRoll), 
            ("View", View), 
            ("ClientMovementMode", ClientMovementMode)
        ];
        ProcessEvent(GetFunction("ServerMoveNoBase"), @params);
    }
    public void ServerMoveDualNoBase(float TimeStamp0, FVector_NetQuantize10 InAccel0, byte PendingFlags, uint View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint View, byte ClientMovementMode)
    {
        Span<(string name, object value)> @params = [
            ("TimeStamp0", TimeStamp0), 
            ("InAccel0", InAccel0), 
            ("PendingFlags", PendingFlags), 
            ("View0", View0), 
            ("Timestamp", Timestamp), 
            ("InAccel", InAccel), 
            ("ClientLoc", ClientLoc), 
            ("NewFlags", NewFlags), 
            ("ClientRoll", ClientRoll), 
            ("View", View), 
            ("ClientMovementMode", ClientMovementMode)
        ];
        ProcessEvent(GetFunction("ServerMoveDualNoBase"), @params);
    }
    public void ServerMoveDualHybridRootMotion(float TimeStamp0, FVector_NetQuantize10 InAccel0, byte PendingFlags, uint View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode)
    {
        Span<(string name, object value)> @params = [
            ("TimeStamp0", TimeStamp0), 
            ("InAccel0", InAccel0), 
            ("PendingFlags", PendingFlags), 
            ("View0", View0), 
            ("Timestamp", Timestamp), 
            ("InAccel", InAccel), 
            ("ClientLoc", ClientLoc), 
            ("NewFlags", NewFlags), 
            ("ClientRoll", ClientRoll), 
            ("View", View), 
            ("ClientMovementBase", (IntPtr)ClientMovementBase), 
            ("ClientBaseBoneName", ClientBaseBoneName), 
            ("ClientMovementMode", ClientMovementMode)
        ];
        ProcessEvent(GetFunction("ServerMoveDualHybridRootMotion"), @params);
    }
    public void ServerMoveDual(float TimeStamp0, FVector_NetQuantize10 InAccel0, byte PendingFlags, uint View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode)
    {
        Span<(string name, object value)> @params = [
            ("TimeStamp0", TimeStamp0), 
            ("InAccel0", InAccel0), 
            ("PendingFlags", PendingFlags), 
            ("View0", View0), 
            ("Timestamp", Timestamp), 
            ("InAccel", InAccel), 
            ("ClientLoc", ClientLoc), 
            ("NewFlags", NewFlags), 
            ("ClientRoll", ClientRoll), 
            ("View", View), 
            ("ClientMovementBase", (IntPtr)ClientMovementBase), 
            ("ClientBaseBoneName", ClientBaseBoneName), 
            ("ClientMovementMode", ClientMovementMode)
        ];
        ProcessEvent(GetFunction("ServerMoveDual"), @params);
    }
    public void ServerMove(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode)
    {
        Span<(string name, object value)> @params = [
            ("Timestamp", Timestamp), 
            ("InAccel", InAccel), 
            ("ClientLoc", ClientLoc), 
            ("CompressedMoveFlags", CompressedMoveFlags), 
            ("ClientRoll", ClientRoll), 
            ("View", View), 
            ("ClientMovementBase", (IntPtr)ClientMovementBase), 
            ("ClientBaseBoneName", ClientBaseBoneName), 
            ("ClientMovementMode", ClientMovementMode)
        ];
        ProcessEvent(GetFunction("ServerMove"), @params);
    }
    public void RootMotionDebugClientPrintOnScreen(FString inString)
    {
        Span<(string name, object value)> @params = [
            ("inString", inString)
        ];
        ProcessEvent(GetFunction("RootMotionDebugClientPrintOnScreen"), @params);
    }
    public float PlayAnimMontage(UAnimMontage* AnimMontage, float InPlayRate, FName StartSectionName)
    {
        Span<(string name, object value)> @params = [
            ("AnimMontage", (IntPtr)AnimMontage), 
            ("InPlayRate", InPlayRate), 
            ("StartSectionName", StartSectionName)
        ];
        return ProcessEvent<float>(GetFunction("PlayAnimMontage"), @params);
    }
    public void OnWalkingOffLedge(ref FVector PreviousFloorImpactNormal, ref FVector PreviousFloorContactNormal, ref FVector PreviousLocation, float TimeDelta)
    {
        Span<(string name, object value)> @params = [
            ("PreviousFloorImpactNormal", PreviousFloorImpactNormal), 
            ("PreviousFloorContactNormal", PreviousFloorContactNormal), 
            ("PreviousLocation", PreviousLocation), 
            ("TimeDelta", TimeDelta)
        ];
        ProcessEvent(GetFunction("OnWalkingOffLedge"), @params);
    }
    public void OnRep_RootMotion()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_RootMotion"), @params);
    }
    public void OnRep_ReplicatedBasedMovement()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_ReplicatedBasedMovement"), @params);
    }
    public void OnRep_ReplayLastTransformUpdateTimeStamp()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_ReplayLastTransformUpdateTimeStamp"), @params);
    }
    public void OnRep_IsCrouched()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_IsCrouched"), @params);
    }
    public void OnLaunched(FVector LaunchVelocity, bool bXYOverride, bool bZOverride)
    {
        Span<(string name, object value)> @params = [
            ("LaunchVelocity", LaunchVelocity), 
            ("bXYOverride", bXYOverride), 
            ("bZOverride", bZOverride)
        ];
        ProcessEvent(GetFunction("OnLaunched"), @params);
    }
    public void OnLanded(ref FHitResult Hit)
    {
        Span<(string name, object value)> @params = [
            ("Hit", Hit)
        ];
        ProcessEvent(GetFunction("OnLanded"), @params);
    }
    public void OnJumped()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnJumped"), @params);
    }
    public void LaunchCharacter(FVector LaunchVelocity, bool bXYOverride, bool bZOverride)
    {
        Span<(string name, object value)> @params = [
            ("LaunchVelocity", LaunchVelocity), 
            ("bXYOverride", bXYOverride), 
            ("bZOverride", bZOverride)
        ];
        ProcessEvent(GetFunction("LaunchCharacter"), @params);
    }
    public void K2_UpdateCustomMovement(float DeltaTime)
    {
        Span<(string name, object value)> @params = [
            ("DeltaTime", DeltaTime)
        ];
        ProcessEvent(GetFunction("K2_UpdateCustomMovement"), @params);
    }
    public void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
    {
        Span<(string name, object value)> @params = [
            ("HalfHeightAdjust", HalfHeightAdjust), 
            ("ScaledHalfHeightAdjust", ScaledHalfHeightAdjust)
        ];
        ProcessEvent(GetFunction("K2_OnStartCrouch"), @params);
    }
    public void K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, byte PrevCustomMode, byte NewCustomMode)
    {
        Span<(string name, object value)> @params = [
            ("PrevMovementMode", PrevMovementMode), 
            ("NewMovementMode", NewMovementMode), 
            ("PrevCustomMode", PrevCustomMode), 
            ("NewCustomMode", NewCustomMode)
        ];
        ProcessEvent(GetFunction("K2_OnMovementModeChanged"), @params);
    }
    public void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
    {
        Span<(string name, object value)> @params = [
            ("HalfHeightAdjust", HalfHeightAdjust), 
            ("ScaledHalfHeightAdjust", ScaledHalfHeightAdjust)
        ];
        ProcessEvent(GetFunction("K2_OnEndCrouch"), @params);
    }
    public void Jump()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Jump"), @params);
    }
    public bool IsPlayingRootMotion()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsPlayingRootMotion"), @params);
    }
    public bool IsPlayingNetworkedRootMotionMontage()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsPlayingNetworkedRootMotionMontage"), @params);
    }
    public bool IsJumpProvidingForce()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsJumpProvidingForce"), @params);
    }
    public bool HasAnyRootMotion()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("HasAnyRootMotion"), @params);
    }
    public UAnimMontage* GetCurrentMontage()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UAnimMontage*)ProcessEvent<IntPtr>(GetFunction("GetCurrentMontage"), @params);
    }
    public FVector GetBaseTranslationOffset()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetBaseTranslationOffset"), @params);
    }
    public FRotator GetBaseRotationOffsetRotator()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FRotator>(GetFunction("GetBaseRotationOffsetRotator"), @params);
    }
    public float GetAnimRootMotionTranslationScale()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetAnimRootMotionTranslationScale"), @params);
    }
    public void Crouch(bool bClientSimulation)
    {
        Span<(string name, object value)> @params = [
            ("bClientSimulation", bClientSimulation)
        ];
        ProcessEvent(GetFunction("Crouch"), @params);
    }
    public void ClientVeryShortAdjustPosition(float Timestamp, FVector NewLoc, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode)
    {
        Span<(string name, object value)> @params = [
            ("Timestamp", Timestamp), 
            ("NewLoc", NewLoc), 
            ("NewBase", (IntPtr)NewBase), 
            ("NewBaseBoneName", NewBaseBoneName), 
            ("bHasBase", bHasBase), 
            ("bBaseRelativePosition", bBaseRelativePosition), 
            ("ServerMovementMode", ServerMovementMode)
        ];
        ProcessEvent(GetFunction("ClientVeryShortAdjustPosition"), @params);
    }
    public void ClientMoveResponsePacked(ref FCharacterMoveResponsePackedBits PackedBits)
    {
        Span<(string name, object value)> @params = [
            ("PackedBits", PackedBits)
        ];
        ProcessEvent(GetFunction("ClientMoveResponsePacked"), @params);
    }
    public void ClientCheatWalk()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClientCheatWalk"), @params);
    }
    public void ClientCheatGhost()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClientCheatGhost"), @params);
    }
    public void ClientCheatFly()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClientCheatFly"), @params);
    }
    public void ClientAdjustRootMotionSourcePosition(float Timestamp, FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode)
    {
        Span<(string name, object value)> @params = [
            ("Timestamp", Timestamp), 
            ("ServerRootMotion", ServerRootMotion), 
            ("bHasAnimRootMotion", bHasAnimRootMotion), 
            ("ServerMontageTrackPosition", ServerMontageTrackPosition), 
            ("ServerLoc", ServerLoc), 
            ("ServerRotation", ServerRotation), 
            ("ServerVelZ", ServerVelZ), 
            ("ServerBase", (IntPtr)ServerBase), 
            ("ServerBoneName", ServerBoneName), 
            ("bHasBase", bHasBase), 
            ("bBaseRelativePosition", bBaseRelativePosition), 
            ("ServerMovementMode", ServerMovementMode)
        ];
        ProcessEvent(GetFunction("ClientAdjustRootMotionSourcePosition"), @params);
    }
    public void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode)
    {
        Span<(string name, object value)> @params = [
            ("Timestamp", Timestamp), 
            ("ServerMontageTrackPosition", ServerMontageTrackPosition), 
            ("ServerLoc", ServerLoc), 
            ("ServerRotation", ServerRotation), 
            ("ServerVelZ", ServerVelZ), 
            ("ServerBase", (IntPtr)ServerBase), 
            ("ServerBoneName", ServerBoneName), 
            ("bHasBase", bHasBase), 
            ("bBaseRelativePosition", bBaseRelativePosition), 
            ("ServerMovementMode", ServerMovementMode)
        ];
        ProcessEvent(GetFunction("ClientAdjustRootMotionPosition"), @params);
    }
    public void ClientAdjustPosition(float Timestamp, FVector NewLoc, FVector NewVel, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode)
    {
        Span<(string name, object value)> @params = [
            ("Timestamp", Timestamp), 
            ("NewLoc", NewLoc), 
            ("NewVel", NewVel), 
            ("NewBase", (IntPtr)NewBase), 
            ("NewBaseBoneName", NewBaseBoneName), 
            ("bHasBase", bHasBase), 
            ("bBaseRelativePosition", bBaseRelativePosition), 
            ("ServerMovementMode", ServerMovementMode)
        ];
        ProcessEvent(GetFunction("ClientAdjustPosition"), @params);
    }
    public void ClientAckGoodMove(float Timestamp)
    {
        Span<(string name, object value)> @params = [
            ("Timestamp", Timestamp)
        ];
        ProcessEvent(GetFunction("ClientAckGoodMove"), @params);
    }
    public bool CanJumpInternal()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("CanJumpInternal"), @params);
    }
    public bool CanJump()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("CanJump"), @params);
    }
    public bool CanCrouch()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("CanCrouch"), @params);
    }
    public void CacheInitialMeshOffset(FVector MeshRelativeLocation, FRotator MeshRelativeRotation)
    {
        Span<(string name, object value)> @params = [
            ("MeshRelativeLocation", MeshRelativeLocation), 
            ("MeshRelativeRotation", MeshRelativeRotation)
        ];
        ProcessEvent(GetFunction("CacheInitialMeshOffset"), @params);
    }
}

public unsafe class Controller : ObjectBase<AController>
{
    public Controller(IntPtr pointer) : base(pointer) {}
    public void UnPossess()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("UnPossess"), @params);
    }
    public void StopMovement()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("StopMovement"), @params);
    }
    public void SetInitialLocationAndRotation(ref FVector NewLocation, ref FRotator NewRotation)
    {
        Span<(string name, object value)> @params = [
            ("NewLocation", NewLocation), 
            ("NewRotation", NewRotation)
        ];
        ProcessEvent(GetFunction("SetInitialLocationAndRotation"), @params);
    }
    public void SetIgnoreMoveInput(bool bNewMoveInput)
    {
        Span<(string name, object value)> @params = [
            ("bNewMoveInput", bNewMoveInput)
        ];
        ProcessEvent(GetFunction("SetIgnoreMoveInput"), @params);
    }
    public void SetIgnoreLookInput(bool bNewLookInput)
    {
        Span<(string name, object value)> @params = [
            ("bNewLookInput", bNewLookInput)
        ];
        ProcessEvent(GetFunction("SetIgnoreLookInput"), @params);
    }
    public void SetControlRotation(ref FRotator NewRotation)
    {
        Span<(string name, object value)> @params = [
            ("NewRotation", NewRotation)
        ];
        ProcessEvent(GetFunction("SetControlRotation"), @params);
    }
    public void ResetIgnoreMoveInput()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ResetIgnoreMoveInput"), @params);
    }
    public void ResetIgnoreLookInput()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ResetIgnoreLookInput"), @params);
    }
    public void ResetIgnoreInputFlags()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ResetIgnoreInputFlags"), @params);
    }
    public void ReceiveUnPossess(APawn* UnpossessedPawn)
    {
        Span<(string name, object value)> @params = [
            ("UnpossessedPawn", (IntPtr)UnpossessedPawn)
        ];
        ProcessEvent(GetFunction("ReceiveUnPossess"), @params);
    }
    public void ReceivePossess(APawn* PossessedPawn)
    {
        Span<(string name, object value)> @params = [
            ("PossessedPawn", (IntPtr)PossessedPawn)
        ];
        ProcessEvent(GetFunction("ReceivePossess"), @params);
    }
    public void ReceiveInstigatedAnyDamage(float Damage, UDamageType* DamageType, AActor* DamagedActor, AActor* DamageCauser)
    {
        Span<(string name, object value)> @params = [
            ("Damage", Damage), 
            ("DamageType", (IntPtr)DamageType), 
            ("DamagedActor", (IntPtr)DamagedActor), 
            ("DamageCauser", (IntPtr)DamageCauser)
        ];
        ProcessEvent(GetFunction("ReceiveInstigatedAnyDamage"), @params);
    }
    public void Possess(APawn* InPawn)
    {
        Span<(string name, object value)> @params = [
            ("InPawn", (IntPtr)InPawn)
        ];
        ProcessEvent(GetFunction("Possess"), @params);
    }
    public void OnRep_PlayerState()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_PlayerState"), @params);
    }
    public void OnRep_Pawn()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_Pawn"), @params);
    }
    public bool LineOfSightTo(AActor* Other, FVector ViewPoint, bool bAlternateChecks)
    {
        Span<(string name, object value)> @params = [
            ("Other", (IntPtr)Other), 
            ("ViewPoint", ViewPoint), 
            ("bAlternateChecks", bAlternateChecks)
        ];
        return ProcessEvent<bool>(GetFunction("LineOfSightTo"), @params);
    }
    public APawn* K2_GetPawn()
    {
        Span<(string name, object value)> @params = [
        ];
        return (APawn*)ProcessEvent<IntPtr>(GetFunction("K2_GetPawn"), @params);
    }
    public bool IsPlayerController()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsPlayerController"), @params);
    }
    public bool IsMoveInputIgnored()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsMoveInputIgnored"), @params);
    }
    public bool IsLookInputIgnored()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsLookInputIgnored"), @params);
    }
    public bool IsLocalPlayerController()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsLocalPlayerController"), @params);
    }
    public bool IsLocalController()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsLocalController"), @params);
    }
    public AActor* GetViewTarget()
    {
        Span<(string name, object value)> @params = [
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("GetViewTarget"), @params);
    }
    public FRotator GetDesiredRotation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FRotator>(GetFunction("GetDesiredRotation"), @params);
    }
    public FRotator GetControlRotation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FRotator>(GetFunction("GetControlRotation"), @params);
    }
    public void ClientSetRotation(FRotator NewRotation, bool bResetCamera)
    {
        Span<(string name, object value)> @params = [
            ("NewRotation", NewRotation), 
            ("bResetCamera", bResetCamera)
        ];
        ProcessEvent(GetFunction("ClientSetRotation"), @params);
    }
    public void ClientSetLocation(FVector NewLocation, FRotator NewRotation)
    {
        Span<(string name, object value)> @params = [
            ("NewLocation", NewLocation), 
            ("NewRotation", NewRotation)
        ];
        ProcessEvent(GetFunction("ClientSetLocation"), @params);
    }
    public APlayerController* CastToPlayerController()
    {
        Span<(string name, object value)> @params = [
        ];
        return (APlayerController*)ProcessEvent<IntPtr>(GetFunction("CastToPlayerController"), @params);
    }
}

public unsafe class TargetPoint : ObjectBase<ATargetPoint>
{
    public TargetPoint(IntPtr pointer) : base(pointer) {}}

public unsafe class PlayerController : ObjectBase<APlayerController>
{
    public PlayerController(IntPtr pointer) : base(pointer) {}
    public bool WasInputKeyJustReleased(FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("WasInputKeyJustReleased"), @params);
    }
    public bool WasInputKeyJustPressed(FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("WasInputKeyJustPressed"), @params);
    }
    public void ToggleSpeaking(bool bInSpeaking)
    {
        Span<(string name, object value)> @params = [
            ("bInSpeaking", bInSpeaking)
        ];
        ProcessEvent(GetFunction("ToggleSpeaking"), @params);
    }
    public void TestServerLevelVisibilityChange(FName PackageName, FName Filename)
    {
        Span<(string name, object value)> @params = [
            ("PackageName", PackageName), 
            ("Filename", Filename)
        ];
        ProcessEvent(GetFunction("TestServerLevelVisibilityChange"), @params);
    }
    public void SwitchLevel(FString URL)
    {
        Span<(string name, object value)> @params = [
            ("URL", URL)
        ];
        ProcessEvent(GetFunction("SwitchLevel"), @params);
    }
    public void StopHapticEffect(EControllerHand Hand)
    {
        Span<(string name, object value)> @params = [
            ("Hand", Hand)
        ];
        ProcessEvent(GetFunction("StopHapticEffect"), @params);
    }
    public void StartFire(byte FireModeNum)
    {
        Span<(string name, object value)> @params = [
            ("FireModeNum", FireModeNum)
        ];
        ProcessEvent(GetFunction("StartFire"), @params);
    }
    public void SetVirtualJoystickVisibility(bool bVisible)
    {
        Span<(string name, object value)> @params = [
            ("bVisible", bVisible)
        ];
        ProcessEvent(GetFunction("SetVirtualJoystickVisibility"), @params);
    }
    public void SetViewTargetWithBlend(AActor* NewViewTarget, float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing)
    {
        Span<(string name, object value)> @params = [
            ("NewViewTarget", (IntPtr)NewViewTarget), 
            ("BlendTime", BlendTime), 
            ("BlendFunc", BlendFunc), 
            ("BlendExp", BlendExp), 
            ("bLockOutgoing", bLockOutgoing)
        ];
        ProcessEvent(GetFunction("SetViewTargetWithBlend"), @params);
    }
    public void SetName(FString S)
    {
        Span<(string name, object value)> @params = [
            ("S", S)
        ];
        ProcessEvent(GetFunction("SetName"), @params);
    }
    public void SetMouseLocation(int X, int Y)
    {
        Span<(string name, object value)> @params = [
            ("X", X), 
            ("Y", Y)
        ];
        ProcessEvent(GetFunction("SetMouseLocation"), @params);
    }
    public void SetMouseCursorWidget(EMouseCursor Cursor, UUserWidget* CursorWidget)
    {
        Span<(string name, object value)> @params = [
            ("Cursor", Cursor), 
            ("CursorWidget", (IntPtr)CursorWidget)
        ];
        ProcessEvent(GetFunction("SetMouseCursorWidget"), @params);
    }
    public void SetHapticsByValue(float Frequency, float Amplitude, EControllerHand Hand)
    {
        Span<(string name, object value)> @params = [
            ("Frequency", Frequency), 
            ("Amplitude", Amplitude), 
            ("Hand", Hand)
        ];
        ProcessEvent(GetFunction("SetHapticsByValue"), @params);
    }
    public void SetDisableHaptics(bool bNewDisabled)
    {
        Span<(string name, object value)> @params = [
            ("bNewDisabled", bNewDisabled)
        ];
        ProcessEvent(GetFunction("SetDisableHaptics"), @params);
    }
    public void SetControllerLightColor(FColor Color)
    {
        Span<(string name, object value)> @params = [
            ("Color", Color)
        ];
        ProcessEvent(GetFunction("SetControllerLightColor"), @params);
    }
    public void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)
    {
        Span<(string name, object value)> @params = [
            ("bInCinematicMode", bInCinematicMode), 
            ("bHidePlayer", bHidePlayer), 
            ("bAffectsHUD", bAffectsHUD), 
            ("bAffectsMovement", bAffectsMovement), 
            ("bAffectsTurning", bAffectsTurning)
        ];
        ProcessEvent(GetFunction("SetCinematicMode"), @params);
    }
    public void SetAudioListenerOverride(USceneComponent* AttachToComponent, FVector Location, FRotator Rotation)
    {
        Span<(string name, object value)> @params = [
            ("AttachToComponent", (IntPtr)AttachToComponent), 
            ("Location", Location), 
            ("Rotation", Rotation)
        ];
        ProcessEvent(GetFunction("SetAudioListenerOverride"), @params);
    }
    public void SetAudioListenerAttenuationOverride(USceneComponent* AttachToComponent, FVector AttenuationLocationOVerride)
    {
        Span<(string name, object value)> @params = [
            ("AttachToComponent", (IntPtr)AttachToComponent), 
            ("AttenuationLocationOVerride", AttenuationLocationOVerride)
        ];
        ProcessEvent(GetFunction("SetAudioListenerAttenuationOverride"), @params);
    }
    public void ServerViewSelf(FViewTargetTransitionParams TransitionParams)
    {
        Span<(string name, object value)> @params = [
            ("TransitionParams", TransitionParams)
        ];
        ProcessEvent(GetFunction("ServerViewSelf"), @params);
    }
    public void ServerViewPrevPlayer()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ServerViewPrevPlayer"), @params);
    }
    public void ServerViewNextPlayer()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ServerViewNextPlayer"), @params);
    }
    public void ServerVerifyViewTarget()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ServerVerifyViewTarget"), @params);
    }
    public void ServerUpdateMultipleLevelsVisibility(ref TArray<FUpdateLevelVisibilityLevelInfo> LevelVisibilities)
    {
        Span<(string name, object value)> @params = [
            ("LevelVisibilities", LevelVisibilities)
        ];
        ProcessEvent(GetFunction("ServerUpdateMultipleLevelsVisibility"), @params);
    }
    public void ServerUpdateLevelVisibility(ref FUpdateLevelVisibilityLevelInfo LevelVisibility)
    {
        Span<(string name, object value)> @params = [
            ("LevelVisibility", LevelVisibility)
        ];
        ProcessEvent(GetFunction("ServerUpdateLevelVisibility"), @params);
    }
    public void ServerUpdateCamera(FVector_NetQuantize CamLoc, int CamPitchAndYaw)
    {
        Span<(string name, object value)> @params = [
            ("CamLoc", CamLoc), 
            ("CamPitchAndYaw", CamPitchAndYaw)
        ];
        ProcessEvent(GetFunction("ServerUpdateCamera"), @params);
    }
    public void ServerUnmutePlayer(FUniqueNetIdRepl PlayerId)
    {
        Span<(string name, object value)> @params = [
            ("PlayerId", PlayerId)
        ];
        ProcessEvent(GetFunction("ServerUnmutePlayer"), @params);
    }
    public void ServerToggleAILogging()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ServerToggleAILogging"), @params);
    }
    public void ServerShortTimeout()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ServerShortTimeout"), @params);
    }
    public void ServerSetSpectatorWaiting(bool bWaiting)
    {
        Span<(string name, object value)> @params = [
            ("bWaiting", bWaiting)
        ];
        ProcessEvent(GetFunction("ServerSetSpectatorWaiting"), @params);
    }
    public void ServerSetSpectatorLocation(FVector NewLoc, FRotator NewRot)
    {
        Span<(string name, object value)> @params = [
            ("NewLoc", NewLoc), 
            ("NewRot", NewRot)
        ];
        ProcessEvent(GetFunction("ServerSetSpectatorLocation"), @params);
    }
    public void ServerRestartPlayer()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ServerRestartPlayer"), @params);
    }
    public void ServerPause()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ServerPause"), @params);
    }
    public void ServerNotifyLoadedWorld(FName WorldPackageName)
    {
        Span<(string name, object value)> @params = [
            ("WorldPackageName", WorldPackageName)
        ];
        ProcessEvent(GetFunction("ServerNotifyLoadedWorld"), @params);
    }
    public void ServerMutePlayer(FUniqueNetIdRepl PlayerId)
    {
        Span<(string name, object value)> @params = [
            ("PlayerId", PlayerId)
        ];
        ProcessEvent(GetFunction("ServerMutePlayer"), @params);
    }
    public void ServerExecRPC(FString Msg)
    {
        Span<(string name, object value)> @params = [
            ("Msg", Msg)
        ];
        ProcessEvent(GetFunction("ServerExecRPC"), @params);
    }
    public void ServerExec(FString Msg)
    {
        Span<(string name, object value)> @params = [
            ("Msg", Msg)
        ];
        ProcessEvent(GetFunction("ServerExec"), @params);
    }
    public void ServerCheckClientPossessionReliable()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ServerCheckClientPossessionReliable"), @params);
    }
    public void ServerCheckClientPossession()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ServerCheckClientPossession"), @params);
    }
    public void ServerChangeName(FString S)
    {
        Span<(string name, object value)> @params = [
            ("S", S)
        ];
        ProcessEvent(GetFunction("ServerChangeName"), @params);
    }
    public void ServerCamera(FName NewMode)
    {
        Span<(string name, object value)> @params = [
            ("NewMode", NewMode)
        ];
        ProcessEvent(GetFunction("ServerCamera"), @params);
    }
    public void ServerAcknowledgePossession(APawn* P)
    {
        Span<(string name, object value)> @params = [
            ("P", (IntPtr)P)
        ];
        ProcessEvent(GetFunction("ServerAcknowledgePossession"), @params);
    }
    public void SendToConsole(FString Command)
    {
        Span<(string name, object value)> @params = [
            ("Command", Command)
        ];
        ProcessEvent(GetFunction("SendToConsole"), @params);
    }
    public void RestartLevel()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("RestartLevel"), @params);
    }
    public void ResetControllerLightColor()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ResetControllerLightColor"), @params);
    }
    public bool ProjectWorldLocationToScreen(FVector WorldLocation, ref FVector2D ScreenLocation, bool bPlayerViewportRelative)
    {
        Span<(string name, object value)> @params = [
            ("WorldLocation", WorldLocation), 
            ("ScreenLocation", ScreenLocation), 
            ("bPlayerViewportRelative", bPlayerViewportRelative)
        ];
        return ProcessEvent<bool>(GetFunction("ProjectWorldLocationToScreen"), @params);
    }
    public void PlayHapticEffect(UHapticFeedbackEffect_Base* HapticEffect, EControllerHand Hand, float Scale, bool bLoop)
    {
        Span<(string name, object value)> @params = [
            ("HapticEffect", (IntPtr)HapticEffect), 
            ("Hand", Hand), 
            ("Scale", Scale), 
            ("bLoop", bLoop)
        ];
        ProcessEvent(GetFunction("PlayHapticEffect"), @params);
    }
    public void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, EDynamicForceFeedbackAction Action, FLatentActionInfo LatentInfo)
    {
        Span<(string name, object value)> @params = [
            ("Intensity", Intensity), 
            ("Duration", Duration), 
            ("bAffectsLeftLarge", bAffectsLeftLarge), 
            ("bAffectsLeftSmall", bAffectsLeftSmall), 
            ("bAffectsRightLarge", bAffectsRightLarge), 
            ("bAffectsRightSmall", bAffectsRightSmall), 
            ("Action", Action), 
            ("LatentInfo", LatentInfo)
        ];
        ProcessEvent(GetFunction("PlayDynamicForceFeedback"), @params);
    }
    public void Pause()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Pause"), @params);
    }
    public void OnServerStartedVisualLogger(bool bIsLogging)
    {
        Span<(string name, object value)> @params = [
            ("bIsLogging", bIsLogging)
        ];
        ProcessEvent(GetFunction("OnServerStartedVisualLogger"), @params);
    }
    public void LocalTravel(FString URL)
    {
        Span<(string name, object value)> @params = [
            ("URL", URL)
        ];
        ProcessEvent(GetFunction("LocalTravel"), @params);
    }
    public void K2_ClientPlayForceFeedback(UForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused)
    {
        Span<(string name, object value)> @params = [
            ("ForceFeedbackEffect", (IntPtr)ForceFeedbackEffect), 
            ("Tag", Tag), 
            ("bLooping", bLooping), 
            ("bIgnoreTimeDilation", bIgnoreTimeDilation), 
            ("bPlayWhilePaused", bPlayWhilePaused)
        ];
        ProcessEvent(GetFunction("K2_ClientPlayForceFeedback"), @params);
    }
    public bool IsInputKeyDown(FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("IsInputKeyDown"), @params);
    }
    public void GetViewportSize(ref int SizeX, ref int SizeY)
    {
        Span<(string name, object value)> @params = [
            ("SizeX", SizeX), 
            ("SizeY", SizeY)
        ];
        ProcessEvent(GetFunction("GetViewportSize"), @params);
    }
    public ASpectatorPawn* GetSpectatorPawn()
    {
        Span<(string name, object value)> @params = [
        ];
        return (ASpectatorPawn*)ProcessEvent<IntPtr>(GetFunction("GetSpectatorPawn"), @params);
    }
    public bool GetMousePosition(ref float LocationX, ref float LocationY)
    {
        Span<(string name, object value)> @params = [
            ("LocationX", LocationX), 
            ("LocationY", LocationY)
        ];
        return ProcessEvent<bool>(GetFunction("GetMousePosition"), @params);
    }
    public FVector GetInputVectorKeyState(FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<FVector>(GetFunction("GetInputVectorKeyState"), @params);
    }
    public void GetInputTouchState(ETouchIndex FingerIndex, ref float LocationX, ref float LocationY, ref bool bIsCurrentlyPressed)
    {
        Span<(string name, object value)> @params = [
            ("FingerIndex", FingerIndex), 
            ("LocationX", LocationX), 
            ("LocationY", LocationY), 
            ("bIsCurrentlyPressed", bIsCurrentlyPressed)
        ];
        ProcessEvent(GetFunction("GetInputTouchState"), @params);
    }
    public void GetInputMouseDelta(ref float DeltaX, ref float DeltaY)
    {
        Span<(string name, object value)> @params = [
            ("DeltaX", DeltaX), 
            ("DeltaY", DeltaY)
        ];
        ProcessEvent(GetFunction("GetInputMouseDelta"), @params);
    }
    public void GetInputMotionState(ref FVector Tilt, ref FVector RotationRate, ref FVector Gravity, ref FVector Acceleration)
    {
        Span<(string name, object value)> @params = [
            ("Tilt", Tilt), 
            ("RotationRate", RotationRate), 
            ("Gravity", Gravity), 
            ("Acceleration", Acceleration)
        ];
        ProcessEvent(GetFunction("GetInputMotionState"), @params);
    }
    public float GetInputKeyTimeDown(FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<float>(GetFunction("GetInputKeyTimeDown"), @params);
    }
    public void GetInputAnalogStickState(EControllerAnalogStick WhichStick, ref float StickX, ref float StickY)
    {
        Span<(string name, object value)> @params = [
            ("WhichStick", WhichStick), 
            ("StickX", StickX), 
            ("StickY", StickY)
        ];
        ProcessEvent(GetFunction("GetInputAnalogStickState"), @params);
    }
    public float GetInputAnalogKeyState(FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<float>(GetFunction("GetInputAnalogKeyState"), @params);
    }
    public AHUD* GetHUD()
    {
        Span<(string name, object value)> @params = [
        ];
        return (AHUD*)ProcessEvent<IntPtr>(GetFunction("GetHUD"), @params);
    }
    public bool GetHitResultUnderFingerForObjects(ETouchIndex FingerIndex, ref TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, ref FHitResult HitResult)
    {
        Span<(string name, object value)> @params = [
            ("FingerIndex", FingerIndex), 
            ("ObjectTypes", ObjectTypes), 
            ("bTraceComplex", bTraceComplex), 
            ("HitResult", HitResult)
        ];
        return ProcessEvent<bool>(GetFunction("GetHitResultUnderFingerForObjects"), @params);
    }
    public bool GetHitResultUnderFingerByChannel(ETouchIndex FingerIndex, ETraceTypeQuery TraceChannel, bool bTraceComplex, ref FHitResult HitResult)
    {
        Span<(string name, object value)> @params = [
            ("FingerIndex", FingerIndex), 
            ("TraceChannel", TraceChannel), 
            ("bTraceComplex", bTraceComplex), 
            ("HitResult", HitResult)
        ];
        return ProcessEvent<bool>(GetFunction("GetHitResultUnderFingerByChannel"), @params);
    }
    public bool GetHitResultUnderFinger(ETouchIndex FingerIndex, ECollisionChannel TraceChannel, bool bTraceComplex, ref FHitResult HitResult)
    {
        Span<(string name, object value)> @params = [
            ("FingerIndex", FingerIndex), 
            ("TraceChannel", TraceChannel), 
            ("bTraceComplex", bTraceComplex), 
            ("HitResult", HitResult)
        ];
        return ProcessEvent<bool>(GetFunction("GetHitResultUnderFinger"), @params);
    }
    public bool GetHitResultUnderCursorForObjects(ref TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, ref FHitResult HitResult)
    {
        Span<(string name, object value)> @params = [
            ("ObjectTypes", ObjectTypes), 
            ("bTraceComplex", bTraceComplex), 
            ("HitResult", HitResult)
        ];
        return ProcessEvent<bool>(GetFunction("GetHitResultUnderCursorForObjects"), @params);
    }
    public bool GetHitResultUnderCursorByChannel(ETraceTypeQuery TraceChannel, bool bTraceComplex, ref FHitResult HitResult)
    {
        Span<(string name, object value)> @params = [
            ("TraceChannel", TraceChannel), 
            ("bTraceComplex", bTraceComplex), 
            ("HitResult", HitResult)
        ];
        return ProcessEvent<bool>(GetFunction("GetHitResultUnderCursorByChannel"), @params);
    }
    public bool GetHitResultUnderCursor(ECollisionChannel TraceChannel, bool bTraceComplex, ref FHitResult HitResult)
    {
        Span<(string name, object value)> @params = [
            ("TraceChannel", TraceChannel), 
            ("bTraceComplex", bTraceComplex), 
            ("HitResult", HitResult)
        ];
        return ProcessEvent<bool>(GetFunction("GetHitResultUnderCursor"), @params);
    }
    public FVector GetFocalLocation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetFocalLocation"), @params);
    }
    public void FOV(float NewFOV)
    {
        Span<(string name, object value)> @params = [
            ("NewFOV", NewFOV)
        ];
        ProcessEvent(GetFunction("FOV"), @params);
    }
    public void EnableCheats()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("EnableCheats"), @params);
    }
    public bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, ref FVector WorldLocation, ref FVector WorldDirection)
    {
        Span<(string name, object value)> @params = [
            ("ScreenX", ScreenX), 
            ("ScreenY", ScreenY), 
            ("WorldLocation", WorldLocation), 
            ("WorldDirection", WorldDirection)
        ];
        return ProcessEvent<bool>(GetFunction("DeprojectScreenPositionToWorld"), @params);
    }
    public bool DeprojectMousePositionToWorld(ref FVector WorldLocation, ref FVector WorldDirection)
    {
        Span<(string name, object value)> @params = [
            ("WorldLocation", WorldLocation), 
            ("WorldDirection", WorldDirection)
        ];
        return ProcessEvent<bool>(GetFunction("DeprojectMousePositionToWorld"), @params);
    }
    public void ConsoleKey(FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        ProcessEvent(GetFunction("ConsoleKey"), @params);
    }
    public void ClientWasKicked(ref FText KickReason)
    {
        Span<(string name, object value)> @params = [
            ("KickReason", KickReason)
        ];
        ProcessEvent(GetFunction("ClientWasKicked"), @params);
    }
    public void ClientVoiceHandshakeComplete()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClientVoiceHandshakeComplete"), @params);
    }
    public void ClientUpdateMultipleLevelsStreamingStatus(ref TArray<FUpdateLevelStreamingLevelStatus> LevelStatuses)
    {
        Span<(string name, object value)> @params = [
            ("LevelStatuses", LevelStatuses)
        ];
        ProcessEvent(GetFunction("ClientUpdateMultipleLevelsStreamingStatus"), @params);
    }
    public void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex)
    {
        Span<(string name, object value)> @params = [
            ("PackageName", PackageName), 
            ("bNewShouldBeLoaded", bNewShouldBeLoaded), 
            ("bNewShouldBeVisible", bNewShouldBeVisible), 
            ("bNewShouldBlockOnLoad", bNewShouldBlockOnLoad), 
            ("LODIndex", LODIndex)
        ];
        ProcessEvent(GetFunction("ClientUpdateLevelStreamingStatus"), @params);
    }
    public void ClientUnmutePlayer(FUniqueNetIdRepl PlayerId)
    {
        Span<(string name, object value)> @params = [
            ("PlayerId", PlayerId)
        ];
        ProcessEvent(GetFunction("ClientUnmutePlayer"), @params);
    }
    public void ClientTravelInternal(FString URL, ETravelType TravelType, bool bSeamless, FGuid MapPackageGuid)
    {
        Span<(string name, object value)> @params = [
            ("URL", URL), 
            ("TravelType", TravelType), 
            ("bSeamless", bSeamless), 
            ("MapPackageGuid", MapPackageGuid)
        ];
        ProcessEvent(GetFunction("ClientTravelInternal"), @params);
    }
    public void ClientTravel(FString URL, ETravelType TravelType, bool bSeamless, FGuid MapPackageGuid)
    {
        Span<(string name, object value)> @params = [
            ("URL", URL), 
            ("TravelType", TravelType), 
            ("bSeamless", bSeamless), 
            ("MapPackageGuid", MapPackageGuid)
        ];
        ProcessEvent(GetFunction("ClientTravel"), @params);
    }
    public void ClientTeamMessage(APlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime)
    {
        Span<(string name, object value)> @params = [
            ("SenderPlayerState", (IntPtr)SenderPlayerState), 
            ("S", S), 
            ("Type", Type), 
            ("MsgLifeTime", MsgLifeTime)
        ];
        ProcessEvent(GetFunction("ClientTeamMessage"), @params);
    }
    public void ClientStopForceFeedback(UForceFeedbackEffect* ForceFeedbackEffect, FName Tag)
    {
        Span<(string name, object value)> @params = [
            ("ForceFeedbackEffect", (IntPtr)ForceFeedbackEffect), 
            ("Tag", Tag)
        ];
        ProcessEvent(GetFunction("ClientStopForceFeedback"), @params);
    }
    public void ClientStopCameraShakesFromSource(UCameraShakeSourceComponent* SourceComponent, bool bImmediately)
    {
        Span<(string name, object value)> @params = [
            ("SourceComponent", (IntPtr)SourceComponent), 
            ("bImmediately", bImmediately)
        ];
        ProcessEvent(GetFunction("ClientStopCameraShakesFromSource"), @params);
    }
    public void ClientStopCameraShake(TSubclassOf<UCameraShakeBase> Shake, bool bImmediately)
    {
        Span<(string name, object value)> @params = [
            ("Shake", Shake), 
            ("bImmediately", bImmediately)
        ];
        ProcessEvent(GetFunction("ClientStopCameraShake"), @params);
    }
    public void ClientStopCameraAnim(UCameraAnim* AnimToStop)
    {
        Span<(string name, object value)> @params = [
            ("AnimToStop", (IntPtr)AnimToStop)
        ];
        ProcessEvent(GetFunction("ClientStopCameraAnim"), @params);
    }
    public void ClientStartOnlineSession()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClientStartOnlineSession"), @params);
    }
    public void ClientStartCameraShakeFromSource(TSubclassOf<UCameraShakeBase> Shake, UCameraShakeSourceComponent* SourceComponent)
    {
        Span<(string name, object value)> @params = [
            ("Shake", Shake), 
            ("SourceComponent", (IntPtr)SourceComponent)
        ];
        ProcessEvent(GetFunction("ClientStartCameraShakeFromSource"), @params);
    }
    public void ClientStartCameraShake(TSubclassOf<UCameraShakeBase> Shake, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot)
    {
        Span<(string name, object value)> @params = [
            ("Shake", Shake), 
            ("Scale", Scale), 
            ("PlaySpace", PlaySpace), 
            ("UserPlaySpaceRot", UserPlaySpaceRot)
        ];
        ProcessEvent(GetFunction("ClientStartCameraShake"), @params);
    }
    public void ClientSpawnCameraLensEffect(TSubclassOf<AEmitterCameraLensEffectBase> LensEffectEmitterClass)
    {
        Span<(string name, object value)> @params = [
            ("LensEffectEmitterClass", LensEffectEmitterClass)
        ];
        ProcessEvent(GetFunction("ClientSpawnCameraLensEffect"), @params);
    }
    public void ClientSetViewTarget(AActor* A, FViewTargetTransitionParams TransitionParams)
    {
        Span<(string name, object value)> @params = [
            ("A", (IntPtr)A), 
            ("TransitionParams", TransitionParams)
        ];
        ProcessEvent(GetFunction("ClientSetViewTarget"), @params);
    }
    public void ClientSetSpectatorWaiting(bool bWaiting)
    {
        Span<(string name, object value)> @params = [
            ("bWaiting", bWaiting)
        ];
        ProcessEvent(GetFunction("ClientSetSpectatorWaiting"), @params);
    }
    public void ClientSetHUD(TSubclassOf<AHUD> NewHUDClass)
    {
        Span<(string name, object value)> @params = [
            ("NewHUDClass", NewHUDClass)
        ];
        ProcessEvent(GetFunction("ClientSetHUD"), @params);
    }
    public void ClientSetForceMipLevelsToBeResident(UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups)
    {
        Span<(string name, object value)> @params = [
            ("Material", (IntPtr)Material), 
            ("ForceDuration", ForceDuration), 
            ("CinematicTextureGroups", CinematicTextureGroups)
        ];
        ProcessEvent(GetFunction("ClientSetForceMipLevelsToBeResident"), @params);
    }
    public void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD)
    {
        Span<(string name, object value)> @params = [
            ("bInCinematicMode", bInCinematicMode), 
            ("bAffectsMovement", bAffectsMovement), 
            ("bAffectsTurning", bAffectsTurning), 
            ("bAffectsHUD", bAffectsHUD)
        ];
        ProcessEvent(GetFunction("ClientSetCinematicMode"), @params);
    }
    public void ClientSetCameraMode(FName NewCamMode)
    {
        Span<(string name, object value)> @params = [
            ("NewCamMode", NewCamMode)
        ];
        ProcessEvent(GetFunction("ClientSetCameraMode"), @params);
    }
    public void ClientSetCameraFade(bool bEnableFading, FColor FadeColor, FVector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished)
    {
        Span<(string name, object value)> @params = [
            ("bEnableFading", bEnableFading), 
            ("FadeColor", FadeColor), 
            ("FadeAlpha", FadeAlpha), 
            ("FadeTime", FadeTime), 
            ("bFadeAudio", bFadeAudio), 
            ("bHoldWhenFinished", bHoldWhenFinished)
        ];
        ProcessEvent(GetFunction("ClientSetCameraFade"), @params);
    }
    public void ClientSetBlockOnAsyncLoading()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClientSetBlockOnAsyncLoading"), @params);
    }
    public void ClientReturnToMainMenuWithTextReason(ref FText ReturnReason)
    {
        Span<(string name, object value)> @params = [
            ("ReturnReason", ReturnReason)
        ];
        ProcessEvent(GetFunction("ClientReturnToMainMenuWithTextReason"), @params);
    }
    public void ClientReturnToMainMenu(FString ReturnReason)
    {
        Span<(string name, object value)> @params = [
            ("ReturnReason", ReturnReason)
        ];
        ProcessEvent(GetFunction("ClientReturnToMainMenu"), @params);
    }
    public void ClientRetryClientRestart(APawn* NewPawn)
    {
        Span<(string name, object value)> @params = [
            ("NewPawn", (IntPtr)NewPawn)
        ];
        ProcessEvent(GetFunction("ClientRetryClientRestart"), @params);
    }
    public void ClientRestart(APawn* NewPawn)
    {
        Span<(string name, object value)> @params = [
            ("NewPawn", (IntPtr)NewPawn)
        ];
        ProcessEvent(GetFunction("ClientRestart"), @params);
    }
    public void ClientReset()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClientReset"), @params);
    }
    public void ClientRepObjRef(UObject* Object)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object)
        ];
        ProcessEvent(GetFunction("ClientRepObjRef"), @params);
    }
    public void ClientReceiveLocalizedMessage(TSubclassOf<ULocalMessage> Message, int SWITCH, APlayerState* RelatedPlayerState_1, APlayerState* RelatedPlayerState_2, UObject* OptionalObject)
    {
        Span<(string name, object value)> @params = [
            ("Message", Message), 
            ("SWITCH", SWITCH), 
            ("RelatedPlayerState_1", (IntPtr)RelatedPlayerState_1), 
            ("RelatedPlayerState_2", (IntPtr)RelatedPlayerState_2), 
            ("OptionalObject", (IntPtr)OptionalObject)
        ];
        ProcessEvent(GetFunction("ClientReceiveLocalizedMessage"), @params);
    }
    public void ClientPrestreamTextures(AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups)
    {
        Span<(string name, object value)> @params = [
            ("ForcedActor", (IntPtr)ForcedActor), 
            ("ForceDuration", ForceDuration), 
            ("bEnableStreaming", bEnableStreaming), 
            ("CinematicTextureGroups", CinematicTextureGroups)
        ];
        ProcessEvent(GetFunction("ClientPrestreamTextures"), @params);
    }
    public void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast)
    {
        Span<(string name, object value)> @params = [
            ("LevelName", LevelName), 
            ("bFirst", bFirst), 
            ("bLast", bLast)
        ];
        ProcessEvent(GetFunction("ClientPrepareMapChange"), @params);
    }
    public void ClientPlaySoundAtLocation(USoundBase* Sound, FVector Location, float VolumeMultiplier, float PitchMultiplier)
    {
        Span<(string name, object value)> @params = [
            ("Sound", (IntPtr)Sound), 
            ("Location", Location), 
            ("VolumeMultiplier", VolumeMultiplier), 
            ("PitchMultiplier", PitchMultiplier)
        ];
        ProcessEvent(GetFunction("ClientPlaySoundAtLocation"), @params);
    }
    public void ClientPlaySound(USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier)
    {
        Span<(string name, object value)> @params = [
            ("Sound", (IntPtr)Sound), 
            ("VolumeMultiplier", VolumeMultiplier), 
            ("PitchMultiplier", PitchMultiplier)
        ];
        ProcessEvent(GetFunction("ClientPlaySound"), @params);
    }
    public void ClientPlayForceFeedback_Internal(UForceFeedbackEffect* ForceFeedbackEffect, FForceFeedbackParameters Params)
    {
        Span<(string name, object value)> @params = [
            ("ForceFeedbackEffect", (IntPtr)ForceFeedbackEffect), 
            ("Params", Params)
        ];
        ProcessEvent(GetFunction("ClientPlayForceFeedback_Internal"), @params);
    }
    public void ClientPlayCameraAnim(UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, ECameraShakePlaySpace Space, FRotator CustomPlaySpace)
    {
        Span<(string name, object value)> @params = [
            ("AnimToPlay", (IntPtr)AnimToPlay), 
            ("Scale", Scale), 
            ("Rate", Rate), 
            ("BlendInTime", BlendInTime), 
            ("BlendOutTime", BlendOutTime), 
            ("bLoop", bLoop), 
            ("bRandomStartTime", bRandomStartTime), 
            ("Space", Space), 
            ("CustomPlaySpace", CustomPlaySpace)
        ];
        ProcessEvent(GetFunction("ClientPlayCameraAnim"), @params);
    }
    public void ClientMutePlayer(FUniqueNetIdRepl PlayerId)
    {
        Span<(string name, object value)> @params = [
            ("PlayerId", PlayerId)
        ];
        ProcessEvent(GetFunction("ClientMutePlayer"), @params);
    }
    public void ClientMessage(FString S, FName Type, float MsgLifeTime)
    {
        Span<(string name, object value)> @params = [
            ("S", S), 
            ("Type", Type), 
            ("MsgLifeTime", MsgLifeTime)
        ];
        ProcessEvent(GetFunction("ClientMessage"), @params);
    }
    public void ClientIgnoreMoveInput(bool bIgnore)
    {
        Span<(string name, object value)> @params = [
            ("bIgnore", bIgnore)
        ];
        ProcessEvent(GetFunction("ClientIgnoreMoveInput"), @params);
    }
    public void ClientIgnoreLookInput(bool bIgnore)
    {
        Span<(string name, object value)> @params = [
            ("bIgnore", bIgnore)
        ];
        ProcessEvent(GetFunction("ClientIgnoreLookInput"), @params);
    }
    public void ClientGotoState(FName NewState)
    {
        Span<(string name, object value)> @params = [
            ("NewState", NewState)
        ];
        ProcessEvent(GetFunction("ClientGotoState"), @params);
    }
    public void ClientGameEnded(AActor* EndGameFocus, bool bIsWinner)
    {
        Span<(string name, object value)> @params = [
            ("EndGameFocus", (IntPtr)EndGameFocus), 
            ("bIsWinner", bIsWinner)
        ];
        ProcessEvent(GetFunction("ClientGameEnded"), @params);
    }
    public void ClientForceGarbageCollection()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClientForceGarbageCollection"), @params);
    }
    public void ClientFlushLevelStreaming()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClientFlushLevelStreaming"), @params);
    }
    public void ClientEndOnlineSession()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClientEndOnlineSession"), @params);
    }
    public void ClientEnableNetworkVoice(bool bEnable)
    {
        Span<(string name, object value)> @params = [
            ("bEnable", bEnable)
        ];
        ProcessEvent(GetFunction("ClientEnableNetworkVoice"), @params);
    }
    public void ClientCommitMapChange()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClientCommitMapChange"), @params);
    }
    public void ClientClearCameraLensEffects()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClientClearCameraLensEffects"), @params);
    }
    public void ClientCapBandwidth(int Cap)
    {
        Span<(string name, object value)> @params = [
            ("Cap", Cap)
        ];
        ProcessEvent(GetFunction("ClientCapBandwidth"), @params);
    }
    public void ClientCancelPendingMapChange()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClientCancelPendingMapChange"), @params);
    }
    public void ClientAddTextureStreamingLoc(FVector InLoc, float Duration, bool bOverrideLocation)
    {
        Span<(string name, object value)> @params = [
            ("InLoc", InLoc), 
            ("Duration", Duration), 
            ("bOverrideLocation", bOverrideLocation)
        ];
        ProcessEvent(GetFunction("ClientAddTextureStreamingLoc"), @params);
    }
    public void ClearAudioListenerOverride()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClearAudioListenerOverride"), @params);
    }
    public void ClearAudioListenerAttenuationOverride()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClearAudioListenerAttenuationOverride"), @params);
    }
    public bool CanRestartPlayer()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("CanRestartPlayer"), @params);
    }
    public void Camera(FName NewMode)
    {
        Span<(string name, object value)> @params = [
            ("NewMode", NewMode)
        ];
        ProcessEvent(GetFunction("Camera"), @params);
    }
    public void AddYawInput(float Val)
    {
        Span<(string name, object value)> @params = [
            ("Val", Val)
        ];
        ProcessEvent(GetFunction("AddYawInput"), @params);
    }
    public void AddRollInput(float Val)
    {
        Span<(string name, object value)> @params = [
            ("Val", Val)
        ];
        ProcessEvent(GetFunction("AddRollInput"), @params);
    }
    public void AddPitchInput(float Val)
    {
        Span<(string name, object value)> @params = [
            ("Val", Val)
        ];
        ProcessEvent(GetFunction("AddPitchInput"), @params);
    }
    public void ActivateTouchInterface(UTouchInterface* NewTouchInterface)
    {
        Span<(string name, object value)> @params = [
            ("NewTouchInterface", (IntPtr)NewTouchInterface)
        ];
        ProcessEvent(GetFunction("ActivateTouchInterface"), @params);
    }
}

public unsafe class SplineComponent : ObjectBase<USplineComponent>
{
    public SplineComponent(IntPtr pointer) : base(pointer) {}
    public void UpdateSpline()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("UpdateSpline"), @params);
    }
    public void SetWorldLocationAtSplinePoint(int PointIndex, ref FVector InLocation)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("InLocation", InLocation)
        ];
        ProcessEvent(GetFunction("SetWorldLocationAtSplinePoint"), @params);
    }
    public void SetUpVectorAtSplinePoint(int PointIndex, ref FVector InUpVector, ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("InUpVector", InUpVector), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUpdateSpline", bUpdateSpline)
        ];
        ProcessEvent(GetFunction("SetUpVectorAtSplinePoint"), @params);
    }
    public void SetUnselectedSplineSegmentColor(ref FLinearColor SegmentColor)
    {
        Span<(string name, object value)> @params = [
            ("SegmentColor", SegmentColor)
        ];
        ProcessEvent(GetFunction("SetUnselectedSplineSegmentColor"), @params);
    }
    public void SetTangentsAtSplinePoint(int PointIndex, ref FVector InArriveTangent, ref FVector InLeaveTangent, ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("InArriveTangent", InArriveTangent), 
            ("InLeaveTangent", InLeaveTangent), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUpdateSpline", bUpdateSpline)
        ];
        ProcessEvent(GetFunction("SetTangentsAtSplinePoint"), @params);
    }
    public void SetTangentColor(ref FLinearColor TangentColor)
    {
        Span<(string name, object value)> @params = [
            ("TangentColor", TangentColor)
        ];
        ProcessEvent(GetFunction("SetTangentColor"), @params);
    }
    public void SetTangentAtSplinePoint(int PointIndex, ref FVector InTangent, ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("InTangent", InTangent), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUpdateSpline", bUpdateSpline)
        ];
        ProcessEvent(GetFunction("SetTangentAtSplinePoint"), @params);
    }
    public void SetSplineWorldPoints(ref TArray<FVector> Points)
    {
        Span<(string name, object value)> @params = [
            ("Points", Points)
        ];
        ProcessEvent(GetFunction("SetSplineWorldPoints"), @params);
    }
    public void SetSplinePointType(int PointIndex, ESplinePointType Type, bool bUpdateSpline)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("Type", Type), 
            ("bUpdateSpline", bUpdateSpline)
        ];
        ProcessEvent(GetFunction("SetSplinePointType"), @params);
    }
    public void SetSplinePoints(ref TArray<FVector> Points, ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline)
    {
        Span<(string name, object value)> @params = [
            ("Points", Points), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUpdateSpline", bUpdateSpline)
        ];
        ProcessEvent(GetFunction("SetSplinePoints"), @params);
    }
    public void SetSplineLocalPoints(ref TArray<FVector> Points)
    {
        Span<(string name, object value)> @params = [
            ("Points", Points)
        ];
        ProcessEvent(GetFunction("SetSplineLocalPoints"), @params);
    }
    public void SetSelectedSplineSegmentColor(ref FLinearColor SegmentColor)
    {
        Span<(string name, object value)> @params = [
            ("SegmentColor", SegmentColor)
        ];
        ProcessEvent(GetFunction("SetSelectedSplineSegmentColor"), @params);
    }
    public void SetScaleAtSplinePoint(int PointIndex, ref FVector InScaleVector, bool bUpdateSpline)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("InScaleVector", InScaleVector), 
            ("bUpdateSpline", bUpdateSpline)
        ];
        ProcessEvent(GetFunction("SetScaleAtSplinePoint"), @params);
    }
    public void SetRotationAtSplinePoint(int PointIndex, ref FRotator InRotation, ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("InRotation", InRotation), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUpdateSpline", bUpdateSpline)
        ];
        ProcessEvent(GetFunction("SetRotationAtSplinePoint"), @params);
    }
    public void SetLocationAtSplinePoint(int PointIndex, ref FVector InLocation, ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("InLocation", InLocation), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUpdateSpline", bUpdateSpline)
        ];
        ProcessEvent(GetFunction("SetLocationAtSplinePoint"), @params);
    }
    public void SetDrawDebug(bool bShow)
    {
        Span<(string name, object value)> @params = [
            ("bShow", bShow)
        ];
        ProcessEvent(GetFunction("SetDrawDebug"), @params);
    }
    public void SetDefaultUpVector(ref FVector UpVector, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("UpVector", UpVector), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        ProcessEvent(GetFunction("SetDefaultUpVector"), @params);
    }
    public void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline)
    {
        Span<(string name, object value)> @params = [
            ("bInClosedLoop", bInClosedLoop), 
            ("Key", Key), 
            ("bUpdateSpline", bUpdateSpline)
        ];
        ProcessEvent(GetFunction("SetClosedLoopAtPosition"), @params);
    }
    public void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline)
    {
        Span<(string name, object value)> @params = [
            ("bInClosedLoop", bInClosedLoop), 
            ("bUpdateSpline", bUpdateSpline)
        ];
        ProcessEvent(GetFunction("SetClosedLoop"), @params);
    }
    public void RemoveSplinePoint(int Index, bool bUpdateSpline)
    {
        Span<(string name, object value)> @params = [
            ("Index", Index), 
            ("bUpdateSpline", bUpdateSpline)
        ];
        ProcessEvent(GetFunction("RemoveSplinePoint"), @params);
    }
    public bool IsClosedLoop()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsClosedLoop"), @params);
    }
    public FVector GetWorldTangentAtDistanceAlongSpline(float Distance)
    {
        Span<(string name, object value)> @params = [
            ("Distance", Distance)
        ];
        return ProcessEvent<FVector>(GetFunction("GetWorldTangentAtDistanceAlongSpline"), @params);
    }
    public FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity)
    {
        Span<(string name, object value)> @params = [
            ("Time", Time), 
            ("bUseConstantVelocity", bUseConstantVelocity)
        ];
        return ProcessEvent<FRotator>(GetFunction("GetWorldRotationAtTime"), @params);
    }
    public FRotator GetWorldRotationAtDistanceAlongSpline(float Distance)
    {
        Span<(string name, object value)> @params = [
            ("Distance", Distance)
        ];
        return ProcessEvent<FRotator>(GetFunction("GetWorldRotationAtDistanceAlongSpline"), @params);
    }
    public FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity)
    {
        Span<(string name, object value)> @params = [
            ("Time", Time), 
            ("bUseConstantVelocity", bUseConstantVelocity)
        ];
        return ProcessEvent<FVector>(GetFunction("GetWorldLocationAtTime"), @params);
    }
    public FVector GetWorldLocationAtSplinePoint(int PointIndex)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex)
        ];
        return ProcessEvent<FVector>(GetFunction("GetWorldLocationAtSplinePoint"), @params);
    }
    public FVector GetWorldLocationAtDistanceAlongSpline(float Distance)
    {
        Span<(string name, object value)> @params = [
            ("Distance", Distance)
        ];
        return ProcessEvent<FVector>(GetFunction("GetWorldLocationAtDistanceAlongSpline"), @params);
    }
    public FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity)
    {
        Span<(string name, object value)> @params = [
            ("Time", Time), 
            ("bUseConstantVelocity", bUseConstantVelocity)
        ];
        return ProcessEvent<FVector>(GetFunction("GetWorldDirectionAtTime"), @params);
    }
    public FVector GetWorldDirectionAtDistanceAlongSpline(float Distance)
    {
        Span<(string name, object value)> @params = [
            ("Distance", Distance)
        ];
        return ProcessEvent<FVector>(GetFunction("GetWorldDirectionAtDistanceAlongSpline"), @params);
    }
    public FVector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName)
    {
        Span<(string name, object value)> @params = [
            ("Index", Index), 
            ("PropertyName", PropertyName)
        ];
        return ProcessEvent<FVector>(GetFunction("GetVectorPropertyAtSplinePoint"), @params);
    }
    public FVector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName)
    {
        Span<(string name, object value)> @params = [
            ("InKey", InKey), 
            ("PropertyName", PropertyName)
        ];
        return ProcessEvent<FVector>(GetFunction("GetVectorPropertyAtSplineInputKey"), @params);
    }
    public FVector GetUpVectorAtTime(float Time, ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity)
    {
        Span<(string name, object value)> @params = [
            ("Time", Time), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUseConstantVelocity", bUseConstantVelocity)
        ];
        return ProcessEvent<FVector>(GetFunction("GetUpVectorAtTime"), @params);
    }
    public FVector GetUpVectorAtSplinePoint(int PointIndex, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetUpVectorAtSplinePoint"), @params);
    }
    public FVector GetUpVectorAtSplineInputKey(float InKey, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("InKey", InKey), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetUpVectorAtSplineInputKey"), @params);
    }
    public FVector GetUpVectorAtDistanceAlongSpline(float Distance, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("Distance", Distance), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetUpVectorAtDistanceAlongSpline"), @params);
    }
    public FTransform GetTransformAtTime(float Time, ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, bool bUseScale)
    {
        Span<(string name, object value)> @params = [
            ("Time", Time), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUseConstantVelocity", bUseConstantVelocity), 
            ("bUseScale", bUseScale)
        ];
        return ProcessEvent<FTransform>(GetFunction("GetTransformAtTime"), @params);
    }
    public FTransform GetTransformAtSplinePoint(int PointIndex, ESplineCoordinateSpace CoordinateSpace, bool bUseScale)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUseScale", bUseScale)
        ];
        return ProcessEvent<FTransform>(GetFunction("GetTransformAtSplinePoint"), @params);
    }
    public FTransform GetTransformAtSplineInputKey(float InKey, ESplineCoordinateSpace CoordinateSpace, bool bUseScale)
    {
        Span<(string name, object value)> @params = [
            ("InKey", InKey), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUseScale", bUseScale)
        ];
        return ProcessEvent<FTransform>(GetFunction("GetTransformAtSplineInputKey"), @params);
    }
    public FTransform GetTransformAtDistanceAlongSpline(float Distance, ESplineCoordinateSpace CoordinateSpace, bool bUseScale)
    {
        Span<(string name, object value)> @params = [
            ("Distance", Distance), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUseScale", bUseScale)
        ];
        return ProcessEvent<FTransform>(GetFunction("GetTransformAtDistanceAlongSpline"), @params);
    }
    public FVector GetTangentAtTime(float Time, ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity)
    {
        Span<(string name, object value)> @params = [
            ("Time", Time), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUseConstantVelocity", bUseConstantVelocity)
        ];
        return ProcessEvent<FVector>(GetFunction("GetTangentAtTime"), @params);
    }
    public FVector GetTangentAtSplinePoint(int PointIndex, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetTangentAtSplinePoint"), @params);
    }
    public FVector GetTangentAtSplineInputKey(float InKey, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("InKey", InKey), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetTangentAtSplineInputKey"), @params);
    }
    public FVector GetTangentAtDistanceAlongSpline(float Distance, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("Distance", Distance), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetTangentAtDistanceAlongSpline"), @params);
    }
    public ESplinePointType GetSplinePointType(int PointIndex)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex)
        ];
        return ProcessEvent<ESplinePointType>(GetFunction("GetSplinePointType"), @params);
    }
    public float GetSplineLength()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetSplineLength"), @params);
    }
    public FVector GetScaleAtTime(float Time, bool bUseConstantVelocity)
    {
        Span<(string name, object value)> @params = [
            ("Time", Time), 
            ("bUseConstantVelocity", bUseConstantVelocity)
        ];
        return ProcessEvent<FVector>(GetFunction("GetScaleAtTime"), @params);
    }
    public FVector GetScaleAtSplinePoint(int PointIndex)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex)
        ];
        return ProcessEvent<FVector>(GetFunction("GetScaleAtSplinePoint"), @params);
    }
    public FVector GetScaleAtSplineInputKey(float InKey)
    {
        Span<(string name, object value)> @params = [
            ("InKey", InKey)
        ];
        return ProcessEvent<FVector>(GetFunction("GetScaleAtSplineInputKey"), @params);
    }
    public FVector GetScaleAtDistanceAlongSpline(float Distance)
    {
        Span<(string name, object value)> @params = [
            ("Distance", Distance)
        ];
        return ProcessEvent<FVector>(GetFunction("GetScaleAtDistanceAlongSpline"), @params);
    }
    public FRotator GetRotationAtTime(float Time, ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity)
    {
        Span<(string name, object value)> @params = [
            ("Time", Time), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUseConstantVelocity", bUseConstantVelocity)
        ];
        return ProcessEvent<FRotator>(GetFunction("GetRotationAtTime"), @params);
    }
    public FRotator GetRotationAtSplinePoint(int PointIndex, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FRotator>(GetFunction("GetRotationAtSplinePoint"), @params);
    }
    public FRotator GetRotationAtSplineInputKey(float InKey, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("InKey", InKey), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FRotator>(GetFunction("GetRotationAtSplineInputKey"), @params);
    }
    public FRotator GetRotationAtDistanceAlongSpline(float Distance, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("Distance", Distance), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FRotator>(GetFunction("GetRotationAtDistanceAlongSpline"), @params);
    }
    public float GetRollAtTime(float Time, ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity)
    {
        Span<(string name, object value)> @params = [
            ("Time", Time), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUseConstantVelocity", bUseConstantVelocity)
        ];
        return ProcessEvent<float>(GetFunction("GetRollAtTime"), @params);
    }
    public float GetRollAtSplinePoint(int PointIndex, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<float>(GetFunction("GetRollAtSplinePoint"), @params);
    }
    public float GetRollAtSplineInputKey(float InKey, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("InKey", InKey), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<float>(GetFunction("GetRollAtSplineInputKey"), @params);
    }
    public float GetRollAtDistanceAlongSpline(float Distance, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("Distance", Distance), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<float>(GetFunction("GetRollAtDistanceAlongSpline"), @params);
    }
    public FVector GetRightVectorAtTime(float Time, ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity)
    {
        Span<(string name, object value)> @params = [
            ("Time", Time), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUseConstantVelocity", bUseConstantVelocity)
        ];
        return ProcessEvent<FVector>(GetFunction("GetRightVectorAtTime"), @params);
    }
    public FVector GetRightVectorAtSplinePoint(int PointIndex, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetRightVectorAtSplinePoint"), @params);
    }
    public FVector GetRightVectorAtSplineInputKey(float InKey, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("InKey", InKey), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetRightVectorAtSplineInputKey"), @params);
    }
    public FVector GetRightVectorAtDistanceAlongSpline(float Distance, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("Distance", Distance), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetRightVectorAtDistanceAlongSpline"), @params);
    }
    public int GetNumberOfSplineSegments()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetNumberOfSplineSegments"), @params);
    }
    public int GetNumberOfSplinePoints()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetNumberOfSplinePoints"), @params);
    }
    public FVector GetLocationAtTime(float Time, ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity)
    {
        Span<(string name, object value)> @params = [
            ("Time", Time), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUseConstantVelocity", bUseConstantVelocity)
        ];
        return ProcessEvent<FVector>(GetFunction("GetLocationAtTime"), @params);
    }
    public FVector GetLocationAtSplinePoint(int PointIndex, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetLocationAtSplinePoint"), @params);
    }
    public FVector GetLocationAtSplineInputKey(float InKey, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("InKey", InKey), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetLocationAtSplineInputKey"), @params);
    }
    public FVector GetLocationAtDistanceAlongSpline(float Distance, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("Distance", Distance), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetLocationAtDistanceAlongSpline"), @params);
    }
    public void GetLocationAndTangentAtSplinePoint(int PointIndex, ref FVector Location, ref FVector Tangent, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("Location", Location), 
            ("Tangent", Tangent), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        ProcessEvent(GetFunction("GetLocationAndTangentAtSplinePoint"), @params);
    }
    public void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, ref FVector LocalLocation, ref FVector LocalTangent)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("LocalLocation", LocalLocation), 
            ("LocalTangent", LocalTangent)
        ];
        ProcessEvent(GetFunction("GetLocalLocationAndTangentAtSplinePoint"), @params);
    }
    public FVector GetLeaveTangentAtSplinePoint(int PointIndex, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetLeaveTangentAtSplinePoint"), @params);
    }
    public float GetInputKeyAtDistanceAlongSpline(float Distance)
    {
        Span<(string name, object value)> @params = [
            ("Distance", Distance)
        ];
        return ProcessEvent<float>(GetFunction("GetInputKeyAtDistanceAlongSpline"), @params);
    }
    public float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName)
    {
        Span<(string name, object value)> @params = [
            ("Index", Index), 
            ("PropertyName", PropertyName)
        ];
        return ProcessEvent<float>(GetFunction("GetFloatPropertyAtSplinePoint"), @params);
    }
    public float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName)
    {
        Span<(string name, object value)> @params = [
            ("InKey", InKey), 
            ("PropertyName", PropertyName)
        ];
        return ProcessEvent<float>(GetFunction("GetFloatPropertyAtSplineInputKey"), @params);
    }
    public float GetDistanceAlongSplineAtSplinePoint(int PointIndex)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex)
        ];
        return ProcessEvent<float>(GetFunction("GetDistanceAlongSplineAtSplinePoint"), @params);
    }
    public float GetDistanceAlongSplineAtSplineInputKey(float InKey)
    {
        Span<(string name, object value)> @params = [
            ("InKey", InKey)
        ];
        return ProcessEvent<float>(GetFunction("GetDistanceAlongSplineAtSplineInputKey"), @params);
    }
    public FVector GetDirectionAtTime(float Time, ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity)
    {
        Span<(string name, object value)> @params = [
            ("Time", Time), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUseConstantVelocity", bUseConstantVelocity)
        ];
        return ProcessEvent<FVector>(GetFunction("GetDirectionAtTime"), @params);
    }
    public FVector GetDirectionAtSplinePoint(int PointIndex, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetDirectionAtSplinePoint"), @params);
    }
    public FVector GetDirectionAtSplineInputKey(float InKey, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("InKey", InKey), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetDirectionAtSplineInputKey"), @params);
    }
    public FVector GetDirectionAtDistanceAlongSpline(float Distance, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("Distance", Distance), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetDirectionAtDistanceAlongSpline"), @params);
    }
    public FVector GetDefaultUpVector(ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetDefaultUpVector"), @params);
    }
    public FVector GetArriveTangentAtSplinePoint(int PointIndex, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("PointIndex", PointIndex), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("GetArriveTangentAtSplinePoint"), @params);
    }
    public FVector FindUpVectorClosestToWorldLocation(ref FVector WorldLocation, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("WorldLocation", WorldLocation), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("FindUpVectorClosestToWorldLocation"), @params);
    }
    public FTransform FindTransformClosestToWorldLocation(ref FVector WorldLocation, ESplineCoordinateSpace CoordinateSpace, bool bUseScale)
    {
        Span<(string name, object value)> @params = [
            ("WorldLocation", WorldLocation), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUseScale", bUseScale)
        ];
        return ProcessEvent<FTransform>(GetFunction("FindTransformClosestToWorldLocation"), @params);
    }
    public FVector FindTangentClosestToWorldLocation(ref FVector WorldLocation, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("WorldLocation", WorldLocation), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("FindTangentClosestToWorldLocation"), @params);
    }
    public FVector FindScaleClosestToWorldLocation(ref FVector WorldLocation)
    {
        Span<(string name, object value)> @params = [
            ("WorldLocation", WorldLocation)
        ];
        return ProcessEvent<FVector>(GetFunction("FindScaleClosestToWorldLocation"), @params);
    }
    public FRotator FindRotationClosestToWorldLocation(ref FVector WorldLocation, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("WorldLocation", WorldLocation), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FRotator>(GetFunction("FindRotationClosestToWorldLocation"), @params);
    }
    public float FindRollClosestToWorldLocation(ref FVector WorldLocation, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("WorldLocation", WorldLocation), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<float>(GetFunction("FindRollClosestToWorldLocation"), @params);
    }
    public FVector FindRightVectorClosestToWorldLocation(ref FVector WorldLocation, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("WorldLocation", WorldLocation), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("FindRightVectorClosestToWorldLocation"), @params);
    }
    public FVector FindLocationClosestToWorldLocation(ref FVector WorldLocation, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("WorldLocation", WorldLocation), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("FindLocationClosestToWorldLocation"), @params);
    }
    public float FindInputKeyClosestToWorldLocation(ref FVector WorldLocation)
    {
        Span<(string name, object value)> @params = [
            ("WorldLocation", WorldLocation)
        ];
        return ProcessEvent<float>(GetFunction("FindInputKeyClosestToWorldLocation"), @params);
    }
    public FVector FindDirectionClosestToWorldLocation(ref FVector WorldLocation, ESplineCoordinateSpace CoordinateSpace)
    {
        Span<(string name, object value)> @params = [
            ("WorldLocation", WorldLocation), 
            ("CoordinateSpace", CoordinateSpace)
        ];
        return ProcessEvent<FVector>(GetFunction("FindDirectionClosestToWorldLocation"), @params);
    }
    public void ClearSplinePoints(bool bUpdateSpline)
    {
        Span<(string name, object value)> @params = [
            ("bUpdateSpline", bUpdateSpline)
        ];
        ProcessEvent(GetFunction("ClearSplinePoints"), @params);
    }
    public void AddSplineWorldPoint(ref FVector Position)
    {
        Span<(string name, object value)> @params = [
            ("Position", Position)
        ];
        ProcessEvent(GetFunction("AddSplineWorldPoint"), @params);
    }
    public void AddSplinePointAtIndex(ref FVector Position, int Index, ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline)
    {
        Span<(string name, object value)> @params = [
            ("Position", Position), 
            ("Index", Index), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUpdateSpline", bUpdateSpline)
        ];
        ProcessEvent(GetFunction("AddSplinePointAtIndex"), @params);
    }
    public void AddSplinePoint(ref FVector Position, ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline)
    {
        Span<(string name, object value)> @params = [
            ("Position", Position), 
            ("CoordinateSpace", CoordinateSpace), 
            ("bUpdateSpline", bUpdateSpline)
        ];
        ProcessEvent(GetFunction("AddSplinePoint"), @params);
    }
    public void AddSplineLocalPoint(ref FVector Position)
    {
        Span<(string name, object value)> @params = [
            ("Position", Position)
        ];
        ProcessEvent(GetFunction("AddSplineLocalPoint"), @params);
    }
    public void AddPoints(ref TArray<FSplinePoint> Points, bool bUpdateSpline)
    {
        Span<(string name, object value)> @params = [
            ("Points", Points), 
            ("bUpdateSpline", bUpdateSpline)
        ];
        ProcessEvent(GetFunction("AddPoints"), @params);
    }
    public void AddPoint(ref FSplinePoint Point, bool bUpdateSpline)
    {
        Span<(string name, object value)> @params = [
            ("Point", Point), 
            ("bUpdateSpline", bUpdateSpline)
        ];
        ProcessEvent(GetFunction("AddPoint"), @params);
    }
}

public unsafe class CameraShakeBase : ObjectBase<UCameraShakeBase>
{
    public CameraShakeBase(IntPtr pointer) : base(pointer) {}
    public void SetRootShakePattern(UCameraShakePattern* InPattern)
    {
        Span<(string name, object value)> @params = [
            ("InPattern", (IntPtr)InPattern)
        ];
        ProcessEvent(GetFunction("SetRootShakePattern"), @params);
    }
    public UCameraShakePattern* GetRootShakePattern()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UCameraShakePattern*)ProcessEvent<IntPtr>(GetFunction("GetRootShakePattern"), @params);
    }
}

public unsafe class Brush : ObjectBase<ABrush>
{
    public Brush(IntPtr pointer) : base(pointer) {}
}

public unsafe class Volume : ObjectBase<AVolume>
{
    public Volume(IntPtr pointer) : base(pointer) {}}

public unsafe class SoundBase : ObjectBase<USoundBase>
{
    public SoundBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundWave : ObjectBase<USoundWave>
{
    public SoundWave(IntPtr pointer) : base(pointer) {}
}

public unsafe class SoundWaveProcedural : ObjectBase<USoundWaveProcedural>
{
    public SoundWaveProcedural(IntPtr pointer) : base(pointer) {}}

public unsafe class StreamableRenderAsset : ObjectBase<UStreamableRenderAsset>
{
    public StreamableRenderAsset(IntPtr pointer) : base(pointer) {}
}

public unsafe class Texture : ObjectBase<UTexture>
{
    public Texture(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpression : ObjectBase<UMaterialExpression>
{
    public MaterialExpression(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionTextureBase : ObjectBase<UMaterialExpressionTextureBase>
{
    public MaterialExpressionTextureBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionTextureSample : ObjectBase<UMaterialExpressionTextureSample>
{
    public MaterialExpressionTextureSample(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionTextureSampleParameter : ObjectBase<UMaterialExpressionTextureSampleParameter>
{
    public MaterialExpressionTextureSampleParameter(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionTextureSampleParameter2D : ObjectBase<UMaterialExpressionTextureSampleParameter2D>
{
    public MaterialExpressionTextureSampleParameter2D(IntPtr pointer) : base(pointer) {}}

public unsafe class Commandlet : ObjectBase<UCommandlet>
{
    public Commandlet(IntPtr pointer) : base(pointer) {}
}

public unsafe class AudioComponent : ObjectBase<UAudioComponent>
{
    public AudioComponent(IntPtr pointer) : base(pointer) {}
    public void StopDelayed(float DelayTime)
    {
        Span<(string name, object value)> @params = [
            ("DelayTime", DelayTime)
        ];
        ProcessEvent(GetFunction("StopDelayed"), @params);
    }
    public void Stop()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Stop"), @params);
    }
    public void SetWaveParameter(FName InName, USoundWave* InWave)
    {
        Span<(string name, object value)> @params = [
            ("InName", InName), 
            ("InWave", (IntPtr)InWave)
        ];
        ProcessEvent(GetFunction("SetWaveParameter"), @params);
    }
    public void SetVolumeMultiplier(float NewVolumeMultiplier)
    {
        Span<(string name, object value)> @params = [
            ("NewVolumeMultiplier", NewVolumeMultiplier)
        ];
        ProcessEvent(GetFunction("SetVolumeMultiplier"), @params);
    }
    public void SetUISound(bool bInUISound)
    {
        Span<(string name, object value)> @params = [
            ("bInUISound", bInUISound)
        ];
        ProcessEvent(GetFunction("SetUISound"), @params);
    }
    public void SetSubmixSend(USoundSubmixBase* Submix, float SendLevel)
    {
        Span<(string name, object value)> @params = [
            ("Submix", (IntPtr)Submix), 
            ("SendLevel", SendLevel)
        ];
        ProcessEvent(GetFunction("SetSubmixSend"), @params);
    }
    public void SetSourceBusSendPreEffect(USoundSourceBus* SoundSourceBus, float SourceBusSendLevel)
    {
        Span<(string name, object value)> @params = [
            ("SoundSourceBus", (IntPtr)SoundSourceBus), 
            ("SourceBusSendLevel", SourceBusSendLevel)
        ];
        ProcessEvent(GetFunction("SetSourceBusSendPreEffect"), @params);
    }
    public void SetSourceBusSendPostEffect(USoundSourceBus* SoundSourceBus, float SourceBusSendLevel)
    {
        Span<(string name, object value)> @params = [
            ("SoundSourceBus", (IntPtr)SoundSourceBus), 
            ("SourceBusSendLevel", SourceBusSendLevel)
        ];
        ProcessEvent(GetFunction("SetSourceBusSendPostEffect"), @params);
    }
    public void SetSound(USoundBase* NewSound)
    {
        Span<(string name, object value)> @params = [
            ("NewSound", (IntPtr)NewSound)
        ];
        ProcessEvent(GetFunction("SetSound"), @params);
    }
    public void SetPitchMultiplier(float NewPitchMultiplier)
    {
        Span<(string name, object value)> @params = [
            ("NewPitchMultiplier", NewPitchMultiplier)
        ];
        ProcessEvent(GetFunction("SetPitchMultiplier"), @params);
    }
    public void SetPaused(bool bPause)
    {
        Span<(string name, object value)> @params = [
            ("bPause", bPause)
        ];
        ProcessEvent(GetFunction("SetPaused"), @params);
    }
    public void SetOutputToBusOnly(bool bInOutputToBusOnly)
    {
        Span<(string name, object value)> @params = [
            ("bInOutputToBusOnly", bInOutputToBusOnly)
        ];
        ProcessEvent(GetFunction("SetOutputToBusOnly"), @params);
    }
    public void SetLowPassFilterFrequency(float InLowPassFilterFrequency)
    {
        Span<(string name, object value)> @params = [
            ("InLowPassFilterFrequency", InLowPassFilterFrequency)
        ];
        ProcessEvent(GetFunction("SetLowPassFilterFrequency"), @params);
    }
    public void SetLowPassFilterEnabled(bool InLowPassFilterEnabled)
    {
        Span<(string name, object value)> @params = [
            ("InLowPassFilterEnabled", InLowPassFilterEnabled)
        ];
        ProcessEvent(GetFunction("SetLowPassFilterEnabled"), @params);
    }
    public void SetIntParameter(FName InName, int inInt)
    {
        Span<(string name, object value)> @params = [
            ("InName", InName), 
            ("inInt", inInt)
        ];
        ProcessEvent(GetFunction("SetIntParameter"), @params);
    }
    public void SetFloatParameter(FName InName, float InFloat)
    {
        Span<(string name, object value)> @params = [
            ("InName", InName), 
            ("InFloat", InFloat)
        ];
        ProcessEvent(GetFunction("SetFloatParameter"), @params);
    }
    public void SetBoolParameter(FName InName, bool InBool)
    {
        Span<(string name, object value)> @params = [
            ("InName", InName), 
            ("InBool", InBool)
        ];
        ProcessEvent(GetFunction("SetBoolParameter"), @params);
    }
    public void SetAudioBusSendPreEffect(UAudioBus* AudioBus, float AudioBusSendLevel)
    {
        Span<(string name, object value)> @params = [
            ("AudioBus", (IntPtr)AudioBus), 
            ("AudioBusSendLevel", AudioBusSendLevel)
        ];
        ProcessEvent(GetFunction("SetAudioBusSendPreEffect"), @params);
    }
    public void SetAudioBusSendPostEffect(UAudioBus* AudioBus, float AudioBusSendLevel)
    {
        Span<(string name, object value)> @params = [
            ("AudioBus", (IntPtr)AudioBus), 
            ("AudioBusSendLevel", AudioBusSendLevel)
        ];
        ProcessEvent(GetFunction("SetAudioBusSendPostEffect"), @params);
    }
    public void Play(float StartTime)
    {
        Span<(string name, object value)> @params = [
            ("StartTime", StartTime)
        ];
        ProcessEvent(GetFunction("Play"), @params);
    }
    public bool IsVirtualized()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsVirtualized"), @params);
    }
    public bool IsPlaying()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsPlaying"), @params);
    }
    public bool HasCookedFFTData()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("HasCookedFFTData"), @params);
    }
    public bool HasCookedAmplitudeEnvelopeData()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("HasCookedAmplitudeEnvelopeData"), @params);
    }
    public EAudioComponentPlayState GetPlayState()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<EAudioComponentPlayState>(GetFunction("GetPlayState"), @params);
    }
    public bool GetCookedFFTDataForAllPlayingSounds(ref TArray<FSoundWaveSpectralDataPerSound> OutSoundWaveSpectralData)
    {
        Span<(string name, object value)> @params = [
            ("OutSoundWaveSpectralData", OutSoundWaveSpectralData)
        ];
        return ProcessEvent<bool>(GetFunction("GetCookedFFTDataForAllPlayingSounds"), @params);
    }
    public bool GetCookedFFTData(ref TArray<float> FrequenciesToGet, ref TArray<FSoundWaveSpectralData> OutSoundWaveSpectralData)
    {
        Span<(string name, object value)> @params = [
            ("FrequenciesToGet", FrequenciesToGet), 
            ("OutSoundWaveSpectralData", OutSoundWaveSpectralData)
        ];
        return ProcessEvent<bool>(GetFunction("GetCookedFFTData"), @params);
    }
    public bool GetCookedEnvelopeDataForAllPlayingSounds(ref TArray<FSoundWaveEnvelopeDataPerSound> OutEnvelopeData)
    {
        Span<(string name, object value)> @params = [
            ("OutEnvelopeData", OutEnvelopeData)
        ];
        return ProcessEvent<bool>(GetFunction("GetCookedEnvelopeDataForAllPlayingSounds"), @params);
    }
    public bool GetCookedEnvelopeData(ref float OutEnvelopeData)
    {
        Span<(string name, object value)> @params = [
            ("OutEnvelopeData", OutEnvelopeData)
        ];
        return ProcessEvent<bool>(GetFunction("GetCookedEnvelopeData"), @params);
    }
    public void FadeOut(float FadeOutDuration, float FadeVolumeLevel, EAudioFaderCurve FadeCurve)
    {
        Span<(string name, object value)> @params = [
            ("FadeOutDuration", FadeOutDuration), 
            ("FadeVolumeLevel", FadeVolumeLevel), 
            ("FadeCurve", FadeCurve)
        ];
        ProcessEvent(GetFunction("FadeOut"), @params);
    }
    public void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, EAudioFaderCurve FadeCurve)
    {
        Span<(string name, object value)> @params = [
            ("FadeInDuration", FadeInDuration), 
            ("FadeVolumeLevel", FadeVolumeLevel), 
            ("StartTime", StartTime), 
            ("FadeCurve", FadeCurve)
        ];
        ProcessEvent(GetFunction("FadeIn"), @params);
    }
    public bool BP_GetAttenuationSettingsToApply(ref FSoundAttenuationSettings OutAttenuationSettings)
    {
        Span<(string name, object value)> @params = [
            ("OutAttenuationSettings", OutAttenuationSettings)
        ];
        return ProcessEvent<bool>(GetFunction("BP_GetAttenuationSettingsToApply"), @params);
    }
    public void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, EAudioFaderCurve FadeCurve)
    {
        Span<(string name, object value)> @params = [
            ("AdjustVolumeDuration", AdjustVolumeDuration), 
            ("AdjustVolumeLevel", AdjustVolumeLevel), 
            ("FadeCurve", FadeCurve)
        ];
        ProcessEvent(GetFunction("AdjustVolume"), @params);
    }
    public void AdjustAttenuation(ref FSoundAttenuationSettings InAttenuationSettings)
    {
        Span<(string name, object value)> @params = [
            ("InAttenuationSettings", InAttenuationSettings)
        ];
        ProcessEvent(GetFunction("AdjustAttenuation"), @params);
    }
}

public unsafe class AssetImportData : ObjectBase<UAssetImportData>
{
    public AssetImportData(IntPtr pointer) : base(pointer) {}}

public unsafe class AssetUserData : ObjectBase<UAssetUserData>
{
    public AssetUserData(IntPtr pointer) : base(pointer) {}}

public unsafe class MovementComponent : ObjectBase<UMovementComponent>
{
    public MovementComponent(IntPtr pointer) : base(pointer) {}
    public void StopMovementImmediately()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("StopMovementImmediately"), @params);
    }
    public void SnapUpdatedComponentToPlane()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("SnapUpdatedComponentToPlane"), @params);
    }
    public void SetUpdatedComponent(USceneComponent* NewUpdatedComponent)
    {
        Span<(string name, object value)> @params = [
            ("NewUpdatedComponent", (IntPtr)NewUpdatedComponent)
        ];
        ProcessEvent(GetFunction("SetUpdatedComponent"), @params);
    }
    public void SetPlaneConstraintOrigin(FVector PlaneOrigin)
    {
        Span<(string name, object value)> @params = [
            ("PlaneOrigin", PlaneOrigin)
        ];
        ProcessEvent(GetFunction("SetPlaneConstraintOrigin"), @params);
    }
    public void SetPlaneConstraintNormal(FVector PlaneNormal)
    {
        Span<(string name, object value)> @params = [
            ("PlaneNormal", PlaneNormal)
        ];
        ProcessEvent(GetFunction("SetPlaneConstraintNormal"), @params);
    }
    public void SetPlaneConstraintFromVectors(FVector Forward, FVector Up)
    {
        Span<(string name, object value)> @params = [
            ("Forward", Forward), 
            ("Up", Up)
        ];
        ProcessEvent(GetFunction("SetPlaneConstraintFromVectors"), @params);
    }
    public void SetPlaneConstraintEnabled(bool bEnabled)
    {
        Span<(string name, object value)> @params = [
            ("bEnabled", bEnabled)
        ];
        ProcessEvent(GetFunction("SetPlaneConstraintEnabled"), @params);
    }
    public void SetPlaneConstraintAxisSetting(EPlaneConstraintAxisSetting NewAxisSetting)
    {
        Span<(string name, object value)> @params = [
            ("NewAxisSetting", NewAxisSetting)
        ];
        ProcessEvent(GetFunction("SetPlaneConstraintAxisSetting"), @params);
    }
    public void PhysicsVolumeChanged(APhysicsVolume* NewVolume)
    {
        Span<(string name, object value)> @params = [
            ("NewVolume", (IntPtr)NewVolume)
        ];
        ProcessEvent(GetFunction("PhysicsVolumeChanged"), @params);
    }
    public bool K2_MoveUpdatedComponent(FVector Delta, FRotator NewRotation, ref FHitResult OutHit, bool bSweep, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("Delta", Delta), 
            ("NewRotation", NewRotation), 
            ("OutHit", OutHit), 
            ("bSweep", bSweep), 
            ("bTeleport", bTeleport)
        ];
        return ProcessEvent<bool>(GetFunction("K2_MoveUpdatedComponent"), @params);
    }
    public float K2_GetModifiedMaxSpeed()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("K2_GetModifiedMaxSpeed"), @params);
    }
    public float K2_GetMaxSpeedModifier()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("K2_GetMaxSpeedModifier"), @params);
    }
    public bool IsExceedingMaxSpeed(float MaxSpeed)
    {
        Span<(string name, object value)> @params = [
            ("MaxSpeed", MaxSpeed)
        ];
        return ProcessEvent<bool>(GetFunction("IsExceedingMaxSpeed"), @params);
    }
    public FVector GetPlaneConstraintOrigin()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetPlaneConstraintOrigin"), @params);
    }
    public FVector GetPlaneConstraintNormal()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetPlaneConstraintNormal"), @params);
    }
    public EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<EPlaneConstraintAxisSetting>(GetFunction("GetPlaneConstraintAxisSetting"), @params);
    }
    public APhysicsVolume* GetPhysicsVolume()
    {
        Span<(string name, object value)> @params = [
        ];
        return (APhysicsVolume*)ProcessEvent<IntPtr>(GetFunction("GetPhysicsVolume"), @params);
    }
    public float GetMaxSpeed()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetMaxSpeed"), @params);
    }
    public float GetGravityZ()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetGravityZ"), @params);
    }
    public FVector ConstrainNormalToPlane(FVector Normal)
    {
        Span<(string name, object value)> @params = [
            ("Normal", Normal)
        ];
        return ProcessEvent<FVector>(GetFunction("ConstrainNormalToPlane"), @params);
    }
    public FVector ConstrainLocationToPlane(FVector Location)
    {
        Span<(string name, object value)> @params = [
            ("Location", Location)
        ];
        return ProcessEvent<FVector>(GetFunction("ConstrainLocationToPlane"), @params);
    }
    public FVector ConstrainDirectionToPlane(FVector Direction)
    {
        Span<(string name, object value)> @params = [
            ("Direction", Direction)
        ];
        return ProcessEvent<FVector>(GetFunction("ConstrainDirectionToPlane"), @params);
    }
}

public unsafe class NavMovementComponent : ObjectBase<UNavMovementComponent>
{
    public NavMovementComponent(IntPtr pointer) : base(pointer) {}
    public void StopMovementKeepPathing()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("StopMovementKeepPathing"), @params);
    }
    public void StopActiveMovement()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("StopActiveMovement"), @params);
    }
    public bool IsSwimming()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsSwimming"), @params);
    }
    public bool IsMovingOnGround()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsMovingOnGround"), @params);
    }
    public bool IsFlying()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsFlying"), @params);
    }
    public bool IsFalling()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsFalling"), @params);
    }
    public bool IsCrouching()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsCrouching"), @params);
    }
}

public unsafe class PawnMovementComponent : ObjectBase<UPawnMovementComponent>
{
    public PawnMovementComponent(IntPtr pointer) : base(pointer) {}
    public FVector K2_GetInputVector()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("K2_GetInputVector"), @params);
    }
    public bool IsMoveInputIgnored()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsMoveInputIgnored"), @params);
    }
    public FVector GetPendingInputVector()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetPendingInputVector"), @params);
    }
    public APawn* GetPawnOwner()
    {
        Span<(string name, object value)> @params = [
        ];
        return (APawn*)ProcessEvent<IntPtr>(GetFunction("GetPawnOwner"), @params);
    }
    public FVector GetLastInputVector()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetLastInputVector"), @params);
    }
    public FVector ConsumeInputVector()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("ConsumeInputVector"), @params);
    }
    public void AddInputVector(FVector WorldVector, bool bForce)
    {
        Span<(string name, object value)> @params = [
            ("WorldVector", WorldVector), 
            ("bForce", bForce)
        ];
        ProcessEvent(GetFunction("AddInputVector"), @params);
    }
}

public unsafe class CharacterMovementComponent : ObjectBase<UCharacterMovementComponent>
{
    public CharacterMovementComponent(IntPtr pointer) : base(pointer) {}
    public void SetWalkableFloorZ(float InWalkableFloorZ)
    {
        Span<(string name, object value)> @params = [
            ("InWalkableFloorZ", InWalkableFloorZ)
        ];
        ProcessEvent(GetFunction("SetWalkableFloorZ"), @params);
    }
    public void SetWalkableFloorAngle(float InWalkableFloorAngle)
    {
        Span<(string name, object value)> @params = [
            ("InWalkableFloorAngle", InWalkableFloorAngle)
        ];
        ProcessEvent(GetFunction("SetWalkableFloorAngle"), @params);
    }
    public void SetMovementMode(EMovementMode NewMovementMode, byte NewCustomMode)
    {
        Span<(string name, object value)> @params = [
            ("NewMovementMode", NewMovementMode), 
            ("NewCustomMode", NewCustomMode)
        ];
        ProcessEvent(GetFunction("SetMovementMode"), @params);
    }
    public void SetGroupsToIgnoreMask(ref FNavAvoidanceMask GroupMask)
    {
        Span<(string name, object value)> @params = [
            ("GroupMask", GroupMask)
        ];
        ProcessEvent(GetFunction("SetGroupsToIgnoreMask"), @params);
    }
    public void SetGroupsToIgnore(int GroupFlags)
    {
        Span<(string name, object value)> @params = [
            ("GroupFlags", GroupFlags)
        ];
        ProcessEvent(GetFunction("SetGroupsToIgnore"), @params);
    }
    public void SetGroupsToAvoidMask(ref FNavAvoidanceMask GroupMask)
    {
        Span<(string name, object value)> @params = [
            ("GroupMask", GroupMask)
        ];
        ProcessEvent(GetFunction("SetGroupsToAvoidMask"), @params);
    }
    public void SetGroupsToAvoid(int GroupFlags)
    {
        Span<(string name, object value)> @params = [
            ("GroupFlags", GroupFlags)
        ];
        ProcessEvent(GetFunction("SetGroupsToAvoid"), @params);
    }
    public void SetAvoidanceGroupMask(ref FNavAvoidanceMask GroupMask)
    {
        Span<(string name, object value)> @params = [
            ("GroupMask", GroupMask)
        ];
        ProcessEvent(GetFunction("SetAvoidanceGroupMask"), @params);
    }
    public void SetAvoidanceGroup(int GroupFlags)
    {
        Span<(string name, object value)> @params = [
            ("GroupFlags", GroupFlags)
        ];
        ProcessEvent(GetFunction("SetAvoidanceGroup"), @params);
    }
    public void SetAvoidanceEnabled(bool bEnable)
    {
        Span<(string name, object value)> @params = [
            ("bEnable", bEnable)
        ];
        ProcessEvent(GetFunction("SetAvoidanceEnabled"), @params);
    }
    public float K2_GetWalkableFloorZ()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("K2_GetWalkableFloorZ"), @params);
    }
    public float K2_GetWalkableFloorAngle()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("K2_GetWalkableFloorAngle"), @params);
    }
    public float K2_GetModifiedMaxAcceleration()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("K2_GetModifiedMaxAcceleration"), @params);
    }
    public void K2_FindFloor(FVector CapsuleLocation, ref FFindFloorResult FloorResult)
    {
        Span<(string name, object value)> @params = [
            ("CapsuleLocation", CapsuleLocation), 
            ("FloorResult", FloorResult)
        ];
        ProcessEvent(GetFunction("K2_FindFloor"), @params);
    }
    public void K2_ComputeFloorDist(FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, ref FFindFloorResult FloorResult)
    {
        Span<(string name, object value)> @params = [
            ("CapsuleLocation", CapsuleLocation), 
            ("LineDistance", LineDistance), 
            ("SweepDistance", SweepDistance), 
            ("SweepRadius", SweepRadius), 
            ("FloorResult", FloorResult)
        ];
        ProcessEvent(GetFunction("K2_ComputeFloorDist"), @params);
    }
    public bool IsWalking()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsWalking"), @params);
    }
    public bool IsWalkable(ref FHitResult Hit)
    {
        Span<(string name, object value)> @params = [
            ("Hit", Hit)
        ];
        return ProcessEvent<bool>(GetFunction("IsWalkable"), @params);
    }
    public float GetValidPerchRadius()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetValidPerchRadius"), @params);
    }
    public float GetPerchRadiusThreshold()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetPerchRadiusThreshold"), @params);
    }
    public UPrimitiveComponent* GetMovementBase()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UPrimitiveComponent*)ProcessEvent<IntPtr>(GetFunction("GetMovementBase"), @params);
    }
    public float GetMinAnalogSpeed()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetMinAnalogSpeed"), @params);
    }
    public float GetMaxJumpHeightWithJumpTime()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetMaxJumpHeightWithJumpTime"), @params);
    }
    public float GetMaxJumpHeight()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetMaxJumpHeight"), @params);
    }
    public float GetMaxBrakingDeceleration()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetMaxBrakingDeceleration"), @params);
    }
    public float GetMaxAcceleration()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetMaxAcceleration"), @params);
    }
    public FVector GetLastUpdateVelocity()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetLastUpdateVelocity"), @params);
    }
    public FRotator GetLastUpdateRotation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FRotator>(GetFunction("GetLastUpdateRotation"), @params);
    }
    public FVector GetLastUpdateLocation()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetLastUpdateLocation"), @params);
    }
    public FVector GetImpartedMovementBaseVelocity()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetImpartedMovementBaseVelocity"), @params);
    }
    public FVector GetCurrentAcceleration()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetCurrentAcceleration"), @params);
    }
    public ACharacter* GetCharacterOwner()
    {
        Span<(string name, object value)> @params = [
        ];
        return (ACharacter*)ProcessEvent<IntPtr>(GetFunction("GetCharacterOwner"), @params);
    }
    public float GetAnalogInputModifier()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetAnalogInputModifier"), @params);
    }
    public void DisableMovement()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("DisableMovement"), @params);
    }
    public void ClearAccumulatedForces()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClearAccumulatedForces"), @params);
    }
    public void CapsuleTouched(UPrimitiveComponent* OverlappedComp, AActor* Other, UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, ref FHitResult SweepResult)
    {
        Span<(string name, object value)> @params = [
            ("OverlappedComp", (IntPtr)OverlappedComp), 
            ("Other", (IntPtr)Other), 
            ("OtherComp", (IntPtr)OtherComp), 
            ("OtherBodyIndex", OtherBodyIndex), 
            ("bFromSweep", bFromSweep), 
            ("SweepResult", SweepResult)
        ];
        ProcessEvent(GetFunction("CapsuleTouched"), @params);
    }
    public void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration)
    {
        Span<(string name, object value)> @params = [
            ("DeltaTime", DeltaTime), 
            ("Friction", Friction), 
            ("bFluid", bFluid), 
            ("BrakingDeceleration", BrakingDeceleration)
        ];
        ProcessEvent(GetFunction("CalcVelocity"), @params);
    }
    public void AddImpulse(FVector Impulse, bool bVelocityChange)
    {
        Span<(string name, object value)> @params = [
            ("Impulse", Impulse), 
            ("bVelocityChange", bVelocityChange)
        ];
        ProcessEvent(GetFunction("AddImpulse"), @params);
    }
    public void AddForce(FVector Force)
    {
        Span<(string name, object value)> @params = [
            ("Force", Force)
        ];
        ProcessEvent(GetFunction("AddForce"), @params);
    }
}

public unsafe class DynamicSubsystem : ObjectBase<UDynamicSubsystem>
{
    public DynamicSubsystem(IntPtr pointer) : base(pointer) {}}

public unsafe class EngineSubsystem : ObjectBase<UEngineSubsystem>
{
    public EngineSubsystem(IntPtr pointer) : base(pointer) {}}

public unsafe class SoundEffectPreset : ObjectBase<USoundEffectPreset>
{
    public SoundEffectPreset(IntPtr pointer) : base(pointer) {}}

public unsafe class SoundEffectSourcePreset : ObjectBase<USoundEffectSourcePreset>
{
    public SoundEffectSourcePreset(IntPtr pointer) : base(pointer) {}}

public unsafe class SoundEffectSubmixPreset : ObjectBase<USoundEffectSubmixPreset>
{
    public SoundEffectSubmixPreset(IntPtr pointer) : base(pointer) {}}

public unsafe class ShapeComponent : ObjectBase<UShapeComponent>
{
    public ShapeComponent(IntPtr pointer) : base(pointer) {}
}

public unsafe class BoxComponent : ObjectBase<UBoxComponent>
{
    public BoxComponent(IntPtr pointer) : base(pointer) {}
    public void SetBoxExtent(FVector InBoxExtent, bool bUpdateOverlaps)
    {
        Span<(string name, object value)> @params = [
            ("InBoxExtent", InBoxExtent), 
            ("bUpdateOverlaps", bUpdateOverlaps)
        ];
        ProcessEvent(GetFunction("SetBoxExtent"), @params);
    }
    public FVector GetUnscaledBoxExtent()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetUnscaledBoxExtent"), @params);
    }
    public FVector GetScaledBoxExtent()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("GetScaledBoxExtent"), @params);
    }
}

public unsafe class SphereComponent : ObjectBase<USphereComponent>
{
    public SphereComponent(IntPtr pointer) : base(pointer) {}
    public void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps)
    {
        Span<(string name, object value)> @params = [
            ("InSphereRadius", InSphereRadius), 
            ("bUpdateOverlaps", bUpdateOverlaps)
        ];
        ProcessEvent(GetFunction("SetSphereRadius"), @params);
    }
    public float GetUnscaledSphereRadius()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetUnscaledSphereRadius"), @params);
    }
    public float GetShapeScale()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetShapeScale"), @params);
    }
    public float GetScaledSphereRadius()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetScaledSphereRadius"), @params);
    }
}

public unsafe class TriggerVolume : ObjectBase<ATriggerVolume>
{
    public TriggerVolume(IntPtr pointer) : base(pointer) {}}

public unsafe class CheatManager : ObjectBase<UCheatManager>
{
    public CheatManager(IntPtr pointer) : base(pointer) {}
    public void Walk()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Walk"), @params);
    }
    public void ViewSelf()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ViewSelf"), @params);
    }
    public void ViewPlayer(FString S)
    {
        Span<(string name, object value)> @params = [
            ("S", S)
        ];
        ProcessEvent(GetFunction("ViewPlayer"), @params);
    }
    public void ViewClass(TSubclassOf<AActor> DesiredClass)
    {
        Span<(string name, object value)> @params = [
            ("DesiredClass", DesiredClass)
        ];
        ProcessEvent(GetFunction("ViewClass"), @params);
    }
    public void ViewActor(FName actorName)
    {
        Span<(string name, object value)> @params = [
            ("actorName", actorName)
        ];
        ProcessEvent(GetFunction("ViewActor"), @params);
    }
    public void UpdateSafeArea()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("UpdateSafeArea"), @params);
    }
    public void ToggleServerStatReplicatorUpdateStatNet()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ToggleServerStatReplicatorUpdateStatNet"), @params);
    }
    public void ToggleServerStatReplicatorClientOverwrite()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ToggleServerStatReplicatorClientOverwrite"), @params);
    }
    public void ToggleDebugCamera()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ToggleDebugCamera"), @params);
    }
    public void ToggleAILogging()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ToggleAILogging"), @params);
    }
    public void TestCollisionDistance()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("TestCollisionDistance"), @params);
    }
    public void Teleport()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Teleport"), @params);
    }
    public void Summon(FString ClassName)
    {
        Span<(string name, object value)> @params = [
            ("ClassName", ClassName)
        ];
        ProcessEvent(GetFunction("Summon"), @params);
    }
    public void StreamLevelOut(FName PackageName)
    {
        Span<(string name, object value)> @params = [
            ("PackageName", PackageName)
        ];
        ProcessEvent(GetFunction("StreamLevelOut"), @params);
    }
    public void StreamLevelIn(FName PackageName)
    {
        Span<(string name, object value)> @params = [
            ("PackageName", PackageName)
        ];
        ProcessEvent(GetFunction("StreamLevelIn"), @params);
    }
    public void SpawnServerStatReplicator()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("SpawnServerStatReplicator"), @params);
    }
    public void Slomo(float NewTimeDilation)
    {
        Span<(string name, object value)> @params = [
            ("NewTimeDilation", NewTimeDilation)
        ];
        ProcessEvent(GetFunction("Slomo"), @params);
    }
    public void SetWorldOrigin()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("SetWorldOrigin"), @params);
    }
    public void SetMouseSensitivityToDefault()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("SetMouseSensitivityToDefault"), @params);
    }
    public void ServerToggleAILogging()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ServerToggleAILogging"), @params);
    }
    public void ReceiveInitCheatManager()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ReceiveInitCheatManager"), @params);
    }
    public void ReceiveEndPlay()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ReceiveEndPlay"), @params);
    }
    public void PlayersOnly()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("PlayersOnly"), @params);
    }
    public void OnlyLoadLevel(FName PackageName)
    {
        Span<(string name, object value)> @params = [
            ("PackageName", PackageName)
        ];
        ProcessEvent(GetFunction("OnlyLoadLevel"), @params);
    }
    public void LogLoc()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("LogLoc"), @params);
    }
    public void InvertMouse()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("InvertMouse"), @params);
    }
    public void God()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("God"), @params);
    }
    public void Ghost()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Ghost"), @params);
    }
    public void FreezeFrame(float Delay)
    {
        Span<(string name, object value)> @params = [
            ("Delay", Delay)
        ];
        ProcessEvent(GetFunction("FreezeFrame"), @params);
    }
    public void Fly()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Fly"), @params);
    }
    public void FlushLog()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("FlushLog"), @params);
    }
    public void EnableDebugCamera()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("EnableDebugCamera"), @params);
    }
    public void DumpVoiceMutingState()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("DumpVoiceMutingState"), @params);
    }
    public void DumpPartyState()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("DumpPartyState"), @params);
    }
    public void DumpOnlineSessionState()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("DumpOnlineSessionState"), @params);
    }
    public void DumpChatState()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("DumpChatState"), @params);
    }
    public void DisableDebugCamera()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("DisableDebugCamera"), @params);
    }
    public void DestroyTarget()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("DestroyTarget"), @params);
    }
    public void DestroyServerStatReplicator()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("DestroyServerStatReplicator"), @params);
    }
    public void DestroyPawns(TSubclassOf<APawn> aClass)
    {
        Span<(string name, object value)> @params = [
            ("aClass", aClass)
        ];
        ProcessEvent(GetFunction("DestroyPawns"), @params);
    }
    public void DestroyAllPawnsExceptTarget()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("DestroyAllPawnsExceptTarget"), @params);
    }
    public void DestroyAll(TSubclassOf<AActor> aClass)
    {
        Span<(string name, object value)> @params = [
            ("aClass", aClass)
        ];
        ProcessEvent(GetFunction("DestroyAll"), @params);
    }
    public void DebugCapsuleSweepSize(float HalfHeight, float Radius)
    {
        Span<(string name, object value)> @params = [
            ("HalfHeight", HalfHeight), 
            ("Radius", Radius)
        ];
        ProcessEvent(GetFunction("DebugCapsuleSweepSize"), @params);
    }
    public void DebugCapsuleSweepPawn()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("DebugCapsuleSweepPawn"), @params);
    }
    public void DebugCapsuleSweepComplex(bool bTraceComplex)
    {
        Span<(string name, object value)> @params = [
            ("bTraceComplex", bTraceComplex)
        ];
        ProcessEvent(GetFunction("DebugCapsuleSweepComplex"), @params);
    }
    public void DebugCapsuleSweepClear()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("DebugCapsuleSweepClear"), @params);
    }
    public void DebugCapsuleSweepChannel(ECollisionChannel Channel)
    {
        Span<(string name, object value)> @params = [
            ("Channel", Channel)
        ];
        ProcessEvent(GetFunction("DebugCapsuleSweepChannel"), @params);
    }
    public void DebugCapsuleSweepCapture()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("DebugCapsuleSweepCapture"), @params);
    }
    public void DebugCapsuleSweep()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("DebugCapsuleSweep"), @params);
    }
    public void DamageTarget(float DamageAmount)
    {
        Span<(string name, object value)> @params = [
            ("DamageAmount", DamageAmount)
        ];
        ProcessEvent(GetFunction("DamageTarget"), @params);
    }
    public void CheatScript(FString ScriptName)
    {
        Span<(string name, object value)> @params = [
            ("ScriptName", ScriptName)
        ];
        ProcessEvent(GetFunction("CheatScript"), @params);
    }
    public void ChangeSize(float F)
    {
        Span<(string name, object value)> @params = [
            ("F", F)
        ];
        ProcessEvent(GetFunction("ChangeSize"), @params);
    }
    public void BugItStringCreator(FVector ViewLocation, FRotator ViewRotation, ref FString GoString, ref FString LocString)
    {
        Span<(string name, object value)> @params = [
            ("ViewLocation", ViewLocation), 
            ("ViewRotation", ViewRotation), 
            ("GoString", GoString), 
            ("LocString", LocString)
        ];
        ProcessEvent(GetFunction("BugItStringCreator"), @params);
    }
    public void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll)
    {
        Span<(string name, object value)> @params = [
            ("X", X), 
            ("Y", Y), 
            ("Z", Z), 
            ("Pitch", Pitch), 
            ("Yaw", Yaw), 
            ("Roll", Roll)
        ];
        ProcessEvent(GetFunction("BugItGo"), @params);
    }
    public void BugIt(FString ScreenShotDescription)
    {
        Span<(string name, object value)> @params = [
            ("ScreenShotDescription", ScreenShotDescription)
        ];
        ProcessEvent(GetFunction("BugIt"), @params);
    }
}

public unsafe class SceneCapture : ObjectBase<ASceneCapture>
{
    public SceneCapture(IntPtr pointer) : base(pointer) {}
}

public unsafe class SceneCapture2D : ObjectBase<ASceneCapture2D>
{
    public SceneCapture2D(IntPtr pointer) : base(pointer) {}
    public void OnInterpToggle(bool bEnable)
    {
        Span<(string name, object value)> @params = [
            ("bEnable", bEnable)
        ];
        ProcessEvent(GetFunction("OnInterpToggle"), @params);
    }
}

public unsafe class CameraActor : ObjectBase<ACameraActor>
{
    public CameraActor(IntPtr pointer) : base(pointer) {}
    public int GetAutoActivatePlayerIndex()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetAutoActivatePlayerIndex"), @params);
    }
}

public unsafe class NavigationObjectBase : ObjectBase<ANavigationObjectBase>
{
    public NavigationObjectBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class PlayerStart : ObjectBase<APlayerStart>
{
    public PlayerStart(IntPtr pointer) : base(pointer) {}
}

public unsafe class Info : ObjectBase<AInfo>
{
    public Info(IntPtr pointer) : base(pointer) {}}

public unsafe class GameModeBase : ObjectBase<AGameModeBase>
{
    public GameModeBase(IntPtr pointer) : base(pointer) {}
    public void StartPlay()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("StartPlay"), @params);
    }
    public APawn* SpawnDefaultPawnFor(AController* NewPlayer, AActor* StartSpot)
    {
        Span<(string name, object value)> @params = [
            ("NewPlayer", (IntPtr)NewPlayer), 
            ("StartSpot", (IntPtr)StartSpot)
        ];
        return (APawn*)ProcessEvent<IntPtr>(GetFunction("SpawnDefaultPawnFor"), @params);
    }
    public APawn* SpawnDefaultPawnAtTransform(AController* NewPlayer, ref FTransform SpawnTransform)
    {
        Span<(string name, object value)> @params = [
            ("NewPlayer", (IntPtr)NewPlayer), 
            ("SpawnTransform", SpawnTransform)
        ];
        return (APawn*)ProcessEvent<IntPtr>(GetFunction("SpawnDefaultPawnAtTransform"), @params);
    }
    public bool ShouldReset(AActor* ActorToReset)
    {
        Span<(string name, object value)> @params = [
            ("ActorToReset", (IntPtr)ActorToReset)
        ];
        return ProcessEvent<bool>(GetFunction("ShouldReset"), @params);
    }
    public void ReturnToMainMenuHost()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ReturnToMainMenuHost"), @params);
    }
    public void RestartPlayerAtTransform(AController* NewPlayer, ref FTransform SpawnTransform)
    {
        Span<(string name, object value)> @params = [
            ("NewPlayer", (IntPtr)NewPlayer), 
            ("SpawnTransform", SpawnTransform)
        ];
        ProcessEvent(GetFunction("RestartPlayerAtTransform"), @params);
    }
    public void RestartPlayerAtPlayerStart(AController* NewPlayer, AActor* StartSpot)
    {
        Span<(string name, object value)> @params = [
            ("NewPlayer", (IntPtr)NewPlayer), 
            ("StartSpot", (IntPtr)StartSpot)
        ];
        ProcessEvent(GetFunction("RestartPlayerAtPlayerStart"), @params);
    }
    public void RestartPlayer(AController* NewPlayer)
    {
        Span<(string name, object value)> @params = [
            ("NewPlayer", (IntPtr)NewPlayer)
        ];
        ProcessEvent(GetFunction("RestartPlayer"), @params);
    }
    public void ResetLevel()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ResetLevel"), @params);
    }
    public bool PlayerCanRestart(APlayerController* Player)
    {
        Span<(string name, object value)> @params = [
            ("Player", (IntPtr)Player)
        ];
        return ProcessEvent<bool>(GetFunction("PlayerCanRestart"), @params);
    }
    public bool MustSpectate(APlayerController* NewPlayerController)
    {
        Span<(string name, object value)> @params = [
            ("NewPlayerController", (IntPtr)NewPlayerController)
        ];
        return ProcessEvent<bool>(GetFunction("MustSpectate"), @params);
    }
    public void K2_PostLogin(APlayerController* NewPlayer)
    {
        Span<(string name, object value)> @params = [
            ("NewPlayer", (IntPtr)NewPlayer)
        ];
        ProcessEvent(GetFunction("K2_PostLogin"), @params);
    }
    public void K2_OnSwapPlayerControllers(APlayerController* OldPC, APlayerController* NewPC)
    {
        Span<(string name, object value)> @params = [
            ("OldPC", (IntPtr)OldPC), 
            ("NewPC", (IntPtr)NewPC)
        ];
        ProcessEvent(GetFunction("K2_OnSwapPlayerControllers"), @params);
    }
    public void K2_OnRestartPlayer(AController* NewPlayer)
    {
        Span<(string name, object value)> @params = [
            ("NewPlayer", (IntPtr)NewPlayer)
        ];
        ProcessEvent(GetFunction("K2_OnRestartPlayer"), @params);
    }
    public void K2_OnLogout(AController* ExitingController)
    {
        Span<(string name, object value)> @params = [
            ("ExitingController", (IntPtr)ExitingController)
        ];
        ProcessEvent(GetFunction("K2_OnLogout"), @params);
    }
    public void K2_OnChangeName(AController* Other, FString NewName, bool bNameChange)
    {
        Span<(string name, object value)> @params = [
            ("Other", (IntPtr)Other), 
            ("NewName", NewName), 
            ("bNameChange", bNameChange)
        ];
        ProcessEvent(GetFunction("K2_OnChangeName"), @params);
    }
    public AActor* K2_FindPlayerStart(AController* Player, FString IncomingName)
    {
        Span<(string name, object value)> @params = [
            ("Player", (IntPtr)Player), 
            ("IncomingName", IncomingName)
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("K2_FindPlayerStart"), @params);
    }
    public void InitStartSpot(AActor* StartSpot, AController* NewPlayer)
    {
        Span<(string name, object value)> @params = [
            ("StartSpot", (IntPtr)StartSpot), 
            ("NewPlayer", (IntPtr)NewPlayer)
        ];
        ProcessEvent(GetFunction("InitStartSpot"), @params);
    }
    public void InitializeHUDForPlayer(APlayerController* NewPlayer)
    {
        Span<(string name, object value)> @params = [
            ("NewPlayer", (IntPtr)NewPlayer)
        ];
        ProcessEvent(GetFunction("InitializeHUDForPlayer"), @params);
    }
    public bool HasMatchStarted()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("HasMatchStarted"), @params);
    }
    public bool HasMatchEnded()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("HasMatchEnded"), @params);
    }
    public void HandleStartingNewPlayer(APlayerController* NewPlayer)
    {
        Span<(string name, object value)> @params = [
            ("NewPlayer", (IntPtr)NewPlayer)
        ];
        ProcessEvent(GetFunction("HandleStartingNewPlayer"), @params);
    }
    public int GetNumSpectators()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetNumSpectators"), @params);
    }
    public int GetNumPlayers()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetNumPlayers"), @params);
    }
    public UClass* GetDefaultPawnClassForController(AController* InController)
    {
        Span<(string name, object value)> @params = [
            ("InController", (IntPtr)InController)
        ];
        return (UClass*)ProcessEvent<IntPtr>(GetFunction("GetDefaultPawnClassForController"), @params);
    }
    public AActor* FindPlayerStart(AController* Player, FString IncomingName)
    {
        Span<(string name, object value)> @params = [
            ("Player", (IntPtr)Player), 
            ("IncomingName", IncomingName)
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("FindPlayerStart"), @params);
    }
    public AActor* ChoosePlayerStart(AController* Player)
    {
        Span<(string name, object value)> @params = [
            ("Player", (IntPtr)Player)
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("ChoosePlayerStart"), @params);
    }
    public void ChangeName(AController* Controller, FString NewName, bool bNameChange)
    {
        Span<(string name, object value)> @params = [
            ("Controller", (IntPtr)Controller), 
            ("NewName", NewName), 
            ("bNameChange", bNameChange)
        ];
        ProcessEvent(GetFunction("ChangeName"), @params);
    }
    public bool CanSpectate(APlayerController* Viewer, APlayerState* ViewTarget)
    {
        Span<(string name, object value)> @params = [
            ("Viewer", (IntPtr)Viewer), 
            ("ViewTarget", (IntPtr)ViewTarget)
        ];
        return ProcessEvent<bool>(GetFunction("CanSpectate"), @params);
    }
}

public unsafe class HUD : ObjectBase<AHUD>
{
    public HUD(IntPtr pointer) : base(pointer) {}
    public void ShowHUD()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ShowHUD"), @params);
    }
    public void ShowDebugToggleSubCategory(FName Category)
    {
        Span<(string name, object value)> @params = [
            ("Category", Category)
        ];
        ProcessEvent(GetFunction("ShowDebugToggleSubCategory"), @params);
    }
    public void ShowDebugForReticleTargetToggle(TSubclassOf<AActor> DesiredClass)
    {
        Span<(string name, object value)> @params = [
            ("DesiredClass", DesiredClass)
        ];
        ProcessEvent(GetFunction("ShowDebugForReticleTargetToggle"), @params);
    }
    public void ShowDebug(FName DebugType)
    {
        Span<(string name, object value)> @params = [
            ("DebugType", DebugType)
        ];
        ProcessEvent(GetFunction("ShowDebug"), @params);
    }
    public void RemoveDebugText(AActor* SrcActor, bool bLeaveDurationText)
    {
        Span<(string name, object value)> @params = [
            ("SrcActor", (IntPtr)SrcActor), 
            ("bLeaveDurationText", bLeaveDurationText)
        ];
        ProcessEvent(GetFunction("RemoveDebugText"), @params);
    }
    public void RemoveAllDebugStrings()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("RemoveAllDebugStrings"), @params);
    }
    public void ReceiveHitBoxRelease(FName BoxName)
    {
        Span<(string name, object value)> @params = [
            ("BoxName", BoxName)
        ];
        ProcessEvent(GetFunction("ReceiveHitBoxRelease"), @params);
    }
    public void ReceiveHitBoxEndCursorOver(FName BoxName)
    {
        Span<(string name, object value)> @params = [
            ("BoxName", BoxName)
        ];
        ProcessEvent(GetFunction("ReceiveHitBoxEndCursorOver"), @params);
    }
    public void ReceiveHitBoxClick(FName BoxName)
    {
        Span<(string name, object value)> @params = [
            ("BoxName", BoxName)
        ];
        ProcessEvent(GetFunction("ReceiveHitBoxClick"), @params);
    }
    public void ReceiveHitBoxBeginCursorOver(FName BoxName)
    {
        Span<(string name, object value)> @params = [
            ("BoxName", BoxName)
        ];
        ProcessEvent(GetFunction("ReceiveHitBoxBeginCursorOver"), @params);
    }
    public void ReceiveDrawHUD(int SizeX, int SizeY)
    {
        Span<(string name, object value)> @params = [
            ("SizeX", SizeX), 
            ("SizeY", SizeY)
        ];
        ProcessEvent(GetFunction("ReceiveDrawHUD"), @params);
    }
    public FVector Project(FVector Location)
    {
        Span<(string name, object value)> @params = [
            ("Location", Location)
        ];
        return ProcessEvent<FVector>(GetFunction("Project"), @params);
    }
    public void PreviousDebugTarget()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("PreviousDebugTarget"), @params);
    }
    public void NextDebugTarget()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("NextDebugTarget"), @params);
    }
    public void GetTextSize(FString Text, ref float OutWidth, ref float OutHeight, UFont* Font, float Scale)
    {
        Span<(string name, object value)> @params = [
            ("Text", Text), 
            ("OutWidth", OutWidth), 
            ("OutHeight", OutHeight), 
            ("Font", (IntPtr)Font), 
            ("Scale", Scale)
        ];
        ProcessEvent(GetFunction("GetTextSize"), @params);
    }
    public APlayerController* GetOwningPlayerController()
    {
        Span<(string name, object value)> @params = [
        ];
        return (APlayerController*)ProcessEvent<IntPtr>(GetFunction("GetOwningPlayerController"), @params);
    }
    public APawn* GetOwningPawn()
    {
        Span<(string name, object value)> @params = [
        ];
        return (APawn*)ProcessEvent<IntPtr>(GetFunction("GetOwningPawn"), @params);
    }
    public void GetActorsInSelectionRectangle(TSubclassOf<AActor> ClassFilter, ref FVector2D FirstPoint, ref FVector2D SecondPoint, ref TArray<IntPtr> OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed)
    {
        Span<(string name, object value)> @params = [
            ("ClassFilter", ClassFilter), 
            ("FirstPoint", FirstPoint), 
            ("SecondPoint", SecondPoint), 
            ("OutActors", OutActors), 
            ("bIncludeNonCollidingComponents", bIncludeNonCollidingComponents), 
            ("bActorMustBeFullyEnclosed", bActorMustBeFullyEnclosed)
        ];
        ProcessEvent(GetFunction("GetActorsInSelectionRectangle"), @params);
    }
    public void DrawTextureSimple(UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition)
    {
        Span<(string name, object value)> @params = [
            ("Texture", (IntPtr)Texture), 
            ("ScreenX", ScreenX), 
            ("ScreenY", ScreenY), 
            ("Scale", Scale), 
            ("bScalePosition", bScalePosition)
        ];
        ProcessEvent(GetFunction("DrawTextureSimple"), @params);
    }
    public void DrawTexture(UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, FLinearColor TintColor, EBlendMode BlendMode, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot)
    {
        Span<(string name, object value)> @params = [
            ("Texture", (IntPtr)Texture), 
            ("ScreenX", ScreenX), 
            ("ScreenY", ScreenY), 
            ("ScreenW", ScreenW), 
            ("ScreenH", ScreenH), 
            ("TextureU", TextureU), 
            ("TextureV", TextureV), 
            ("TextureUWidth", TextureUWidth), 
            ("TextureVHeight", TextureVHeight), 
            ("TintColor", TintColor), 
            ("BlendMode", BlendMode), 
            ("Scale", Scale), 
            ("bScalePosition", bScalePosition), 
            ("Rotation", Rotation), 
            ("RotPivot", RotPivot)
        ];
        ProcessEvent(GetFunction("DrawTexture"), @params);
    }
    public void DrawText(FString Text, FLinearColor TextColor, float ScreenX, float ScreenY, UFont* Font, float Scale, bool bScalePosition)
    {
        Span<(string name, object value)> @params = [
            ("Text", Text), 
            ("TextColor", TextColor), 
            ("ScreenX", ScreenX), 
            ("ScreenY", ScreenY), 
            ("Font", (IntPtr)Font), 
            ("Scale", Scale), 
            ("bScalePosition", bScalePosition)
        ];
        ProcessEvent(GetFunction("DrawText"), @params);
    }
    public void DrawRect(FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH)
    {
        Span<(string name, object value)> @params = [
            ("RectColor", RectColor), 
            ("ScreenX", ScreenX), 
            ("ScreenY", ScreenY), 
            ("ScreenW", ScreenW), 
            ("ScreenH", ScreenH)
        ];
        ProcessEvent(GetFunction("DrawRect"), @params);
    }
    public void DrawMaterialTriangle(UMaterialInterface* Material, FVector2D V0_Pos, FVector2D V1_Pos, FVector2D V2_Pos, FVector2D V0_UV, FVector2D V1_UV, FVector2D V2_UV, FLinearColor V0_Color, FLinearColor V1_Color, FLinearColor V2_Color)
    {
        Span<(string name, object value)> @params = [
            ("Material", (IntPtr)Material), 
            ("V0_Pos", V0_Pos), 
            ("V1_Pos", V1_Pos), 
            ("V2_Pos", V2_Pos), 
            ("V0_UV", V0_UV), 
            ("V1_UV", V1_UV), 
            ("V2_UV", V2_UV), 
            ("V0_Color", V0_Color), 
            ("V1_Color", V1_Color), 
            ("V2_Color", V2_Color)
        ];
        ProcessEvent(GetFunction("DrawMaterialTriangle"), @params);
    }
    public void DrawMaterialSimple(UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition)
    {
        Span<(string name, object value)> @params = [
            ("Material", (IntPtr)Material), 
            ("ScreenX", ScreenX), 
            ("ScreenY", ScreenY), 
            ("ScreenW", ScreenW), 
            ("ScreenH", ScreenH), 
            ("Scale", Scale), 
            ("bScalePosition", bScalePosition)
        ];
        ProcessEvent(GetFunction("DrawMaterialSimple"), @params);
    }
    public void DrawMaterial(UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot)
    {
        Span<(string name, object value)> @params = [
            ("Material", (IntPtr)Material), 
            ("ScreenX", ScreenX), 
            ("ScreenY", ScreenY), 
            ("ScreenW", ScreenW), 
            ("ScreenH", ScreenH), 
            ("MaterialU", MaterialU), 
            ("MaterialV", MaterialV), 
            ("MaterialUWidth", MaterialUWidth), 
            ("MaterialVHeight", MaterialVHeight), 
            ("Scale", Scale), 
            ("bScalePosition", bScalePosition), 
            ("Rotation", Rotation), 
            ("RotPivot", RotPivot)
        ];
        ProcessEvent(GetFunction("DrawMaterial"), @params);
    }
    public void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, FLinearColor LineColor, float LineThickness)
    {
        Span<(string name, object value)> @params = [
            ("StartScreenX", StartScreenX), 
            ("StartScreenY", StartScreenY), 
            ("EndScreenX", EndScreenX), 
            ("EndScreenY", EndScreenY), 
            ("LineColor", LineColor), 
            ("LineThickness", LineThickness)
        ];
        ProcessEvent(GetFunction("DrawLine"), @params);
    }
    public void Deproject(float ScreenX, float ScreenY, ref FVector WorldPosition, ref FVector WorldDirection)
    {
        Span<(string name, object value)> @params = [
            ("ScreenX", ScreenX), 
            ("ScreenY", ScreenY), 
            ("WorldPosition", WorldPosition), 
            ("WorldDirection", WorldDirection)
        ];
        ProcessEvent(GetFunction("Deproject"), @params);
    }
    public void AddHitBox(FVector2D Position, FVector2D Size, FName InName, bool bConsumesInput, int Priority)
    {
        Span<(string name, object value)> @params = [
            ("Position", Position), 
            ("Size", Size), 
            ("InName", InName), 
            ("bConsumesInput", bConsumesInput), 
            ("Priority", Priority)
        ];
        ProcessEvent(GetFunction("AddHitBox"), @params);
    }
    public void AddDebugText(FString DebugText, AActor* SrcActor, float Duration, FVector Offset, FVector DesiredOffset, FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, UFont* InFont, float FontScale, bool bDrawShadow)
    {
        Span<(string name, object value)> @params = [
            ("DebugText", DebugText), 
            ("SrcActor", (IntPtr)SrcActor), 
            ("Duration", Duration), 
            ("Offset", Offset), 
            ("DesiredOffset", DesiredOffset), 
            ("TextColor", TextColor), 
            ("bSkipOverwriteCheck", bSkipOverwriteCheck), 
            ("bAbsoluteLocation", bAbsoluteLocation), 
            ("bKeepAttachedToActor", bKeepAttachedToActor), 
            ("InFont", (IntPtr)InFont), 
            ("FontScale", FontScale), 
            ("bDrawShadow", bDrawShadow)
        ];
        ProcessEvent(GetFunction("AddDebugText"), @params);
    }
}

public unsafe class AssetManager : ObjectBase<UAssetManager>
{
    public AssetManager(IntPtr pointer) : base(pointer) {}
}

public unsafe class PrimaryDataAsset : ObjectBase<UPrimaryDataAsset>
{
    public PrimaryDataAsset(IntPtr pointer) : base(pointer) {}}

public unsafe class PrimaryAssetLabel : ObjectBase<UPrimaryAssetLabel>
{
    public PrimaryAssetLabel(IntPtr pointer) : base(pointer) {}
}

public unsafe class SaveGame : ObjectBase<USaveGame>
{
    public SaveGame(IntPtr pointer) : base(pointer) {}}

public unsafe class GameMode : ObjectBase<AGameMode>
{
    public GameMode(IntPtr pointer) : base(pointer) {}
    public void StartMatch()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("StartMatch"), @params);
    }
    public void SetBandwidthLimit(float AsyncIOBandwidthLimit)
    {
        Span<(string name, object value)> @params = [
            ("AsyncIOBandwidthLimit", AsyncIOBandwidthLimit)
        ];
        ProcessEvent(GetFunction("SetBandwidthLimit"), @params);
    }
    public void Say(FString Msg)
    {
        Span<(string name, object value)> @params = [
            ("Msg", Msg)
        ];
        ProcessEvent(GetFunction("Say"), @params);
    }
    public void RestartGame()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("RestartGame"), @params);
    }
    public bool ReadyToStartMatch()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("ReadyToStartMatch"), @params);
    }
    public bool ReadyToEndMatch()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("ReadyToEndMatch"), @params);
    }
    public void K2_OnSetMatchState(FName NewState)
    {
        Span<(string name, object value)> @params = [
            ("NewState", NewState)
        ];
        ProcessEvent(GetFunction("K2_OnSetMatchState"), @params);
    }
    public bool IsMatchInProgress()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsMatchInProgress"), @params);
    }
    public FName GetMatchState()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FName>(GetFunction("GetMatchState"), @params);
    }
    public void EndMatch()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("EndMatch"), @params);
    }
    public void AbortMatch()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("AbortMatch"), @params);
    }
}

public unsafe class GameStateBase : ObjectBase<AGameStateBase>
{
    public GameStateBase(IntPtr pointer) : base(pointer) {}
    public void OnRep_SpectatorClass()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_SpectatorClass"), @params);
    }
    public void OnRep_ReplicatedWorldTimeSeconds()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_ReplicatedWorldTimeSeconds"), @params);
    }
    public void OnRep_ReplicatedHasBegunPlay()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_ReplicatedHasBegunPlay"), @params);
    }
    public void OnRep_GameModeClass()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_GameModeClass"), @params);
    }
    public bool HasMatchStarted()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("HasMatchStarted"), @params);
    }
    public bool HasMatchEnded()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("HasMatchEnded"), @params);
    }
    public bool HasBegunPlay()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("HasBegunPlay"), @params);
    }
    public float GetServerWorldTimeSeconds()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetServerWorldTimeSeconds"), @params);
    }
    public float GetPlayerStartTime(AController* Controller)
    {
        Span<(string name, object value)> @params = [
            ("Controller", (IntPtr)Controller)
        ];
        return ProcessEvent<float>(GetFunction("GetPlayerStartTime"), @params);
    }
    public float GetPlayerRespawnDelay(AController* Controller)
    {
        Span<(string name, object value)> @params = [
            ("Controller", (IntPtr)Controller)
        ];
        return ProcessEvent<float>(GetFunction("GetPlayerRespawnDelay"), @params);
    }
}

public unsafe class GameState : ObjectBase<AGameState>
{
    public GameState(IntPtr pointer) : base(pointer) {}
    public void OnRep_MatchState()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_MatchState"), @params);
    }
    public void OnRep_ElapsedTime()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_ElapsedTime"), @params);
    }
}

public unsafe class SkyLight : ObjectBase<ASkyLight>
{
    public SkyLight(IntPtr pointer) : base(pointer) {}
    public void OnRep_bEnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_bEnabled"), @params);
    }
}

public unsafe class TextureCube : ObjectBase<UTextureCube>
{
    public TextureCube(IntPtr pointer) : base(pointer) {}}

public unsafe class StaticMeshComponent : ObjectBase<UStaticMeshComponent>
{
    public StaticMeshComponent(IntPtr pointer) : base(pointer) {}
    public bool SetStaticMesh(UStaticMesh* NewMesh)
    {
        Span<(string name, object value)> @params = [
            ("NewMesh", (IntPtr)NewMesh)
        ];
        return ProcessEvent<bool>(GetFunction("SetStaticMesh"), @params);
    }
    public void SetReverseCulling(bool ReverseCulling)
    {
        Span<(string name, object value)> @params = [
            ("ReverseCulling", ReverseCulling)
        ];
        ProcessEvent(GetFunction("SetReverseCulling"), @params);
    }
    public void SetForcedLodModel(int NewForcedLodModel)
    {
        Span<(string name, object value)> @params = [
            ("NewForcedLodModel", NewForcedLodModel)
        ];
        ProcessEvent(GetFunction("SetForcedLodModel"), @params);
    }
    public void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetEvaluateWorldPositionOffsetInRayTracing"), @params);
    }
    public void SetDistanceFieldSelfShadowBias(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetDistanceFieldSelfShadowBias"), @params);
    }
    public void OnRep_StaticMesh(UStaticMesh* OldStaticMesh)
    {
        Span<(string name, object value)> @params = [
            ("OldStaticMesh", (IntPtr)OldStaticMesh)
        ];
        ProcessEvent(GetFunction("OnRep_StaticMesh"), @params);
    }
    public void GetLocalBounds(ref FVector Min, ref FVector Max)
    {
        Span<(string name, object value)> @params = [
            ("Min", Min), 
            ("Max", Max)
        ];
        ProcessEvent(GetFunction("GetLocalBounds"), @params);
    }
}

public unsafe class InstancedStaticMeshComponent : ObjectBase<UInstancedStaticMeshComponent>
{
    public InstancedStaticMeshComponent(IntPtr pointer) : base(pointer) {}
    public bool UpdateInstanceTransform(int InstanceIndex, ref FTransform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("InstanceIndex", InstanceIndex), 
            ("NewInstanceTransform", NewInstanceTransform), 
            ("bWorldSpace", bWorldSpace), 
            ("bMarkRenderStateDirty", bMarkRenderStateDirty), 
            ("bTeleport", bTeleport)
        ];
        return ProcessEvent<bool>(GetFunction("UpdateInstanceTransform"), @params);
    }
    public bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty)
    {
        Span<(string name, object value)> @params = [
            ("InstanceIndex", InstanceIndex), 
            ("CustomDataIndex", CustomDataIndex), 
            ("CustomDataValue", CustomDataValue), 
            ("bMarkRenderStateDirty", bMarkRenderStateDirty)
        ];
        return ProcessEvent<bool>(GetFunction("SetCustomDataValue"), @params);
    }
    public void SetCullDistances(int StartCullDistance, int EndCullDistance)
    {
        Span<(string name, object value)> @params = [
            ("StartCullDistance", StartCullDistance), 
            ("EndCullDistance", EndCullDistance)
        ];
        ProcessEvent(GetFunction("SetCullDistances"), @params);
    }
    public bool RemoveInstance(int InstanceIndex)
    {
        Span<(string name, object value)> @params = [
            ("InstanceIndex", InstanceIndex)
        ];
        return ProcessEvent<bool>(GetFunction("RemoveInstance"), @params);
    }
    public bool GetInstanceTransform(int InstanceIndex, ref FTransform OutInstanceTransform, bool bWorldSpace)
    {
        Span<(string name, object value)> @params = [
            ("InstanceIndex", InstanceIndex), 
            ("OutInstanceTransform", OutInstanceTransform), 
            ("bWorldSpace", bWorldSpace)
        ];
        return ProcessEvent<bool>(GetFunction("GetInstanceTransform"), @params);
    }
    public TArray<int> GetInstancesOverlappingSphere(ref FVector Center, float Radius, bool bSphereInWorldSpace)
    {
        Span<(string name, object value)> @params = [
            ("Center", Center), 
            ("Radius", Radius), 
            ("bSphereInWorldSpace", bSphereInWorldSpace)
        ];
        return ProcessEvent<TArray<int>>(GetFunction("GetInstancesOverlappingSphere"), @params);
    }
    public TArray<int> GetInstancesOverlappingBox(ref FBox Box, bool bBoxInWorldSpace)
    {
        Span<(string name, object value)> @params = [
            ("Box", Box), 
            ("bBoxInWorldSpace", bBoxInWorldSpace)
        ];
        return ProcessEvent<TArray<int>>(GetFunction("GetInstancesOverlappingBox"), @params);
    }
    public int GetInstanceCount()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetInstanceCount"), @params);
    }
    public void ClearInstances()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ClearInstances"), @params);
    }
    public bool BatchUpdateInstancesTransforms(int StartInstanceIndex, ref TArray<FTransform> NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("StartInstanceIndex", StartInstanceIndex), 
            ("NewInstancesTransforms", NewInstancesTransforms), 
            ("bWorldSpace", bWorldSpace), 
            ("bMarkRenderStateDirty", bMarkRenderStateDirty), 
            ("bTeleport", bTeleport)
        ];
        return ProcessEvent<bool>(GetFunction("BatchUpdateInstancesTransforms"), @params);
    }
    public bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, ref FTransform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport)
    {
        Span<(string name, object value)> @params = [
            ("StartInstanceIndex", StartInstanceIndex), 
            ("NumInstances", NumInstances), 
            ("NewInstancesTransform", NewInstancesTransform), 
            ("bWorldSpace", bWorldSpace), 
            ("bMarkRenderStateDirty", bMarkRenderStateDirty), 
            ("bTeleport", bTeleport)
        ];
        return ProcessEvent<bool>(GetFunction("BatchUpdateInstancesTransform"), @params);
    }
    public int AddInstanceWorldSpace(ref FTransform WorldTransform)
    {
        Span<(string name, object value)> @params = [
            ("WorldTransform", WorldTransform)
        ];
        return ProcessEvent<int>(GetFunction("AddInstanceWorldSpace"), @params);
    }
    public TArray<int> AddInstances(ref TArray<FTransform> InstanceTransforms, bool bShouldReturnIndices)
    {
        Span<(string name, object value)> @params = [
            ("InstanceTransforms", InstanceTransforms), 
            ("bShouldReturnIndices", bShouldReturnIndices)
        ];
        return ProcessEvent<TArray<int>>(GetFunction("AddInstances"), @params);
    }
    public int AddInstance(ref FTransform InstanceTransform)
    {
        Span<(string name, object value)> @params = [
            ("InstanceTransform", InstanceTransform)
        ];
        return ProcessEvent<int>(GetFunction("AddInstance"), @params);
    }
}

public unsafe class HierarchicalInstancedStaticMeshComponent : ObjectBase<UHierarchicalInstancedStaticMeshComponent>
{
    public HierarchicalInstancedStaticMeshComponent(IntPtr pointer) : base(pointer) {}
    public bool RemoveInstances(ref TArray<int> InstancesToRemove)
    {
        Span<(string name, object value)> @params = [
            ("InstancesToRemove", InstancesToRemove)
        ];
        return ProcessEvent<bool>(GetFunction("RemoveInstances"), @params);
    }
}

public unsafe class StaticMeshActor : ObjectBase<AStaticMeshActor>
{
    public StaticMeshActor(IntPtr pointer) : base(pointer) {}
    public void SetMobility(EComponentMobility InMobility)
    {
        Span<(string name, object value)> @params = [
            ("InMobility", InMobility)
        ];
        ProcessEvent(GetFunction("SetMobility"), @params);
    }
}

public unsafe class MaterialInterface : ObjectBase<UMaterialInterface>
{
    public MaterialInterface(IntPtr pointer) : base(pointer) {}
    public void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse)
    {
        Span<(string name, object value)> @params = [
            ("OverrideForceMiplevelsToBeResident", OverrideForceMiplevelsToBeResident), 
            ("bForceMiplevelsToBeResidentValue", bForceMiplevelsToBeResidentValue), 
            ("ForceDuration", ForceDuration), 
            ("CinematicTextureGroups", CinematicTextureGroups), 
            ("bFastResponse", bFastResponse)
        ];
        ProcessEvent(GetFunction("SetForceMipLevelsToBeResident"), @params);
    }
    public UPhysicalMaterialMask* GetPhysicalMaterialMask()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UPhysicalMaterialMask*)ProcessEvent<IntPtr>(GetFunction("GetPhysicalMaterialMask"), @params);
    }
    public UPhysicalMaterial* GetPhysicalMaterialFromMap(int Index)
    {
        Span<(string name, object value)> @params = [
            ("Index", Index)
        ];
        return (UPhysicalMaterial*)ProcessEvent<IntPtr>(GetFunction("GetPhysicalMaterialFromMap"), @params);
    }
    public UPhysicalMaterial* GetPhysicalMaterial()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UPhysicalMaterial*)ProcessEvent<IntPtr>(GetFunction("GetPhysicalMaterial"), @params);
    }
    public FMaterialParameterInfo GetParameterInfo(EMaterialParameterAssociation Association, FName ParameterName, UMaterialFunctionInterface* LayerFunction)
    {
        Span<(string name, object value)> @params = [
            ("Association", Association), 
            ("ParameterName", ParameterName), 
            ("LayerFunction", (IntPtr)LayerFunction)
        ];
        return ProcessEvent<FMaterialParameterInfo>(GetFunction("GetParameterInfo"), @params);
    }
    public UMaterial* GetBaseMaterial()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UMaterial*)ProcessEvent<IntPtr>(GetFunction("GetBaseMaterial"), @params);
    }
}

public unsafe class MaterialInstance : ObjectBase<UMaterialInstance>
{
    public MaterialInstance(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialInstanceConstant : ObjectBase<UMaterialInstanceConstant>
{
    public MaterialInstanceConstant(IntPtr pointer) : base(pointer) {}
    public FLinearColor K2_GetVectorParameterValue(FName ParameterName)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("K2_GetVectorParameterValue"), @params);
    }
    public UTexture* K2_GetTextureParameterValue(FName ParameterName)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName)
        ];
        return (UTexture*)ProcessEvent<IntPtr>(GetFunction("K2_GetTextureParameterValue"), @params);
    }
    public float K2_GetScalarParameterValue(FName ParameterName)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName)
        ];
        return ProcessEvent<float>(GetFunction("K2_GetScalarParameterValue"), @params);
    }
}

public unsafe class WorldSubsystem : ObjectBase<UWorldSubsystem>
{
    public WorldSubsystem(IntPtr pointer) : base(pointer) {}}

public unsafe class TickableWorldSubsystem : ObjectBase<UTickableWorldSubsystem>
{
    public TickableWorldSubsystem(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionCustomOutput : ObjectBase<UMaterialExpressionCustomOutput>
{
    public MaterialExpressionCustomOutput(IntPtr pointer) : base(pointer) {}}

public unsafe class EngineCustomTimeStep : ObjectBase<UEngineCustomTimeStep>
{
    public EngineCustomTimeStep(IntPtr pointer) : base(pointer) {}}

public unsafe class TimecodeProvider : ObjectBase<UTimecodeProvider>
{
    public TimecodeProvider(IntPtr pointer) : base(pointer) {}
    public FTimecode GetTimecode()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FTimecode>(GetFunction("GetTimecode"), @params);
    }
    public ETimecodeProviderSynchronizationState GetSynchronizationState()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<ETimecodeProviderSynchronizationState>(GetFunction("GetSynchronizationState"), @params);
    }
    public FQualifiedFrameTime GetQualifiedFrameTime()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FQualifiedFrameTime>(GetFunction("GetQualifiedFrameTime"), @params);
    }
    public FFrameRate GetFrameRate()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FFrameRate>(GetFunction("GetFrameRate"), @params);
    }
    public FTimecode GetDelayedTimecode()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FTimecode>(GetFunction("GetDelayedTimecode"), @params);
    }
    public FQualifiedFrameTime GetDelayedQualifiedFrameTime()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FQualifiedFrameTime>(GetFunction("GetDelayedQualifiedFrameTime"), @params);
    }
    public bool FetchTimecode(ref FQualifiedFrameTime OutFrameTime)
    {
        Span<(string name, object value)> @params = [
            ("OutFrameTime", OutFrameTime)
        ];
        return ProcessEvent<bool>(GetFunction("FetchTimecode"), @params);
    }
    public void FetchAndUpdate()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("FetchAndUpdate"), @params);
    }
}

public unsafe class DynamicBlueprintBinding : ObjectBase<UDynamicBlueprintBinding>
{
    public DynamicBlueprintBinding(IntPtr pointer) : base(pointer) {}}

public unsafe class BlueprintGeneratedClass : ObjectBase<UBlueprintGeneratedClass>
{
    public BlueprintGeneratedClass(IntPtr pointer) : base(pointer) {}
}

public unsafe class CameraComponent : ObjectBase<UCameraComponent>
{
    public CameraComponent(IntPtr pointer) : base(pointer) {}
    public void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD)
    {
        Span<(string name, object value)> @params = [
            ("bInUseFieldOfViewForLOD", bInUseFieldOfViewForLOD)
        ];
        ProcessEvent(GetFunction("SetUseFieldOfViewForLOD"), @params);
    }
    public void SetProjectionMode(ECameraProjectionMode InProjectionMode)
    {
        Span<(string name, object value)> @params = [
            ("InProjectionMode", InProjectionMode)
        ];
        ProcessEvent(GetFunction("SetProjectionMode"), @params);
    }
    public void SetPostProcessBlendWeight(float InPostProcessBlendWeight)
    {
        Span<(string name, object value)> @params = [
            ("InPostProcessBlendWeight", InPostProcessBlendWeight)
        ];
        ProcessEvent(GetFunction("SetPostProcessBlendWeight"), @params);
    }
    public void SetOrthoWidth(float InOrthoWidth)
    {
        Span<(string name, object value)> @params = [
            ("InOrthoWidth", InOrthoWidth)
        ];
        ProcessEvent(GetFunction("SetOrthoWidth"), @params);
    }
    public void SetOrthoNearClipPlane(float InOrthoNearClipPlane)
    {
        Span<(string name, object value)> @params = [
            ("InOrthoNearClipPlane", InOrthoNearClipPlane)
        ];
        ProcessEvent(GetFunction("SetOrthoNearClipPlane"), @params);
    }
    public void SetOrthoFarClipPlane(float InOrthoFarClipPlane)
    {
        Span<(string name, object value)> @params = [
            ("InOrthoFarClipPlane", InOrthoFarClipPlane)
        ];
        ProcessEvent(GetFunction("SetOrthoFarClipPlane"), @params);
    }
    public void SetFieldOfView(float InFieldOfView)
    {
        Span<(string name, object value)> @params = [
            ("InFieldOfView", InFieldOfView)
        ];
        ProcessEvent(GetFunction("SetFieldOfView"), @params);
    }
    public void SetConstraintAspectRatio(bool bInConstrainAspectRatio)
    {
        Span<(string name, object value)> @params = [
            ("bInConstrainAspectRatio", bInConstrainAspectRatio)
        ];
        ProcessEvent(GetFunction("SetConstraintAspectRatio"), @params);
    }
    public void SetAspectRatio(float InAspectRatio)
    {
        Span<(string name, object value)> @params = [
            ("InAspectRatio", InAspectRatio)
        ];
        ProcessEvent(GetFunction("SetAspectRatio"), @params);
    }
    public void RemoveBlendable(TScriptInterface<IBlendableInterface> InBlendableObject)
    {
        Span<(string name, object value)> @params = [
            ("InBlendableObject", InBlendableObject)
        ];
        ProcessEvent(GetFunction("RemoveBlendable"), @params);
    }
    public void OnCameraMeshHiddenChanged()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnCameraMeshHiddenChanged"), @params);
    }
    public void GetCameraView(float DeltaTime, ref FMinimalViewInfo DesiredView)
    {
        Span<(string name, object value)> @params = [
            ("DeltaTime", DeltaTime), 
            ("DesiredView", DesiredView)
        ];
        ProcessEvent(GetFunction("GetCameraView"), @params);
    }
    public void AddOrUpdateBlendable(TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight)
    {
        Span<(string name, object value)> @params = [
            ("InBlendableObject", InBlendableObject), 
            ("InWeight", InWeight)
        ];
        ProcessEvent(GetFunction("AddOrUpdateBlendable"), @params);
    }
}

public unsafe class BlueprintCore : ObjectBase<UBlueprintCore>
{
    public BlueprintCore(IntPtr pointer) : base(pointer) {}
}

public unsafe class Blueprint : ObjectBase<UBlueprint>
{
    public Blueprint(IntPtr pointer) : base(pointer) {}
}

public unsafe class Model : ObjectBase<UModel>
{
    public Model(IntPtr pointer) : base(pointer) {}}

public unsafe class Channel : ObjectBase<UChannel>
{
    public Channel(IntPtr pointer) : base(pointer) {}
}

public unsafe class ActorChannel : ObjectBase<UActorChannel>
{
    public ActorChannel(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimationAsset : ObjectBase<UAnimationAsset>
{
    public AnimationAsset(IntPtr pointer) : base(pointer) {}
}

public unsafe class BlendSpaceBase : ObjectBase<UBlendSpaceBase>
{
    public BlendSpaceBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class BlendSpace : ObjectBase<UBlendSpace>
{
    public BlendSpace(IntPtr pointer) : base(pointer) {}
}

public unsafe class AimOffsetBlendSpace : ObjectBase<UAimOffsetBlendSpace>
{
    public AimOffsetBlendSpace(IntPtr pointer) : base(pointer) {}}

public unsafe class BlendSpace1D : ObjectBase<UBlendSpace1D>
{
    public BlendSpace1D(IntPtr pointer) : base(pointer) {}
}

public unsafe class AimOffsetBlendSpace1D : ObjectBase<UAimOffsetBlendSpace1D>
{
    public AimOffsetBlendSpace1D(IntPtr pointer) : base(pointer) {}}

public unsafe class AISystemBase : ObjectBase<UAISystemBase>
{
    public AISystemBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class AmbientSound : ObjectBase<AAmbientSound>
{
    public AmbientSound(IntPtr pointer) : base(pointer) {}
    public void Stop()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Stop"), @params);
    }
    public void Play(float StartTime)
    {
        Span<(string name, object value)> @params = [
            ("StartTime", StartTime)
        ];
        ProcessEvent(GetFunction("Play"), @params);
    }
    public void FadeOut(float FadeOutDuration, float FadeVolumeLevel)
    {
        Span<(string name, object value)> @params = [
            ("FadeOutDuration", FadeOutDuration), 
            ("FadeVolumeLevel", FadeVolumeLevel)
        ];
        ProcessEvent(GetFunction("FadeOut"), @params);
    }
    public void FadeIn(float FadeInDuration, float FadeVolumeLevel)
    {
        Span<(string name, object value)> @params = [
            ("FadeInDuration", FadeInDuration), 
            ("FadeVolumeLevel", FadeVolumeLevel)
        ];
        ProcessEvent(GetFunction("FadeIn"), @params);
    }
    public void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel)
    {
        Span<(string name, object value)> @params = [
            ("AdjustVolumeDuration", AdjustVolumeDuration), 
            ("AdjustVolumeLevel", AdjustVolumeLevel)
        ];
        ProcessEvent(GetFunction("AdjustVolume"), @params);
    }
}

public unsafe class AnimationSettings : ObjectBase<UAnimationSettings>
{
    public AnimationSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimBlueprint : ObjectBase<UAnimBlueprint>
{
    public AnimBlueprint(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimBlueprintGeneratedClass : ObjectBase<UAnimBlueprintGeneratedClass>
{
    public AnimBlueprintGeneratedClass(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimBoneCompressionCodec : ObjectBase<UAnimBoneCompressionCodec>
{
    public AnimBoneCompressionCodec(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimBoneCompressionSettings : ObjectBase<UAnimBoneCompressionSettings>
{
    public AnimBoneCompressionSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimClassData : ObjectBase<UAnimClassData>
{
    public AnimClassData(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimClassInterface : ObjectBase<IAnimClassInterface>
{
    public AnimClassInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class AnimSequenceBase : ObjectBase<UAnimSequenceBase>
{
    public AnimSequenceBase(IntPtr pointer) : base(pointer) {}
    public float GetPlayLength()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetPlayLength"), @params);
    }
}

public unsafe class AnimCompositeBase : ObjectBase<UAnimCompositeBase>
{
    public AnimCompositeBase(IntPtr pointer) : base(pointer) {}}

public unsafe class AnimComposite : ObjectBase<UAnimComposite>
{
    public AnimComposite(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimCompress : ObjectBase<UAnimCompress>
{
    public AnimCompress(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimCompress_BitwiseCompressOnly : ObjectBase<UAnimCompress_BitwiseCompressOnly>
{
    public AnimCompress_BitwiseCompressOnly(IntPtr pointer) : base(pointer) {}}

public unsafe class AnimCompress_LeastDestructive : ObjectBase<UAnimCompress_LeastDestructive>
{
    public AnimCompress_LeastDestructive(IntPtr pointer) : base(pointer) {}}

public unsafe class AnimCompress_RemoveLinearKeys : ObjectBase<UAnimCompress_RemoveLinearKeys>
{
    public AnimCompress_RemoveLinearKeys(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimCompress_PerTrackCompression : ObjectBase<UAnimCompress_PerTrackCompression>
{
    public AnimCompress_PerTrackCompression(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimCompress_RemoveEverySecondKey : ObjectBase<UAnimCompress_RemoveEverySecondKey>
{
    public AnimCompress_RemoveEverySecondKey(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimCompress_RemoveTrivialKeys : ObjectBase<UAnimCompress_RemoveTrivialKeys>
{
    public AnimCompress_RemoveTrivialKeys(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimCurveCompressionCodec : ObjectBase<UAnimCurveCompressionCodec>
{
    public AnimCurveCompressionCodec(IntPtr pointer) : base(pointer) {}}

public unsafe class AnimCurveCompressionCodec_CompressedRichCurve : ObjectBase<UAnimCurveCompressionCodec_CompressedRichCurve>
{
    public AnimCurveCompressionCodec_CompressedRichCurve(IntPtr pointer) : base(pointer) {}}

public unsafe class AnimCurveCompressionCodec_UniformIndexable : ObjectBase<UAnimCurveCompressionCodec_UniformIndexable>
{
    public AnimCurveCompressionCodec_UniformIndexable(IntPtr pointer) : base(pointer) {}}

public unsafe class AnimCurveCompressionCodec_UniformlySampled : ObjectBase<UAnimCurveCompressionCodec_UniformlySampled>
{
    public AnimCurveCompressionCodec_UniformlySampled(IntPtr pointer) : base(pointer) {}}

public unsafe class AnimCurveCompressionSettings : ObjectBase<UAnimCurveCompressionSettings>
{
    public AnimCurveCompressionSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimLayerInterface : ObjectBase<IAnimLayerInterface>
{
    public AnimLayerInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class AnimMetaData : ObjectBase<UAnimMetaData>
{
    public AnimMetaData(IntPtr pointer) : base(pointer) {}}

public unsafe class AnimMontage : ObjectBase<UAnimMontage>
{
    public AnimMontage(IntPtr pointer) : base(pointer) {}
    public float GetDefaultBlendOutTime()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetDefaultBlendOutTime"), @params);
    }
}

public unsafe class AnimNotify_PauseClothingSimulation : ObjectBase<UAnimNotify_PauseClothingSimulation>
{
    public AnimNotify_PauseClothingSimulation(IntPtr pointer) : base(pointer) {}}

public unsafe class AnimNotify_PlayParticleEffect : ObjectBase<UAnimNotify_PlayParticleEffect>
{
    public AnimNotify_PlayParticleEffect(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimNotify_PlaySound : ObjectBase<UAnimNotify_PlaySound>
{
    public AnimNotify_PlaySound(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimNotify_ResetClothingSimulation : ObjectBase<UAnimNotify_ResetClothingSimulation>
{
    public AnimNotify_ResetClothingSimulation(IntPtr pointer) : base(pointer) {}}

public unsafe class AnimNotify_ResetDynamics : ObjectBase<UAnimNotify_ResetDynamics>
{
    public AnimNotify_ResetDynamics(IntPtr pointer) : base(pointer) {}}

public unsafe class AnimNotify_ResumeClothingSimulation : ObjectBase<UAnimNotify_ResumeClothingSimulation>
{
    public AnimNotify_ResumeClothingSimulation(IntPtr pointer) : base(pointer) {}}

public unsafe class AnimNotifyState_DisableRootMotion : ObjectBase<UAnimNotifyState_DisableRootMotion>
{
    public AnimNotifyState_DisableRootMotion(IntPtr pointer) : base(pointer) {}}

public unsafe class AnimNotifyState_TimedParticleEffect : ObjectBase<UAnimNotifyState_TimedParticleEffect>
{
    public AnimNotifyState_TimedParticleEffect(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimNotifyState_Trail : ObjectBase<UAnimNotifyState_Trail>
{
    public AnimNotifyState_Trail(IntPtr pointer) : base(pointer) {}
    public UParticleSystem* OverridePSTemplate(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation)
    {
        Span<(string name, object value)> @params = [
            ("MeshComp", (IntPtr)MeshComp), 
            ("Animation", (IntPtr)Animation)
        ];
        return (UParticleSystem*)ProcessEvent<IntPtr>(GetFunction("OverridePSTemplate"), @params);
    }
}

public unsafe class AnimSequence : ObjectBase<UAnimSequence>
{
    public AnimSequence(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimSet : ObjectBase<UAnimSet>
{
    public AnimSet(IntPtr pointer) : base(pointer) {}
}

public unsafe class AnimSingleNodeInstance : ObjectBase<UAnimSingleNodeInstance>
{
    public AnimSingleNodeInstance(IntPtr pointer) : base(pointer) {}
    public void StopAnim()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("StopAnim"), @params);
    }
    public void SetReverse(bool bInReverse)
    {
        Span<(string name, object value)> @params = [
            ("bInReverse", bInReverse)
        ];
        ProcessEvent(GetFunction("SetReverse"), @params);
    }
    public void SetPreviewCurveOverride(ref FName PoseName, float Value, bool bRemoveIfZero)
    {
        Span<(string name, object value)> @params = [
            ("PoseName", PoseName), 
            ("Value", Value), 
            ("bRemoveIfZero", bRemoveIfZero)
        ];
        ProcessEvent(GetFunction("SetPreviewCurveOverride"), @params);
    }
    public void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies)
    {
        Span<(string name, object value)> @params = [
            ("InPosition", InPosition), 
            ("InPreviousTime", InPreviousTime), 
            ("bFireNotifies", bFireNotifies)
        ];
        ProcessEvent(GetFunction("SetPositionWithPreviousTime"), @params);
    }
    public void SetPosition(float InPosition, bool bFireNotifies)
    {
        Span<(string name, object value)> @params = [
            ("InPosition", InPosition), 
            ("bFireNotifies", bFireNotifies)
        ];
        ProcessEvent(GetFunction("SetPosition"), @params);
    }
    public void SetPlayRate(float InPlayRate)
    {
        Span<(string name, object value)> @params = [
            ("InPlayRate", InPlayRate)
        ];
        ProcessEvent(GetFunction("SetPlayRate"), @params);
    }
    public void SetPlaying(bool bIsPlaying)
    {
        Span<(string name, object value)> @params = [
            ("bIsPlaying", bIsPlaying)
        ];
        ProcessEvent(GetFunction("SetPlaying"), @params);
    }
    public void SetLooping(bool bIsLooping)
    {
        Span<(string name, object value)> @params = [
            ("bIsLooping", bIsLooping)
        ];
        ProcessEvent(GetFunction("SetLooping"), @params);
    }
    public void SetBlendSpaceInput(ref FVector InBlendInput)
    {
        Span<(string name, object value)> @params = [
            ("InBlendInput", InBlendInput)
        ];
        ProcessEvent(GetFunction("SetBlendSpaceInput"), @params);
    }
    public void SetAnimationAsset(UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate)
    {
        Span<(string name, object value)> @params = [
            ("NewAsset", (IntPtr)NewAsset), 
            ("bIsLooping", bIsLooping), 
            ("InPlayRate", InPlayRate)
        ];
        ProcessEvent(GetFunction("SetAnimationAsset"), @params);
    }
    public void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition)
    {
        Span<(string name, object value)> @params = [
            ("bIsLooping", bIsLooping), 
            ("InPlayRate", InPlayRate), 
            ("InStartPosition", InStartPosition)
        ];
        ProcessEvent(GetFunction("PlayAnim"), @params);
    }
    public float GetLength()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetLength"), @params);
    }
    public UAnimationAsset* GetAnimationAsset()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UAnimationAsset*)ProcessEvent<IntPtr>(GetFunction("GetAnimationAsset"), @params);
    }
}

public unsafe class AnimStateMachineTypes : ObjectBase<UAnimStateMachineTypes>
{
    public AnimStateMachineTypes(IntPtr pointer) : base(pointer) {}}

public unsafe class AnimStreamable : ObjectBase<UAnimStreamable>
{
    public AnimStreamable(IntPtr pointer) : base(pointer) {}
}

public unsafe class ApplicationLifecycleComponent : ObjectBase<UApplicationLifecycleComponent>
{
    public ApplicationLifecycleComponent(IntPtr pointer) : base(pointer) {}
}

public unsafe class ArrowComponent : ObjectBase<UArrowComponent>
{
    public ArrowComponent(IntPtr pointer) : base(pointer) {}
    public void SetArrowColor(FLinearColor NewColor)
    {
        Span<(string name, object value)> @params = [
            ("NewColor", NewColor)
        ];
        ProcessEvent(GetFunction("SetArrowColor"), @params);
    }
}

public unsafe class AssetExportTask : ObjectBase<UAssetExportTask>
{
    public AssetExportTask(IntPtr pointer) : base(pointer) {}
}

public unsafe class AssetManagerSettings : ObjectBase<UAssetManagerSettings>
{
    public AssetManagerSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class AssetMappingTable : ObjectBase<UAssetMappingTable>
{
    public AssetMappingTable(IntPtr pointer) : base(pointer) {}
}

public unsafe class AsyncActionHandleSaveGame : ObjectBase<UAsyncActionHandleSaveGame>
{
    public AsyncActionHandleSaveGame(IntPtr pointer) : base(pointer) {}
    public UAsyncActionHandleSaveGame* AsyncSaveGameToSlot(UObject* WorldContextObject, USaveGame* SaveGameObject, FString SlotName, int UserIndex)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("SaveGameObject", (IntPtr)SaveGameObject), 
            ("SlotName", SlotName), 
            ("UserIndex", UserIndex)
        ];
        return (UAsyncActionHandleSaveGame*)ProcessEvent<IntPtr>(GetFunction("AsyncSaveGameToSlot"), @params);
    }
    public UAsyncActionHandleSaveGame* AsyncLoadGameFromSlot(UObject* WorldContextObject, FString SlotName, int UserIndex)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("SlotName", SlotName), 
            ("UserIndex", UserIndex)
        ];
        return (UAsyncActionHandleSaveGame*)ProcessEvent<IntPtr>(GetFunction("AsyncLoadGameFromSlot"), @params);
    }
}

public unsafe class AsyncActionLoadPrimaryAssetBase : ObjectBase<UAsyncActionLoadPrimaryAssetBase>
{
    public AsyncActionLoadPrimaryAssetBase(IntPtr pointer) : base(pointer) {}}

public unsafe class AsyncActionLoadPrimaryAsset : ObjectBase<UAsyncActionLoadPrimaryAsset>
{
    public AsyncActionLoadPrimaryAsset(IntPtr pointer) : base(pointer) {}
    public UAsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(UObject* WorldContextObject, FPrimaryAssetId PrimaryAsset, ref TArray<FName> LoadBundles)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("PrimaryAsset", PrimaryAsset), 
            ("LoadBundles", LoadBundles)
        ];
        return (UAsyncActionLoadPrimaryAsset*)ProcessEvent<IntPtr>(GetFunction("AsyncLoadPrimaryAsset"), @params);
    }
}

public unsafe class AsyncActionLoadPrimaryAssetClass : ObjectBase<UAsyncActionLoadPrimaryAssetClass>
{
    public AsyncActionLoadPrimaryAssetClass(IntPtr pointer) : base(pointer) {}
    public UAsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(UObject* WorldContextObject, FPrimaryAssetId PrimaryAsset, ref TArray<FName> LoadBundles)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("PrimaryAsset", PrimaryAsset), 
            ("LoadBundles", LoadBundles)
        ];
        return (UAsyncActionLoadPrimaryAssetClass*)ProcessEvent<IntPtr>(GetFunction("AsyncLoadPrimaryAssetClass"), @params);
    }
}

public unsafe class AsyncActionLoadPrimaryAssetList : ObjectBase<UAsyncActionLoadPrimaryAssetList>
{
    public AsyncActionLoadPrimaryAssetList(IntPtr pointer) : base(pointer) {}
    public UAsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(UObject* WorldContextObject, ref TArray<FPrimaryAssetId> PrimaryAssetList, ref TArray<FName> LoadBundles)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("PrimaryAssetList", PrimaryAssetList), 
            ("LoadBundles", LoadBundles)
        ];
        return (UAsyncActionLoadPrimaryAssetList*)ProcessEvent<IntPtr>(GetFunction("AsyncLoadPrimaryAssetList"), @params);
    }
}

public unsafe class AsyncActionLoadPrimaryAssetClassList : ObjectBase<UAsyncActionLoadPrimaryAssetClassList>
{
    public AsyncActionLoadPrimaryAssetClassList(IntPtr pointer) : base(pointer) {}
    public UAsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(UObject* WorldContextObject, ref TArray<FPrimaryAssetId> PrimaryAssetList, ref TArray<FName> LoadBundles)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("PrimaryAssetList", PrimaryAssetList), 
            ("LoadBundles", LoadBundles)
        ];
        return (UAsyncActionLoadPrimaryAssetClassList*)ProcessEvent<IntPtr>(GetFunction("AsyncLoadPrimaryAssetClassList"), @params);
    }
}

public unsafe class AsyncActionChangePrimaryAssetBundles : ObjectBase<UAsyncActionChangePrimaryAssetBundles>
{
    public AsyncActionChangePrimaryAssetBundles(IntPtr pointer) : base(pointer) {}
    public UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(UObject* WorldContextObject, ref TArray<FPrimaryAssetId> PrimaryAssetList, ref TArray<FName> AddBundles, ref TArray<FName> RemoveBundles)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("PrimaryAssetList", PrimaryAssetList), 
            ("AddBundles", AddBundles), 
            ("RemoveBundles", RemoveBundles)
        ];
        return (UAsyncActionChangePrimaryAssetBundles*)ProcessEvent<IntPtr>(GetFunction("AsyncChangeBundleStateForPrimaryAssetList"), @params);
    }
    public UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(UObject* WorldContextObject, ref TArray<FName> NewBundles, ref TArray<FName> OldBundles)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("NewBundles", NewBundles), 
            ("OldBundles", OldBundles)
        ];
        return (UAsyncActionChangePrimaryAssetBundles*)ProcessEvent<IntPtr>(GetFunction("AsyncChangeBundleStateForMatchingPrimaryAssets"), @params);
    }
}

public unsafe class AtmosphericFog : ObjectBase<AAtmosphericFog>
{
    public AtmosphericFog(IntPtr pointer) : base(pointer) {}
}

public unsafe class AtmosphericFogComponent : ObjectBase<UAtmosphericFogComponent>
{
    public AtmosphericFogComponent(IntPtr pointer) : base(pointer) {}
    public void StartPrecompute()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("StartPrecompute"), @params);
    }
    public void SetSunMultiplier(float NewSunMultiplier)
    {
        Span<(string name, object value)> @params = [
            ("NewSunMultiplier", NewSunMultiplier)
        ];
        ProcessEvent(GetFunction("SetSunMultiplier"), @params);
    }
    public void SetStartDistance(float NewStartDistance)
    {
        Span<(string name, object value)> @params = [
            ("NewStartDistance", NewStartDistance)
        ];
        ProcessEvent(GetFunction("SetStartDistance"), @params);
    }
    public void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum)
    {
        Span<(string name, object value)> @params = [
            ("DensityHeight", DensityHeight), 
            ("MaxScatteringOrder", MaxScatteringOrder), 
            ("InscatterAltitudeSampleNum", InscatterAltitudeSampleNum)
        ];
        ProcessEvent(GetFunction("SetPrecomputeParams"), @params);
    }
    public void SetFogMultiplier(float NewFogMultiplier)
    {
        Span<(string name, object value)> @params = [
            ("NewFogMultiplier", NewFogMultiplier)
        ];
        ProcessEvent(GetFunction("SetFogMultiplier"), @params);
    }
    public void SetDistanceScale(float NewDistanceScale)
    {
        Span<(string name, object value)> @params = [
            ("NewDistanceScale", NewDistanceScale)
        ];
        ProcessEvent(GetFunction("SetDistanceScale"), @params);
    }
    public void SetDistanceOffset(float NewDistanceOffset)
    {
        Span<(string name, object value)> @params = [
            ("NewDistanceOffset", NewDistanceOffset)
        ];
        ProcessEvent(GetFunction("SetDistanceOffset"), @params);
    }
    public void SetDensityOffset(float NewDensityOffset)
    {
        Span<(string name, object value)> @params = [
            ("NewDensityOffset", NewDensityOffset)
        ];
        ProcessEvent(GetFunction("SetDensityOffset"), @params);
    }
    public void SetDensityMultiplier(float NewDensityMultiplier)
    {
        Span<(string name, object value)> @params = [
            ("NewDensityMultiplier", NewDensityMultiplier)
        ];
        ProcessEvent(GetFunction("SetDensityMultiplier"), @params);
    }
    public void SetDefaultLightColor(FLinearColor NewLightColor)
    {
        Span<(string name, object value)> @params = [
            ("NewLightColor", NewLightColor)
        ];
        ProcessEvent(GetFunction("SetDefaultLightColor"), @params);
    }
    public void SetDefaultBrightness(float NewBrightness)
    {
        Span<(string name, object value)> @params = [
            ("NewBrightness", NewBrightness)
        ];
        ProcessEvent(GetFunction("SetDefaultBrightness"), @params);
    }
    public void SetAltitudeScale(float NewAltitudeScale)
    {
        Span<(string name, object value)> @params = [
            ("NewAltitudeScale", NewAltitudeScale)
        ];
        ProcessEvent(GetFunction("SetAltitudeScale"), @params);
    }
    public void DisableSunDisk(bool NewSunDisk)
    {
        Span<(string name, object value)> @params = [
            ("NewSunDisk", NewSunDisk)
        ];
        ProcessEvent(GetFunction("DisableSunDisk"), @params);
    }
    public void DisableGroundScattering(bool NewGroundScattering)
    {
        Span<(string name, object value)> @params = [
            ("NewGroundScattering", NewGroundScattering)
        ];
        ProcessEvent(GetFunction("DisableGroundScattering"), @params);
    }
}

public unsafe class AudioBus : ObjectBase<UAudioBus>
{
    public AudioBus(IntPtr pointer) : base(pointer) {}
}

public unsafe class AudioSettings : ObjectBase<UAudioSettings>
{
    public AudioSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class AudioVolume : ObjectBase<AAudioVolume>
{
    public AudioVolume(IntPtr pointer) : base(pointer) {}
    public void SetSubmixSendSettings(ref TArray<FAudioVolumeSubmixSendSettings> NewSubmixSendSettings)
    {
        Span<(string name, object value)> @params = [
            ("NewSubmixSendSettings", NewSubmixSendSettings)
        ];
        ProcessEvent(GetFunction("SetSubmixSendSettings"), @params);
    }
    public void SetSubmixOverrideSettings(ref TArray<FAudioVolumeSubmixOverrideSettings> NewSubmixOverrideSettings)
    {
        Span<(string name, object value)> @params = [
            ("NewSubmixOverrideSettings", NewSubmixOverrideSettings)
        ];
        ProcessEvent(GetFunction("SetSubmixOverrideSettings"), @params);
    }
    public void SetReverbSettings(ref FReverbSettings NewReverbSettings)
    {
        Span<(string name, object value)> @params = [
            ("NewReverbSettings", NewReverbSettings)
        ];
        ProcessEvent(GetFunction("SetReverbSettings"), @params);
    }
    public void SetPriority(float NewPriority)
    {
        Span<(string name, object value)> @params = [
            ("NewPriority", NewPriority)
        ];
        ProcessEvent(GetFunction("SetPriority"), @params);
    }
    public void SetInteriorSettings(ref FInteriorSettings NewInteriorSettings)
    {
        Span<(string name, object value)> @params = [
            ("NewInteriorSettings", NewInteriorSettings)
        ];
        ProcessEvent(GetFunction("SetInteriorSettings"), @params);
    }
    public void SetEnabled(bool bNewEnabled)
    {
        Span<(string name, object value)> @params = [
            ("bNewEnabled", bNewEnabled)
        ];
        ProcessEvent(GetFunction("SetEnabled"), @params);
    }
    public void OnRep_bEnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_bEnabled"), @params);
    }
}

public unsafe class AutoDestroySubsystem : ObjectBase<UAutoDestroySubsystem>
{
    public AutoDestroySubsystem(IntPtr pointer) : base(pointer) {}
    public void OnActorEndPlay(AActor* Actor, EEndPlayReason EndPlayReason)
    {
        Span<(string name, object value)> @params = [
            ("Actor", (IntPtr)Actor), 
            ("EndPlayReason", EndPlayReason)
        ];
        ProcessEvent(GetFunction("OnActorEndPlay"), @params);
    }
}

public unsafe class AutomationTestSettings : ObjectBase<UAutomationTestSettings>
{
    public AutomationTestSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class AvoidanceManager : ObjectBase<UAvoidanceManager>
{
    public AvoidanceManager(IntPtr pointer) : base(pointer) {}
    public bool RegisterMovementComponent(UMovementComponent* MovementComp, float AvoidanceWeight)
    {
        Span<(string name, object value)> @params = [
            ("MovementComp", (IntPtr)MovementComp), 
            ("AvoidanceWeight", AvoidanceWeight)
        ];
        return ProcessEvent<bool>(GetFunction("RegisterMovementComponent"), @params);
    }
    public int GetObjectCount()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetObjectCount"), @params);
    }
    public int GetNewAvoidanceUID()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetNewAvoidanceUID"), @params);
    }
    public FVector GetAvoidanceVelocityForComponent(UMovementComponent* MovementComp)
    {
        Span<(string name, object value)> @params = [
            ("MovementComp", (IntPtr)MovementComp)
        ];
        return ProcessEvent<FVector>(GetFunction("GetAvoidanceVelocityForComponent"), @params);
    }
}

public unsafe class BandwidthTestActor : ObjectBase<ABandwidthTestActor>
{
    public BandwidthTestActor(IntPtr pointer) : base(pointer) {}
}

public unsafe class BillboardComponent : ObjectBase<UBillboardComponent>
{
    public BillboardComponent(IntPtr pointer) : base(pointer) {}
    public void SetUV(int NewU, int NewUL, int NewV, int NewVL)
    {
        Span<(string name, object value)> @params = [
            ("NewU", NewU), 
            ("NewUL", NewUL), 
            ("NewV", NewV), 
            ("NewVL", NewVL)
        ];
        ProcessEvent(GetFunction("SetUV"), @params);
    }
    public void SetSpriteAndUV(UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL)
    {
        Span<(string name, object value)> @params = [
            ("NewSprite", (IntPtr)NewSprite), 
            ("NewU", NewU), 
            ("NewUL", NewUL), 
            ("NewV", NewV), 
            ("NewVL", NewVL)
        ];
        ProcessEvent(GetFunction("SetSpriteAndUV"), @params);
    }
    public void SetSprite(UTexture2D* NewSprite)
    {
        Span<(string name, object value)> @params = [
            ("NewSprite", (IntPtr)NewSprite)
        ];
        ProcessEvent(GetFunction("SetSprite"), @params);
    }
}

public unsafe class BlendableInterface : ObjectBase<IBlendableInterface>
{
    public BlendableInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class Skeleton : ObjectBase<USkeleton>
{
    public Skeleton(IntPtr pointer) : base(pointer) {}
}

public unsafe class BlendProfile : ObjectBase<UBlendProfile>
{
    public BlendProfile(IntPtr pointer) : base(pointer) {}
}

public unsafe class BlockingVolume : ObjectBase<ABlockingVolume>
{
    public BlockingVolume(IntPtr pointer) : base(pointer) {}}

public unsafe class BlueprintExtension : ObjectBase<UBlueprintExtension>
{
    public BlueprintExtension(IntPtr pointer) : base(pointer) {}}

public unsafe class BlueprintMapLibrary : ObjectBase<UBlueprintMapLibrary>
{
    public BlueprintMapLibrary(IntPtr pointer) : base(pointer) {}
    public void SetMapPropertyByName(UObject* Object, FName PropertyName, ref TMap<int, int> Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetMapPropertyByName"), @params);
    }
    public void Map_Values(ref TMap<int, int> TargetMap, ref TArray<int> Values)
    {
        Span<(string name, object value)> @params = [
            ("TargetMap", TargetMap), 
            ("Values", Values)
        ];
        ProcessEvent(GetFunction("Map_Values"), @params);
    }
    public bool Map_Remove(ref TMap<int, int> TargetMap, ref int Key)
    {
        Span<(string name, object value)> @params = [
            ("TargetMap", TargetMap), 
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("Map_Remove"), @params);
    }
    public int Map_Length(ref TMap<int, int> TargetMap)
    {
        Span<(string name, object value)> @params = [
            ("TargetMap", TargetMap)
        ];
        return ProcessEvent<int>(GetFunction("Map_Length"), @params);
    }
    public void Map_Keys(ref TMap<int, int> TargetMap, ref TArray<int> Keys)
    {
        Span<(string name, object value)> @params = [
            ("TargetMap", TargetMap), 
            ("Keys", Keys)
        ];
        ProcessEvent(GetFunction("Map_Keys"), @params);
    }
    public bool Map_Find(ref TMap<int, int> TargetMap, ref int Key, ref int Value)
    {
        Span<(string name, object value)> @params = [
            ("TargetMap", TargetMap), 
            ("Key", Key), 
            ("Value", Value)
        ];
        return ProcessEvent<bool>(GetFunction("Map_Find"), @params);
    }
    public bool Map_Contains(ref TMap<int, int> TargetMap, ref int Key)
    {
        Span<(string name, object value)> @params = [
            ("TargetMap", TargetMap), 
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("Map_Contains"), @params);
    }
    public void Map_Clear(ref TMap<int, int> TargetMap)
    {
        Span<(string name, object value)> @params = [
            ("TargetMap", TargetMap)
        ];
        ProcessEvent(GetFunction("Map_Clear"), @params);
    }
    public void Map_Add(ref TMap<int, int> TargetMap, ref int Key, ref int Value)
    {
        Span<(string name, object value)> @params = [
            ("TargetMap", TargetMap), 
            ("Key", Key), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("Map_Add"), @params);
    }
}

public unsafe class BlueprintPathsLibrary : ObjectBase<UBlueprintPathsLibrary>
{
    public BlueprintPathsLibrary(IntPtr pointer) : base(pointer) {}
    public FString VideoCaptureDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("VideoCaptureDir"), @params);
    }
    public void ValidatePath(FString InPath, ref bool bDidSucceed, ref FText OutReason)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath), 
            ("bDidSucceed", bDidSucceed), 
            ("OutReason", OutReason)
        ];
        ProcessEvent(GetFunction("ValidatePath"), @params);
    }
    public void Split(FString InPath, ref FString PathPart, ref FString FilenamePart, ref FString ExtensionPart)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath), 
            ("PathPart", PathPart), 
            ("FilenamePart", FilenamePart), 
            ("ExtensionPart", ExtensionPart)
        ];
        ProcessEvent(GetFunction("Split"), @params);
    }
    public FString SourceConfigDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("SourceConfigDir"), @params);
    }
    public bool ShouldSaveToUserDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("ShouldSaveToUserDir"), @params);
    }
    public FString ShaderWorkingDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("ShaderWorkingDir"), @params);
    }
    public void SetProjectFilePath(FString NewGameProjectFilePath)
    {
        Span<(string name, object value)> @params = [
            ("NewGameProjectFilePath", NewGameProjectFilePath)
        ];
        ProcessEvent(GetFunction("SetProjectFilePath"), @params);
    }
    public FString SetExtension(FString InPath, FString InNewExtension)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath), 
            ("InNewExtension", InNewExtension)
        ];
        return ProcessEvent<FString>(GetFunction("SetExtension"), @params);
    }
    public FString ScreenShotDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("ScreenShotDir"), @params);
    }
    public FString SandboxesDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("SandboxesDir"), @params);
    }
    public FString RootDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("RootDir"), @params);
    }
    public void RemoveDuplicateSlashes(FString InPath, ref FString OutPath)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath), 
            ("OutPath", OutPath)
        ];
        ProcessEvent(GetFunction("RemoveDuplicateSlashes"), @params);
    }
    public FString ProjectUserDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("ProjectUserDir"), @params);
    }
    public FString ProjectSavedDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("ProjectSavedDir"), @params);
    }
    public FString ProjectPluginsDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("ProjectPluginsDir"), @params);
    }
    public FString ProjectPersistentDownloadDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("ProjectPersistentDownloadDir"), @params);
    }
    public FString ProjectModsDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("ProjectModsDir"), @params);
    }
    public FString ProjectLogDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("ProjectLogDir"), @params);
    }
    public FString ProjectIntermediateDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("ProjectIntermediateDir"), @params);
    }
    public FString ProjectDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("ProjectDir"), @params);
    }
    public FString ProjectContentDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("ProjectContentDir"), @params);
    }
    public FString ProjectConfigDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("ProjectConfigDir"), @params);
    }
    public FString ProfilingDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("ProfilingDir"), @params);
    }
    public void NormalizeFilename(FString InPath, ref FString OutPath)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath), 
            ("OutPath", OutPath)
        ];
        ProcessEvent(GetFunction("NormalizeFilename"), @params);
    }
    public void NormalizeDirectoryName(FString InPath, ref FString OutPath)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath), 
            ("OutPath", OutPath)
        ];
        ProcessEvent(GetFunction("NormalizeDirectoryName"), @params);
    }
    public FString MakeValidFileName(FString inString, FString InReplacementChar)
    {
        Span<(string name, object value)> @params = [
            ("inString", inString), 
            ("InReplacementChar", InReplacementChar)
        ];
        return ProcessEvent<FString>(GetFunction("MakeValidFileName"), @params);
    }
    public void MakeStandardFilename(FString InPath, ref FString OutPath)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath), 
            ("OutPath", OutPath)
        ];
        ProcessEvent(GetFunction("MakeStandardFilename"), @params);
    }
    public void MakePlatformFilename(FString InPath, ref FString OutPath)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath), 
            ("OutPath", OutPath)
        ];
        ProcessEvent(GetFunction("MakePlatformFilename"), @params);
    }
    public bool MakePathRelativeTo(FString InPath, FString InRelativeTo, ref FString OutPath)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath), 
            ("InRelativeTo", InRelativeTo), 
            ("OutPath", OutPath)
        ];
        return ProcessEvent<bool>(GetFunction("MakePathRelativeTo"), @params);
    }
    public FString LaunchDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("LaunchDir"), @params);
    }
    public bool IsSamePath(FString PathA, FString PathB)
    {
        Span<(string name, object value)> @params = [
            ("PathA", PathA), 
            ("PathB", PathB)
        ];
        return ProcessEvent<bool>(GetFunction("IsSamePath"), @params);
    }
    public bool IsRestrictedPath(FString InPath)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath)
        ];
        return ProcessEvent<bool>(GetFunction("IsRestrictedPath"), @params);
    }
    public bool IsRelative(FString InPath)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath)
        ];
        return ProcessEvent<bool>(GetFunction("IsRelative"), @params);
    }
    public bool IsProjectFilePathSet()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsProjectFilePathSet"), @params);
    }
    public bool IsDrive(FString InPath)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath)
        ];
        return ProcessEvent<bool>(GetFunction("IsDrive"), @params);
    }
    public bool HasProjectPersistentDownloadDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("HasProjectPersistentDownloadDir"), @params);
    }
    public TArray<FString> GetToolTipLocalizationPaths()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<FString>>(GetFunction("GetToolTipLocalizationPaths"), @params);
    }
    public TArray<FString> GetRestrictedFolderNames()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<FString>>(GetFunction("GetRestrictedFolderNames"), @params);
    }
    public FString GetRelativePathToRoot()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetRelativePathToRoot"), @params);
    }
    public TArray<FString> GetPropertyNameLocalizationPaths()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<FString>>(GetFunction("GetPropertyNameLocalizationPaths"), @params);
    }
    public FString GetProjectFilePath()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetProjectFilePath"), @params);
    }
    public FString GetPath(FString InPath)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath)
        ];
        return ProcessEvent<FString>(GetFunction("GetPath"), @params);
    }
    public FString GetInvalidFileSystemChars()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetInvalidFileSystemChars"), @params);
    }
    public TArray<FString> GetGameLocalizationPaths()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<FString>>(GetFunction("GetGameLocalizationPaths"), @params);
    }
    public FString GetExtension(FString InPath, bool bIncludeDot)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath), 
            ("bIncludeDot", bIncludeDot)
        ];
        return ProcessEvent<FString>(GetFunction("GetExtension"), @params);
    }
    public TArray<FString> GetEngineLocalizationPaths()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<FString>>(GetFunction("GetEngineLocalizationPaths"), @params);
    }
    public TArray<FString> GetEditorLocalizationPaths()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<FString>>(GetFunction("GetEditorLocalizationPaths"), @params);
    }
    public FString GetCleanFilename(FString InPath)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath)
        ];
        return ProcessEvent<FString>(GetFunction("GetCleanFilename"), @params);
    }
    public FString GetBaseFilename(FString InPath, bool bRemovePath)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath), 
            ("bRemovePath", bRemovePath)
        ];
        return ProcessEvent<FString>(GetFunction("GetBaseFilename"), @params);
    }
    public FString GeneratedConfigDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GeneratedConfigDir"), @params);
    }
    public FString GameUserDeveloperDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GameUserDeveloperDir"), @params);
    }
    public FString GameSourceDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GameSourceDir"), @params);
    }
    public FString GameDevelopersDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GameDevelopersDir"), @params);
    }
    public FString GameAgnosticSavedDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GameAgnosticSavedDir"), @params);
    }
    public bool FileExists(FString InPath)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath)
        ];
        return ProcessEvent<bool>(GetFunction("FileExists"), @params);
    }
    public FString FeaturePackDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("FeaturePackDir"), @params);
    }
    public FString EnterprisePluginsDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("EnterprisePluginsDir"), @params);
    }
    public FString EnterpriseFeaturePackDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("EnterpriseFeaturePackDir"), @params);
    }
    public FString EnterpriseDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("EnterpriseDir"), @params);
    }
    public FString EngineVersionAgnosticUserDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("EngineVersionAgnosticUserDir"), @params);
    }
    public FString EngineUserDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("EngineUserDir"), @params);
    }
    public FString EngineSourceDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("EngineSourceDir"), @params);
    }
    public FString EngineSavedDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("EngineSavedDir"), @params);
    }
    public FString EnginePluginsDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("EnginePluginsDir"), @params);
    }
    public FString EngineIntermediateDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("EngineIntermediateDir"), @params);
    }
    public FString EngineDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("EngineDir"), @params);
    }
    public FString EngineContentDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("EngineContentDir"), @params);
    }
    public FString EngineConfigDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("EngineConfigDir"), @params);
    }
    public bool DirectoryExists(FString InPath)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath)
        ];
        return ProcessEvent<bool>(GetFunction("DirectoryExists"), @params);
    }
    public FString DiffDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("DiffDir"), @params);
    }
    public FString CreateTempFilename(FString Path, FString Prefix, FString Extension)
    {
        Span<(string name, object value)> @params = [
            ("Path", Path), 
            ("Prefix", Prefix), 
            ("Extension", Extension)
        ];
        return ProcessEvent<FString>(GetFunction("CreateTempFilename"), @params);
    }
    public FString ConvertToSandboxPath(FString InPath, FString InSandboxName)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath), 
            ("InSandboxName", InSandboxName)
        ];
        return ProcessEvent<FString>(GetFunction("ConvertToSandboxPath"), @params);
    }
    public FString ConvertRelativePathToFull(FString InPath, FString InBasePath)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath), 
            ("InBasePath", InBasePath)
        ];
        return ProcessEvent<FString>(GetFunction("ConvertRelativePathToFull"), @params);
    }
    public FString ConvertFromSandboxPath(FString InPath, FString InSandboxName)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath), 
            ("InSandboxName", InSandboxName)
        ];
        return ProcessEvent<FString>(GetFunction("ConvertFromSandboxPath"), @params);
    }
    public FString Combine(ref TArray<FString> InPaths)
    {
        Span<(string name, object value)> @params = [
            ("InPaths", InPaths)
        ];
        return ProcessEvent<FString>(GetFunction("Combine"), @params);
    }
    public bool CollapseRelativeDirectories(FString InPath, ref FString OutPath)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath), 
            ("OutPath", OutPath)
        ];
        return ProcessEvent<bool>(GetFunction("CollapseRelativeDirectories"), @params);
    }
    public FString CloudDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("CloudDir"), @params);
    }
    public FString ChangeExtension(FString InPath, FString InNewExtension)
    {
        Span<(string name, object value)> @params = [
            ("InPath", InPath), 
            ("InNewExtension", InNewExtension)
        ];
        return ProcessEvent<FString>(GetFunction("ChangeExtension"), @params);
    }
    public FString BugItDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("BugItDir"), @params);
    }
    public FString AutomationTransientDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("AutomationTransientDir"), @params);
    }
    public FString AutomationLogDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("AutomationLogDir"), @params);
    }
    public FString AutomationDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("AutomationDir"), @params);
    }
}

public unsafe class PlatformGameInstance : ObjectBase<UPlatformGameInstance>
{
    public PlatformGameInstance(IntPtr pointer) : base(pointer) {}
}

public unsafe class BlueprintSetLibrary : ObjectBase<UBlueprintSetLibrary>
{
    public BlueprintSetLibrary(IntPtr pointer) : base(pointer) {}
    public void SetSetPropertyByName(UObject* Object, FName PropertyName, ref TSet<int> Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetSetPropertyByName"), @params);
    }
    public void Set_Union(ref TSet<int> A, ref TSet<int> B, ref TSet<int> Result)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Result", Result)
        ];
        ProcessEvent(GetFunction("Set_Union"), @params);
    }
    public void Set_ToArray(ref TSet<int> A, ref TArray<int> Result)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Result", Result)
        ];
        ProcessEvent(GetFunction("Set_ToArray"), @params);
    }
    public void Set_RemoveItems(ref TSet<int> TargetSet, ref TArray<int> Items)
    {
        Span<(string name, object value)> @params = [
            ("TargetSet", TargetSet), 
            ("Items", Items)
        ];
        ProcessEvent(GetFunction("Set_RemoveItems"), @params);
    }
    public bool Set_Remove(ref TSet<int> TargetSet, ref int Item)
    {
        Span<(string name, object value)> @params = [
            ("TargetSet", TargetSet), 
            ("Item", Item)
        ];
        return ProcessEvent<bool>(GetFunction("Set_Remove"), @params);
    }
    public int Set_Length(ref TSet<int> TargetSet)
    {
        Span<(string name, object value)> @params = [
            ("TargetSet", TargetSet)
        ];
        return ProcessEvent<int>(GetFunction("Set_Length"), @params);
    }
    public void Set_Intersection(ref TSet<int> A, ref TSet<int> B, ref TSet<int> Result)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Result", Result)
        ];
        ProcessEvent(GetFunction("Set_Intersection"), @params);
    }
    public void Set_Difference(ref TSet<int> A, ref TSet<int> B, ref TSet<int> Result)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Result", Result)
        ];
        ProcessEvent(GetFunction("Set_Difference"), @params);
    }
    public bool Set_Contains(ref TSet<int> TargetSet, ref int ItemToFind)
    {
        Span<(string name, object value)> @params = [
            ("TargetSet", TargetSet), 
            ("ItemToFind", ItemToFind)
        ];
        return ProcessEvent<bool>(GetFunction("Set_Contains"), @params);
    }
    public void Set_Clear(ref TSet<int> TargetSet)
    {
        Span<(string name, object value)> @params = [
            ("TargetSet", TargetSet)
        ];
        ProcessEvent(GetFunction("Set_Clear"), @params);
    }
    public void Set_AddItems(ref TSet<int> TargetSet, ref TArray<int> NewItems)
    {
        Span<(string name, object value)> @params = [
            ("TargetSet", TargetSet), 
            ("NewItems", NewItems)
        ];
        ProcessEvent(GetFunction("Set_AddItems"), @params);
    }
    public void Set_Add(ref TSet<int> TargetSet, ref int NewItem)
    {
        Span<(string name, object value)> @params = [
            ("TargetSet", TargetSet), 
            ("NewItem", NewItem)
        ];
        ProcessEvent(GetFunction("Set_Add"), @params);
    }
}

public unsafe class BodySetup : ObjectBase<UBodySetup>
{
    public BodySetup(IntPtr pointer) : base(pointer) {}
}

public unsafe class BoneMaskFilter : ObjectBase<UBoneMaskFilter>
{
    public BoneMaskFilter(IntPtr pointer) : base(pointer) {}
}

public unsafe class BookmarkBase : ObjectBase<UBookmarkBase>
{
    public BookmarkBase(IntPtr pointer) : base(pointer) {}}

public unsafe class BookMark : ObjectBase<UBookMark>
{
    public BookMark(IntPtr pointer) : base(pointer) {}
}

public unsafe class BookMark2D : ObjectBase<UBookMark2D>
{
    public BookMark2D(IntPtr pointer) : base(pointer) {}
}

public unsafe class BoundsCopyComponent : ObjectBase<UBoundsCopyComponent>
{
    public BoundsCopyComponent(IntPtr pointer) : base(pointer) {}
}

public unsafe class ReflectionCapture : ObjectBase<AReflectionCapture>
{
    public ReflectionCapture(IntPtr pointer) : base(pointer) {}
}

public unsafe class BoxReflectionCapture : ObjectBase<ABoxReflectionCapture>
{
    public BoxReflectionCapture(IntPtr pointer) : base(pointer) {}}

public unsafe class ReflectionCaptureComponent : ObjectBase<UReflectionCaptureComponent>
{
    public ReflectionCaptureComponent(IntPtr pointer) : base(pointer) {}
}

public unsafe class BoxReflectionCaptureComponent : ObjectBase<UBoxReflectionCaptureComponent>
{
    public BoxReflectionCaptureComponent(IntPtr pointer) : base(pointer) {}
}

public unsafe class Breakpoint : ObjectBase<UBreakpoint>
{
    public Breakpoint(IntPtr pointer) : base(pointer) {}
}

public unsafe class BrushBuilder : ObjectBase<UBrushBuilder>
{
    public BrushBuilder(IntPtr pointer) : base(pointer) {}
}

public unsafe class BrushComponent : ObjectBase<UBrushComponent>
{
    public BrushComponent(IntPtr pointer) : base(pointer) {}
}

public unsafe class BrushShape : ObjectBase<ABrushShape>
{
    public BrushShape(IntPtr pointer) : base(pointer) {}}

public unsafe class ButtonStyleAsset : ObjectBase<UButtonStyleAsset>
{
    public ButtonStyleAsset(IntPtr pointer) : base(pointer) {}
}

public unsafe class CameraAnim : ObjectBase<UCameraAnim>
{
    public CameraAnim(IntPtr pointer) : base(pointer) {}
}

public unsafe class CameraAnimInst : ObjectBase<UCameraAnimInst>
{
    public CameraAnimInst(IntPtr pointer) : base(pointer) {}
    public void Stop(bool bImmediate)
    {
        Span<(string name, object value)> @params = [
            ("bImmediate", bImmediate)
        ];
        ProcessEvent(GetFunction("Stop"), @params);
    }
    public void SetScale(float NewDuration)
    {
        Span<(string name, object value)> @params = [
            ("NewDuration", NewDuration)
        ];
        ProcessEvent(GetFunction("SetScale"), @params);
    }
    public void SetDuration(float NewDuration)
    {
        Span<(string name, object value)> @params = [
            ("NewDuration", NewDuration)
        ];
        ProcessEvent(GetFunction("SetDuration"), @params);
    }
}

public unsafe class CameraBlockingVolume : ObjectBase<ACameraBlockingVolume>
{
    public CameraBlockingVolume(IntPtr pointer) : base(pointer) {}}

public unsafe class CameraModifier : ObjectBase<UCameraModifier>
{
    public CameraModifier(IntPtr pointer) : base(pointer) {}
    public bool IsDisabled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsDisabled"), @params);
    }
    public AActor* GetViewTarget()
    {
        Span<(string name, object value)> @params = [
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("GetViewTarget"), @params);
    }
    public void EnableModifier()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("EnableModifier"), @params);
    }
    public void DisableModifier(bool bImmediate)
    {
        Span<(string name, object value)> @params = [
            ("bImmediate", bImmediate)
        ];
        ProcessEvent(GetFunction("DisableModifier"), @params);
    }
    public void BlueprintModifyPostProcess(float DeltaTime, ref float PostProcessBlendWeight, ref FPostProcessSettings PostProcessSettings)
    {
        Span<(string name, object value)> @params = [
            ("DeltaTime", DeltaTime), 
            ("PostProcessBlendWeight", PostProcessBlendWeight), 
            ("PostProcessSettings", PostProcessSettings)
        ];
        ProcessEvent(GetFunction("BlueprintModifyPostProcess"), @params);
    }
    public void BlueprintModifyCamera(float DeltaTime, FVector ViewLocation, FRotator ViewRotation, float FOV, ref FVector NewViewLocation, ref FRotator NewViewRotation, ref float NewFOV)
    {
        Span<(string name, object value)> @params = [
            ("DeltaTime", DeltaTime), 
            ("ViewLocation", ViewLocation), 
            ("ViewRotation", ViewRotation), 
            ("FOV", FOV), 
            ("NewViewLocation", NewViewLocation), 
            ("NewViewRotation", NewViewRotation), 
            ("NewFOV", NewFOV)
        ];
        ProcessEvent(GetFunction("BlueprintModifyCamera"), @params);
    }
}

public unsafe class CameraModifier_CameraShake : ObjectBase<UCameraModifier_CameraShake>
{
    public CameraModifier_CameraShake(IntPtr pointer) : base(pointer) {}
}

public unsafe class CameraShakeSourceActor : ObjectBase<ACameraShakeSourceActor>
{
    public CameraShakeSourceActor(IntPtr pointer) : base(pointer) {}
}

public unsafe class CameraShakeSourceComponent : ObjectBase<UCameraShakeSourceComponent>
{
    public CameraShakeSourceComponent(IntPtr pointer) : base(pointer) {}
    public void StopAllCameraShakesOfType(TSubclassOf<UCameraShakeBase> InCameraShake, bool bImmediately)
    {
        Span<(string name, object value)> @params = [
            ("InCameraShake", InCameraShake), 
            ("bImmediately", bImmediately)
        ];
        ProcessEvent(GetFunction("StopAllCameraShakesOfType"), @params);
    }
    public void StopAllCameraShakes(bool bImmediately)
    {
        Span<(string name, object value)> @params = [
            ("bImmediately", bImmediately)
        ];
        ProcessEvent(GetFunction("StopAllCameraShakes"), @params);
    }
    public void StartCameraShake(TSubclassOf<UCameraShakeBase> InCameraShake, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot)
    {
        Span<(string name, object value)> @params = [
            ("InCameraShake", InCameraShake), 
            ("Scale", Scale), 
            ("PlaySpace", PlaySpace), 
            ("UserPlaySpaceRot", UserPlaySpaceRot)
        ];
        ProcessEvent(GetFunction("StartCameraShake"), @params);
    }
    public void Start()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Start"), @params);
    }
    public float GetAttenuationFactor(ref FVector Location)
    {
        Span<(string name, object value)> @params = [
            ("Location", Location)
        ];
        return ProcessEvent<float>(GetFunction("GetAttenuationFactor"), @params);
    }
}

public unsafe class Canvas : ObjectBase<UCanvas>
{
    public Canvas(IntPtr pointer) : base(pointer) {}
    public FVector2D K2_TextSize(UFont* RenderFont, FString RenderText, FVector2D Scale)
    {
        Span<(string name, object value)> @params = [
            ("RenderFont", (IntPtr)RenderFont), 
            ("RenderText", RenderText), 
            ("Scale", Scale)
        ];
        return ProcessEvent<FVector2D>(GetFunction("K2_TextSize"), @params);
    }
    public FVector2D K2_StrLen(UFont* RenderFont, FString RenderText)
    {
        Span<(string name, object value)> @params = [
            ("RenderFont", (IntPtr)RenderFont), 
            ("RenderText", RenderText)
        ];
        return ProcessEvent<FVector2D>(GetFunction("K2_StrLen"), @params);
    }
    public FVector K2_Project(FVector WorldLocation)
    {
        Span<(string name, object value)> @params = [
            ("WorldLocation", WorldLocation)
        ];
        return ProcessEvent<FVector>(GetFunction("K2_Project"), @params);
    }
    public void K2_DrawTriangle(UTexture* RenderTexture, TArray<FCanvasUVTri> Triangles)
    {
        Span<(string name, object value)> @params = [
            ("RenderTexture", (IntPtr)RenderTexture), 
            ("Triangles", Triangles)
        ];
        ProcessEvent(GetFunction("K2_DrawTriangle"), @params);
    }
    public void K2_DrawTexture(UTexture* RenderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, EBlendMode BlendMode, float Rotation, FVector2D PivotPoint)
    {
        Span<(string name, object value)> @params = [
            ("RenderTexture", (IntPtr)RenderTexture), 
            ("ScreenPosition", ScreenPosition), 
            ("ScreenSize", ScreenSize), 
            ("CoordinatePosition", CoordinatePosition), 
            ("CoordinateSize", CoordinateSize), 
            ("RenderColor", RenderColor), 
            ("BlendMode", BlendMode), 
            ("Rotation", Rotation), 
            ("PivotPoint", PivotPoint)
        ];
        ProcessEvent(GetFunction("K2_DrawTexture"), @params);
    }
    public void K2_DrawText(UFont* RenderFont, FString RenderText, FVector2D ScreenPosition, FVector2D Scale, FLinearColor RenderColor, float Kerning, FLinearColor ShadowColor, FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, FLinearColor OutlineColor)
    {
        Span<(string name, object value)> @params = [
            ("RenderFont", (IntPtr)RenderFont), 
            ("RenderText", RenderText), 
            ("ScreenPosition", ScreenPosition), 
            ("Scale", Scale), 
            ("RenderColor", RenderColor), 
            ("Kerning", Kerning), 
            ("ShadowColor", ShadowColor), 
            ("ShadowOffset", ShadowOffset), 
            ("bCentreX", bCentreX), 
            ("bCentreY", bCentreY), 
            ("bOutlined", bOutlined), 
            ("OutlineColor", OutlineColor)
        ];
        ProcessEvent(GetFunction("K2_DrawText"), @params);
    }
    public void K2_DrawPolygon(UTexture* RenderTexture, FVector2D ScreenPosition, FVector2D Radius, int NumberOfSides, FLinearColor RenderColor)
    {
        Span<(string name, object value)> @params = [
            ("RenderTexture", (IntPtr)RenderTexture), 
            ("ScreenPosition", ScreenPosition), 
            ("Radius", Radius), 
            ("NumberOfSides", NumberOfSides), 
            ("RenderColor", RenderColor)
        ];
        ProcessEvent(GetFunction("K2_DrawPolygon"), @params);
    }
    public void K2_DrawMaterialTriangle(UMaterialInterface* RenderMaterial, TArray<FCanvasUVTri> Triangles)
    {
        Span<(string name, object value)> @params = [
            ("RenderMaterial", (IntPtr)RenderMaterial), 
            ("Triangles", Triangles)
        ];
        ProcessEvent(GetFunction("K2_DrawMaterialTriangle"), @params);
    }
    public void K2_DrawMaterial(UMaterialInterface* RenderMaterial, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, float Rotation, FVector2D PivotPoint)
    {
        Span<(string name, object value)> @params = [
            ("RenderMaterial", (IntPtr)RenderMaterial), 
            ("ScreenPosition", ScreenPosition), 
            ("ScreenSize", ScreenSize), 
            ("CoordinatePosition", CoordinatePosition), 
            ("CoordinateSize", CoordinateSize), 
            ("Rotation", Rotation), 
            ("PivotPoint", PivotPoint)
        ];
        ProcessEvent(GetFunction("K2_DrawMaterial"), @params);
    }
    public void K2_DrawLine(FVector2D ScreenPositionA, FVector2D ScreenPositionB, float Thickness, FLinearColor RenderColor)
    {
        Span<(string name, object value)> @params = [
            ("ScreenPositionA", ScreenPositionA), 
            ("ScreenPositionB", ScreenPositionB), 
            ("Thickness", Thickness), 
            ("RenderColor", RenderColor)
        ];
        ProcessEvent(GetFunction("K2_DrawLine"), @params);
    }
    public void K2_DrawBox(FVector2D ScreenPosition, FVector2D ScreenSize, float Thickness, FLinearColor RenderColor)
    {
        Span<(string name, object value)> @params = [
            ("ScreenPosition", ScreenPosition), 
            ("ScreenSize", ScreenSize), 
            ("Thickness", Thickness), 
            ("RenderColor", RenderColor)
        ];
        ProcessEvent(GetFunction("K2_DrawBox"), @params);
    }
    public void K2_DrawBorder(UTexture* BorderTexture, UTexture* BackgroundTexture, UTexture* LeftBorderTexture, UTexture* RightBorderTexture, UTexture* TopBorderTexture, UTexture* BottomBorderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, FVector2D BorderScale, FVector2D BackgroundScale, float Rotation, FVector2D PivotPoint, FVector2D CornerSize)
    {
        Span<(string name, object value)> @params = [
            ("BorderTexture", (IntPtr)BorderTexture), 
            ("BackgroundTexture", (IntPtr)BackgroundTexture), 
            ("LeftBorderTexture", (IntPtr)LeftBorderTexture), 
            ("RightBorderTexture", (IntPtr)RightBorderTexture), 
            ("TopBorderTexture", (IntPtr)TopBorderTexture), 
            ("BottomBorderTexture", (IntPtr)BottomBorderTexture), 
            ("ScreenPosition", ScreenPosition), 
            ("ScreenSize", ScreenSize), 
            ("CoordinatePosition", CoordinatePosition), 
            ("CoordinateSize", CoordinateSize), 
            ("RenderColor", RenderColor), 
            ("BorderScale", BorderScale), 
            ("BackgroundScale", BackgroundScale), 
            ("Rotation", Rotation), 
            ("PivotPoint", PivotPoint), 
            ("CornerSize", CornerSize)
        ];
        ProcessEvent(GetFunction("K2_DrawBorder"), @params);
    }
    public void K2_Deproject(FVector2D ScreenPosition, ref FVector WorldOrigin, ref FVector WorldDirection)
    {
        Span<(string name, object value)> @params = [
            ("ScreenPosition", ScreenPosition), 
            ("WorldOrigin", WorldOrigin), 
            ("WorldDirection", WorldDirection)
        ];
        ProcessEvent(GetFunction("K2_Deproject"), @params);
    }
}

public unsafe class TextureRenderTarget : ObjectBase<UTextureRenderTarget>
{
    public TextureRenderTarget(IntPtr pointer) : base(pointer) {}
}

public unsafe class TextureRenderTarget2D : ObjectBase<UTextureRenderTarget2D>
{
    public TextureRenderTarget2D(IntPtr pointer) : base(pointer) {}
}

public unsafe class CanvasRenderTarget2D : ObjectBase<UCanvasRenderTarget2D>
{
    public CanvasRenderTarget2D(IntPtr pointer) : base(pointer) {}
    public void UpdateResource()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("UpdateResource"), @params);
    }
    public void ReceiveUpdate(UCanvas* Canvas, int Width, int Height)
    {
        Span<(string name, object value)> @params = [
            ("Canvas", (IntPtr)Canvas), 
            ("Width", Width), 
            ("Height", Height)
        ];
        ProcessEvent(GetFunction("ReceiveUpdate"), @params);
    }
    public void GetSize(ref int Width, ref int Height)
    {
        Span<(string name, object value)> @params = [
            ("Width", Width), 
            ("Height", Height)
        ];
        ProcessEvent(GetFunction("GetSize"), @params);
    }
    public UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(UObject* WorldContextObject, TSubclassOf<UCanvasRenderTarget2D> CanvasRenderTarget2DClass, int Width, int Height)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("CanvasRenderTarget2DClass", CanvasRenderTarget2DClass), 
            ("Width", Width), 
            ("Height", Height)
        ];
        return (UCanvasRenderTarget2D*)ProcessEvent<IntPtr>(GetFunction("CreateCanvasRenderTarget2D"), @params);
    }
}

public unsafe class CapsuleComponent : ObjectBase<UCapsuleComponent>
{
    public CapsuleComponent(IntPtr pointer) : base(pointer) {}
    public void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps)
    {
        Span<(string name, object value)> @params = [
            ("InRadius", InRadius), 
            ("InHalfHeight", InHalfHeight), 
            ("bUpdateOverlaps", bUpdateOverlaps)
        ];
        ProcessEvent(GetFunction("SetCapsuleSize"), @params);
    }
    public void SetCapsuleRadius(float Radius, bool bUpdateOverlaps)
    {
        Span<(string name, object value)> @params = [
            ("Radius", Radius), 
            ("bUpdateOverlaps", bUpdateOverlaps)
        ];
        ProcessEvent(GetFunction("SetCapsuleRadius"), @params);
    }
    public void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps)
    {
        Span<(string name, object value)> @params = [
            ("HalfHeight", HalfHeight), 
            ("bUpdateOverlaps", bUpdateOverlaps)
        ];
        ProcessEvent(GetFunction("SetCapsuleHalfHeight"), @params);
    }
    public void GetUnscaledCapsuleSize_WithoutHemisphere(ref float OutRadius, ref float OutHalfHeightWithoutHemisphere)
    {
        Span<(string name, object value)> @params = [
            ("OutRadius", OutRadius), 
            ("OutHalfHeightWithoutHemisphere", OutHalfHeightWithoutHemisphere)
        ];
        ProcessEvent(GetFunction("GetUnscaledCapsuleSize_WithoutHemisphere"), @params);
    }
    public void GetUnscaledCapsuleSize(ref float OutRadius, ref float OutHalfHeight)
    {
        Span<(string name, object value)> @params = [
            ("OutRadius", OutRadius), 
            ("OutHalfHeight", OutHalfHeight)
        ];
        ProcessEvent(GetFunction("GetUnscaledCapsuleSize"), @params);
    }
    public float GetUnscaledCapsuleRadius()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetUnscaledCapsuleRadius"), @params);
    }
    public float GetUnscaledCapsuleHalfHeight_WithoutHemisphere()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetUnscaledCapsuleHalfHeight_WithoutHemisphere"), @params);
    }
    public float GetUnscaledCapsuleHalfHeight()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetUnscaledCapsuleHalfHeight"), @params);
    }
    public float GetShapeScale()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetShapeScale"), @params);
    }
    public void GetScaledCapsuleSize_WithoutHemisphere(ref float OutRadius, ref float OutHalfHeightWithoutHemisphere)
    {
        Span<(string name, object value)> @params = [
            ("OutRadius", OutRadius), 
            ("OutHalfHeightWithoutHemisphere", OutHalfHeightWithoutHemisphere)
        ];
        ProcessEvent(GetFunction("GetScaledCapsuleSize_WithoutHemisphere"), @params);
    }
    public void GetScaledCapsuleSize(ref float OutRadius, ref float OutHalfHeight)
    {
        Span<(string name, object value)> @params = [
            ("OutRadius", OutRadius), 
            ("OutHalfHeight", OutHalfHeight)
        ];
        ProcessEvent(GetFunction("GetScaledCapsuleSize"), @params);
    }
    public float GetScaledCapsuleRadius()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetScaledCapsuleRadius"), @params);
    }
    public float GetScaledCapsuleHalfHeight_WithoutHemisphere()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetScaledCapsuleHalfHeight_WithoutHemisphere"), @params);
    }
    public float GetScaledCapsuleHalfHeight()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetScaledCapsuleHalfHeight"), @params);
    }
}

public unsafe class CheatManagerExtension : ObjectBase<UCheatManagerExtension>
{
    public CheatManagerExtension(IntPtr pointer) : base(pointer) {}}

public unsafe class CheckBoxStyleAsset : ObjectBase<UCheckBoxStyleAsset>
{
    public CheckBoxStyleAsset(IntPtr pointer) : base(pointer) {}
}

public unsafe class ChildActorComponent : ObjectBase<UChildActorComponent>
{
    public ChildActorComponent(IntPtr pointer) : base(pointer) {}
    public void SetChildActorClass(TSubclassOf<AActor> InClass)
    {
        Span<(string name, object value)> @params = [
            ("InClass", InClass)
        ];
        ProcessEvent(GetFunction("SetChildActorClass"), @params);
    }
}

public unsafe class ChildConnection : ObjectBase<UChildConnection>
{
    public ChildConnection(IntPtr pointer) : base(pointer) {}
}

public unsafe class PlatformInterfaceBase : ObjectBase<UPlatformInterfaceBase>
{
    public PlatformInterfaceBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class CloudStorageBase : ObjectBase<UCloudStorageBase>
{
    public CloudStorageBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class CollisionProfile : ObjectBase<UCollisionProfile>
{
    public CollisionProfile(IntPtr pointer) : base(pointer) {}
}

public unsafe class ComponentDelegateBinding : ObjectBase<UComponentDelegateBinding>
{
    public ComponentDelegateBinding(IntPtr pointer) : base(pointer) {}
}

public unsafe class ActorComponentInstanceDataTransientOuter : ObjectBase<UActorComponentInstanceDataTransientOuter>
{
    public ActorComponentInstanceDataTransientOuter(IntPtr pointer) : base(pointer) {}}

public unsafe class CurveTable : ObjectBase<UCurveTable>
{
    public CurveTable(IntPtr pointer) : base(pointer) {}}

public unsafe class CompositeCurveTable : ObjectBase<UCompositeCurveTable>
{
    public CompositeCurveTable(IntPtr pointer) : base(pointer) {}
}

public unsafe class DataTable : ObjectBase<UDataTable>
{
    public DataTable(IntPtr pointer) : base(pointer) {}
}

public unsafe class CompositeDataTable : ObjectBase<UCompositeDataTable>
{
    public CompositeDataTable(IntPtr pointer) : base(pointer) {}
}

public unsafe class Engine : ObjectBase<UEngine>
{
    public Engine(IntPtr pointer) : base(pointer) {}
}

public unsafe class ScriptViewportClient : ObjectBase<UScriptViewportClient>
{
    public ScriptViewportClient(IntPtr pointer) : base(pointer) {}}

public unsafe class GameViewportClient : ObjectBase<UGameViewportClient>
{
    public GameViewportClient(IntPtr pointer) : base(pointer) {}
    public void SSSwapControllers()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("SSSwapControllers"), @params);
    }
    public void ShowTitleSafeArea()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ShowTitleSafeArea"), @params);
    }
    public void SetConsoleTarget(int PlayerIndex)
    {
        Span<(string name, object value)> @params = [
            ("PlayerIndex", PlayerIndex)
        ];
        ProcessEvent(GetFunction("SetConsoleTarget"), @params);
    }
}

public unsafe class Console : ObjectBase<UConsole>
{
    public Console(IntPtr pointer) : base(pointer) {}
}

public unsafe class ControlChannel : ObjectBase<UControlChannel>
{
    public ControlChannel(IntPtr pointer) : base(pointer) {}}

public unsafe class StreamingSettings : ObjectBase<UStreamingSettings>
{
    public StreamingSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class GarbageCollectionSettings : ObjectBase<UGarbageCollectionSettings>
{
    public GarbageCollectionSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class CullDistanceVolume : ObjectBase<ACullDistanceVolume>
{
    public CullDistanceVolume(IntPtr pointer) : base(pointer) {}
}

public unsafe class CurveBase : ObjectBase<UCurveBase>
{
    public CurveBase(IntPtr pointer) : base(pointer) {}
    public void GetValueRange(ref float MinValue, ref float MaxValue)
    {
        Span<(string name, object value)> @params = [
            ("MinValue", MinValue), 
            ("MaxValue", MaxValue)
        ];
        ProcessEvent(GetFunction("GetValueRange"), @params);
    }
    public void GetTimeRange(ref float MinTime, ref float MaxTime)
    {
        Span<(string name, object value)> @params = [
            ("MinTime", MinTime), 
            ("MaxTime", MaxTime)
        ];
        ProcessEvent(GetFunction("GetTimeRange"), @params);
    }
}

public unsafe class CurveEdPresetCurve : ObjectBase<UDEPRECATED_CurveEdPresetCurve>
{
    public CurveEdPresetCurve(IntPtr pointer) : base(pointer) {}}

public unsafe class CurveFloat : ObjectBase<UCurveFloat>
{
    public CurveFloat(IntPtr pointer) : base(pointer) {}
    public float GetFloatValue(float InTime)
    {
        Span<(string name, object value)> @params = [
            ("InTime", InTime)
        ];
        return ProcessEvent<float>(GetFunction("GetFloatValue"), @params);
    }
}

public unsafe class CurveLinearColor : ObjectBase<UCurveLinearColor>
{
    public CurveLinearColor(IntPtr pointer) : base(pointer) {}
    public FLinearColor GetUnadjustedLinearColorValue(float InTime)
    {
        Span<(string name, object value)> @params = [
            ("InTime", InTime)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("GetUnadjustedLinearColorValue"), @params);
    }
    public FLinearColor GetLinearColorValue(float InTime)
    {
        Span<(string name, object value)> @params = [
            ("InTime", InTime)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("GetLinearColorValue"), @params);
    }
    public FLinearColor GetClampedLinearColorValue(float InTime)
    {
        Span<(string name, object value)> @params = [
            ("InTime", InTime)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("GetClampedLinearColorValue"), @params);
    }
}

public unsafe class Texture2D : ObjectBase<UTexture2D>
{
    public Texture2D(IntPtr pointer) : base(pointer) {}
    public int Blueprint_GetSizeY()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("Blueprint_GetSizeY"), @params);
    }
    public int Blueprint_GetSizeX()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("Blueprint_GetSizeX"), @params);
    }
}

public unsafe class CurveLinearColorAtlas : ObjectBase<UCurveLinearColorAtlas>
{
    public CurveLinearColorAtlas(IntPtr pointer) : base(pointer) {}
    public bool GetCurvePosition(UCurveLinearColor* InCurve, ref float Position)
    {
        Span<(string name, object value)> @params = [
            ("InCurve", (IntPtr)InCurve), 
            ("Position", Position)
        ];
        return ProcessEvent<bool>(GetFunction("GetCurvePosition"), @params);
    }
}

public unsafe class CurveSourceInterface : ObjectBase<ICurveSourceInterface>
{
    public CurveSourceInterface(IntPtr pointer) : base(pointer) {}
    public float GetCurveValue(FName CurveName)
    {
        Span<(string name, object value)> @params = [
            ("CurveName", CurveName)
        ];
        return ProcessEvent<float>(GetFunction("GetCurveValue"), @params);
    }
    public void GetCurves(ref TArray<FNamedCurveValue> OutValues)
    {
        Span<(string name, object value)> @params = [
            ("OutValues", OutValues)
        ];
        ProcessEvent(GetFunction("GetCurves"), @params);
    }
    public FName GetBindingName()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FName>(GetFunction("GetBindingName"), @params);
    }
}

public unsafe class CurveVector : ObjectBase<UCurveVector>
{
    public CurveVector(IntPtr pointer) : base(pointer) {}
    public FVector GetVectorValue(float InTime)
    {
        Span<(string name, object value)> @params = [
            ("InTime", InTime)
        ];
        return ProcessEvent<FVector>(GetFunction("GetVectorValue"), @params);
    }
}

public unsafe class DamageType : ObjectBase<UDamageType>
{
    public DamageType(IntPtr pointer) : base(pointer) {}
}

public unsafe class DataDrivenCVarEngineSubsystem : ObjectBase<UDataDrivenCVarEngineSubsystem>
{
    public DataDrivenCVarEngineSubsystem(IntPtr pointer) : base(pointer) {}
}

public unsafe class DataDrivenConsoleVariableSettings : ObjectBase<UDataDrivenConsoleVariableSettings>
{
    public DataDrivenConsoleVariableSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class DataTableFunctionLibrary : ObjectBase<UDataTableFunctionLibrary>
{
    public DataTableFunctionLibrary(IntPtr pointer) : base(pointer) {}
    public void GetDataTableRowNames(UDataTable* Table, ref TArray<FName> OutRowNames)
    {
        Span<(string name, object value)> @params = [
            ("Table", (IntPtr)Table), 
            ("OutRowNames", OutRowNames)
        ];
        ProcessEvent(GetFunction("GetDataTableRowNames"), @params);
    }
    public bool GetDataTableRowFromName(UDataTable* Table, FName RowName, ref FTableRowBase OutRow)
    {
        Span<(string name, object value)> @params = [
            ("Table", (IntPtr)Table), 
            ("RowName", RowName), 
            ("OutRow", OutRow)
        ];
        return ProcessEvent<bool>(GetFunction("GetDataTableRowFromName"), @params);
    }
    public TArray<FString> GetDataTableColumnAsString(UDataTable* DataTable, FName PropertyName)
    {
        Span<(string name, object value)> @params = [
            ("DataTable", (IntPtr)DataTable), 
            ("PropertyName", PropertyName)
        ];
        return ProcessEvent<TArray<FString>>(GetFunction("GetDataTableColumnAsString"), @params);
    }
    public void EvaluateCurveTableRow(UCurveTable* CurveTable, FName RowName, float InXY, ref EEvaluateCurveTableResult OutResult, ref float OutXY, FString ContextString)
    {
        Span<(string name, object value)> @params = [
            ("CurveTable", (IntPtr)CurveTable), 
            ("RowName", RowName), 
            ("InXY", InXY), 
            ("OutResult", OutResult), 
            ("OutXY", OutXY), 
            ("ContextString", ContextString)
        ];
        ProcessEvent(GetFunction("EvaluateCurveTableRow"), @params);
    }
    public bool DoesDataTableRowExist(UDataTable* Table, FName RowName)
    {
        Span<(string name, object value)> @params = [
            ("Table", (IntPtr)Table), 
            ("RowName", RowName)
        ];
        return ProcessEvent<bool>(GetFunction("DoesDataTableRowExist"), @params);
    }
}

public unsafe class DebugCameraController : ObjectBase<ADebugCameraController>
{
    public DebugCameraController(IntPtr pointer) : base(pointer) {}
    public void ToggleDisplay()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ToggleDisplay"), @params);
    }
    public void ShowDebugSelectedInfo()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ShowDebugSelectedInfo"), @params);
    }
    public void SetPawnMovementSpeedScale(float NewSpeedScale)
    {
        Span<(string name, object value)> @params = [
            ("NewSpeedScale", NewSpeedScale)
        ];
        ProcessEvent(GetFunction("SetPawnMovementSpeedScale"), @params);
    }
    public void ReceiveOnDeactivate(APlayerController* RestoredPC)
    {
        Span<(string name, object value)> @params = [
            ("RestoredPC", (IntPtr)RestoredPC)
        ];
        ProcessEvent(GetFunction("ReceiveOnDeactivate"), @params);
    }
    public void ReceiveOnActorSelected(AActor* NewSelectedActor, ref FVector SelectHitLocation, ref FVector SelectHitNormal, ref FHitResult Hit)
    {
        Span<(string name, object value)> @params = [
            ("NewSelectedActor", (IntPtr)NewSelectedActor), 
            ("SelectHitLocation", SelectHitLocation), 
            ("SelectHitNormal", SelectHitNormal), 
            ("Hit", Hit)
        ];
        ProcessEvent(GetFunction("ReceiveOnActorSelected"), @params);
    }
    public void ReceiveOnActivate(APlayerController* OriginalPC)
    {
        Span<(string name, object value)> @params = [
            ("OriginalPC", (IntPtr)OriginalPC)
        ];
        ProcessEvent(GetFunction("ReceiveOnActivate"), @params);
    }
    public AActor* GetSelectedActor()
    {
        Span<(string name, object value)> @params = [
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("GetSelectedActor"), @params);
    }
}

public unsafe class DebugCameraControllerSettings : ObjectBase<UDebugCameraControllerSettings>
{
    public DebugCameraControllerSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class DebugCameraHUD : ObjectBase<ADebugCameraHUD>
{
    public DebugCameraHUD(IntPtr pointer) : base(pointer) {}}

public unsafe class DebugDrawService : ObjectBase<UDebugDrawService>
{
    public DebugDrawService(IntPtr pointer) : base(pointer) {}}

public unsafe class DecalActor : ObjectBase<ADecalActor>
{
    public DecalActor(IntPtr pointer) : base(pointer) {}
    public void SetDecalMaterial(UMaterialInterface* NewDecalMaterial)
    {
        Span<(string name, object value)> @params = [
            ("NewDecalMaterial", (IntPtr)NewDecalMaterial)
        ];
        ProcessEvent(GetFunction("SetDecalMaterial"), @params);
    }
    public UMaterialInterface* GetDecalMaterial()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UMaterialInterface*)ProcessEvent<IntPtr>(GetFunction("GetDecalMaterial"), @params);
    }
    public UMaterialInstanceDynamic* CreateDynamicMaterialInstance()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UMaterialInstanceDynamic*)ProcessEvent<IntPtr>(GetFunction("CreateDynamicMaterialInstance"), @params);
    }
}

public unsafe class DecalComponent : ObjectBase<UDecalComponent>
{
    public DecalComponent(IntPtr pointer) : base(pointer) {}
    public void SetSortOrder(int Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetSortOrder"), @params);
    }
    public void SetFadeScreenSize(float NewFadeScreenSize)
    {
        Span<(string name, object value)> @params = [
            ("NewFadeScreenSize", NewFadeScreenSize)
        ];
        ProcessEvent(GetFunction("SetFadeScreenSize"), @params);
    }
    public void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade)
    {
        Span<(string name, object value)> @params = [
            ("StartDelay", StartDelay), 
            ("Duration", Duration), 
            ("DestroyOwnerAfterFade", DestroyOwnerAfterFade)
        ];
        ProcessEvent(GetFunction("SetFadeOut"), @params);
    }
    public void SetFadeIn(float StartDelay, float Duaration)
    {
        Span<(string name, object value)> @params = [
            ("StartDelay", StartDelay), 
            ("Duaration", Duaration)
        ];
        ProcessEvent(GetFunction("SetFadeIn"), @params);
    }
    public void SetDecalMaterial(UMaterialInterface* NewDecalMaterial)
    {
        Span<(string name, object value)> @params = [
            ("NewDecalMaterial", (IntPtr)NewDecalMaterial)
        ];
        ProcessEvent(GetFunction("SetDecalMaterial"), @params);
    }
    public float GetFadeStartDelay()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetFadeStartDelay"), @params);
    }
    public float GetFadeInStartDelay()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetFadeInStartDelay"), @params);
    }
    public float GetFadeInDuration()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetFadeInDuration"), @params);
    }
    public float GetFadeDuration()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetFadeDuration"), @params);
    }
    public UMaterialInterface* GetDecalMaterial()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UMaterialInterface*)ProcessEvent<IntPtr>(GetFunction("GetDecalMaterial"), @params);
    }
    public UMaterialInstanceDynamic* CreateDynamicMaterialInstance()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UMaterialInstanceDynamic*)ProcessEvent<IntPtr>(GetFunction("CreateDynamicMaterialInstance"), @params);
    }
}

public unsafe class DefaultPawn : ObjectBase<ADefaultPawn>
{
    public DefaultPawn(IntPtr pointer) : base(pointer) {}
    public void TurnAtRate(float Rate)
    {
        Span<(string name, object value)> @params = [
            ("Rate", Rate)
        ];
        ProcessEvent(GetFunction("TurnAtRate"), @params);
    }
    public void MoveUp_World(float Val)
    {
        Span<(string name, object value)> @params = [
            ("Val", Val)
        ];
        ProcessEvent(GetFunction("MoveUp_World"), @params);
    }
    public void MoveRight(float Val)
    {
        Span<(string name, object value)> @params = [
            ("Val", Val)
        ];
        ProcessEvent(GetFunction("MoveRight"), @params);
    }
    public void MoveForward(float Val)
    {
        Span<(string name, object value)> @params = [
            ("Val", Val)
        ];
        ProcessEvent(GetFunction("MoveForward"), @params);
    }
    public void LookUpAtRate(float Rate)
    {
        Span<(string name, object value)> @params = [
            ("Rate", Rate)
        ];
        ProcessEvent(GetFunction("LookUpAtRate"), @params);
    }
}

public unsafe class PhysicsVolume : ObjectBase<APhysicsVolume>
{
    public PhysicsVolume(IntPtr pointer) : base(pointer) {}
}

public unsafe class DefaultPhysicsVolume : ObjectBase<ADefaultPhysicsVolume>
{
    public DefaultPhysicsVolume(IntPtr pointer) : base(pointer) {}}

public unsafe class DemoNetConnection : ObjectBase<UDemoNetConnection>
{
    public DemoNetConnection(IntPtr pointer) : base(pointer) {}}

public unsafe class DemoNetDriver : ObjectBase<UDemoNetDriver>
{
    public DemoNetDriver(IntPtr pointer) : base(pointer) {}
}

public unsafe class PendingNetGame : ObjectBase<UPendingNetGame>
{
    public PendingNetGame(IntPtr pointer) : base(pointer) {}
}

public unsafe class DemoPendingNetGame : ObjectBase<UDemoPendingNetGame>
{
    public DemoPendingNetGame(IntPtr pointer) : base(pointer) {}}

public unsafe class DestructibleInterface : ObjectBase<IDestructibleInterface>
{
    public DestructibleInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class TextureLODSettings : ObjectBase<UTextureLODSettings>
{
    public TextureLODSettings(IntPtr pointer) : base(pointer) {}
}

public unsafe class DeviceProfile : ObjectBase<UDeviceProfile>
{
    public DeviceProfile(IntPtr pointer) : base(pointer) {}
}

public unsafe class DeviceProfileFragment : ObjectBase<UDeviceProfileFragment>
{
    public DeviceProfileFragment(IntPtr pointer) : base(pointer) {}}

public unsafe class DeviceProfileManager : ObjectBase<UDeviceProfileManager>
{
    public DeviceProfileManager(IntPtr pointer) : base(pointer) {}
}

public unsafe class DialogueSoundWaveProxy : ObjectBase<UDialogueSoundWaveProxy>
{
    public DialogueSoundWaveProxy(IntPtr pointer) : base(pointer) {}}

public unsafe class DialogueVoice : ObjectBase<UDialogueVoice>
{
    public DialogueVoice(IntPtr pointer) : base(pointer) {}
}

public unsafe class DialogueWave : ObjectBase<UDialogueWave>
{
    public DialogueWave(IntPtr pointer) : base(pointer) {}
}

public unsafe class Light : ObjectBase<ALight>
{
    public Light(IntPtr pointer) : base(pointer) {}
    public void ToggleEnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ToggleEnabled"), @params);
    }
    public void SetLightFunctionScale(FVector NewLightFunctionScale)
    {
        Span<(string name, object value)> @params = [
            ("NewLightFunctionScale", NewLightFunctionScale)
        ];
        ProcessEvent(GetFunction("SetLightFunctionScale"), @params);
    }
    public void SetLightFunctionMaterial(UMaterialInterface* NewLightFunctionMaterial)
    {
        Span<(string name, object value)> @params = [
            ("NewLightFunctionMaterial", (IntPtr)NewLightFunctionMaterial)
        ];
        ProcessEvent(GetFunction("SetLightFunctionMaterial"), @params);
    }
    public void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance)
    {
        Span<(string name, object value)> @params = [
            ("NewLightFunctionFadeDistance", NewLightFunctionFadeDistance)
        ];
        ProcessEvent(GetFunction("SetLightFunctionFadeDistance"), @params);
    }
    public void SetLightColor(FLinearColor NewLightColor)
    {
        Span<(string name, object value)> @params = [
            ("NewLightColor", NewLightColor)
        ];
        ProcessEvent(GetFunction("SetLightColor"), @params);
    }
    public void SetEnabled(bool bSetEnabled)
    {
        Span<(string name, object value)> @params = [
            ("bSetEnabled", bSetEnabled)
        ];
        ProcessEvent(GetFunction("SetEnabled"), @params);
    }
    public void SetCastShadows(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetCastShadows"), @params);
    }
    public void SetBrightness(float NewBrightness)
    {
        Span<(string name, object value)> @params = [
            ("NewBrightness", NewBrightness)
        ];
        ProcessEvent(GetFunction("SetBrightness"), @params);
    }
    public void SetAffectTranslucentLighting(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetAffectTranslucentLighting"), @params);
    }
    public void OnRep_bEnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_bEnabled"), @params);
    }
    public bool IsEnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsEnabled"), @params);
    }
    public FLinearColor GetLightColor()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FLinearColor>(GetFunction("GetLightColor"), @params);
    }
    public float GetBrightness()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetBrightness"), @params);
    }
}

public unsafe class DirectionalLight : ObjectBase<ADirectionalLight>
{
    public DirectionalLight(IntPtr pointer) : base(pointer) {}}

public unsafe class LightComponentBase : ObjectBase<ULightComponentBase>
{
    public LightComponentBase(IntPtr pointer) : base(pointer) {}
    public void SetSamplesPerPixel(int NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetSamplesPerPixel"), @params);
    }
    public void SetCastVolumetricShadow(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetCastVolumetricShadow"), @params);
    }
    public void SetCastShadows(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetCastShadows"), @params);
    }
    public void SetCastRaytracedShadow(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetCastRaytracedShadow"), @params);
    }
    public void SetCastDeepShadow(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetCastDeepShadow"), @params);
    }
    public void SetAffectReflection(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetAffectReflection"), @params);
    }
    public void SetAffectGlobalIllumination(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetAffectGlobalIllumination"), @params);
    }
    public FLinearColor GetLightColor()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FLinearColor>(GetFunction("GetLightColor"), @params);
    }
}

public unsafe class LightComponent : ObjectBase<ULightComponent>
{
    public LightComponent(IntPtr pointer) : base(pointer) {}
    public void SetVolumetricScatteringIntensity(float NewIntensity)
    {
        Span<(string name, object value)> @params = [
            ("NewIntensity", NewIntensity)
        ];
        ProcessEvent(GetFunction("SetVolumetricScatteringIntensity"), @params);
    }
    public void SetUseTemperature(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetUseTemperature"), @params);
    }
    public void SetUseIESBrightness(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetUseIESBrightness"), @params);
    }
    public void SetTransmission(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetTransmission"), @params);
    }
    public void SetTemperature(float NewTemperature)
    {
        Span<(string name, object value)> @params = [
            ("NewTemperature", NewTemperature)
        ];
        ProcessEvent(GetFunction("SetTemperature"), @params);
    }
    public void SetSpecularScale(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetSpecularScale"), @params);
    }
    public void SetShadowSlopeBias(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetShadowSlopeBias"), @params);
    }
    public void SetShadowBias(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetShadowBias"), @params);
    }
    public void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2)
    {
        Span<(string name, object value)> @params = [
            ("bChannel0", bChannel0), 
            ("bChannel1", bChannel1), 
            ("bChannel2", bChannel2)
        ];
        ProcessEvent(GetFunction("SetLightingChannels"), @params);
    }
    public void SetLightFunctionScale(FVector NewLightFunctionScale)
    {
        Span<(string name, object value)> @params = [
            ("NewLightFunctionScale", NewLightFunctionScale)
        ];
        ProcessEvent(GetFunction("SetLightFunctionScale"), @params);
    }
    public void SetLightFunctionMaterial(UMaterialInterface* NewLightFunctionMaterial)
    {
        Span<(string name, object value)> @params = [
            ("NewLightFunctionMaterial", (IntPtr)NewLightFunctionMaterial)
        ];
        ProcessEvent(GetFunction("SetLightFunctionMaterial"), @params);
    }
    public void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance)
    {
        Span<(string name, object value)> @params = [
            ("NewLightFunctionFadeDistance", NewLightFunctionFadeDistance)
        ];
        ProcessEvent(GetFunction("SetLightFunctionFadeDistance"), @params);
    }
    public void SetLightFunctionDisabledBrightness(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetLightFunctionDisabledBrightness"), @params);
    }
    public void SetLightColor(FLinearColor NewLightColor, bool bSRGB)
    {
        Span<(string name, object value)> @params = [
            ("NewLightColor", NewLightColor), 
            ("bSRGB", bSRGB)
        ];
        ProcessEvent(GetFunction("SetLightColor"), @params);
    }
    public void SetIntensity(float NewIntensity)
    {
        Span<(string name, object value)> @params = [
            ("NewIntensity", NewIntensity)
        ];
        ProcessEvent(GetFunction("SetIntensity"), @params);
    }
    public void SetIndirectLightingIntensity(float NewIntensity)
    {
        Span<(string name, object value)> @params = [
            ("NewIntensity", NewIntensity)
        ];
        ProcessEvent(GetFunction("SetIndirectLightingIntensity"), @params);
    }
    public void SetIESTexture(UTextureLightProfile* NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", (IntPtr)NewValue)
        ];
        ProcessEvent(GetFunction("SetIESTexture"), @params);
    }
    public void SetIESBrightnessScale(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetIESBrightnessScale"), @params);
    }
    public void SetForceCachedShadowsForMovablePrimitives(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetForceCachedShadowsForMovablePrimitives"), @params);
    }
    public void SetEnableLightShaftBloom(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetEnableLightShaftBloom"), @params);
    }
    public void SetBloomTint(FColor NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetBloomTint"), @params);
    }
    public void SetBloomThreshold(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetBloomThreshold"), @params);
    }
    public void SetBloomScale(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetBloomScale"), @params);
    }
    public void SetBloomMaxBrightness(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetBloomMaxBrightness"), @params);
    }
    public void SetAffectTranslucentLighting(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetAffectTranslucentLighting"), @params);
    }
    public void SetAffectDynamicIndirectLighting(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetAffectDynamicIndirectLighting"), @params);
    }
}

public unsafe class DirectionalLightComponent : ObjectBase<UDirectionalLightComponent>
{
    public DirectionalLightComponent(IntPtr pointer) : base(pointer) {}
    public void SetShadowDistanceFadeoutFraction(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetShadowDistanceFadeoutFraction"), @params);
    }
    public void SetShadowAmount(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetShadowAmount"), @params);
    }
    public void SetOcclusionMaskDarkness(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetOcclusionMaskDarkness"), @params);
    }
    public void SetLightShaftOverrideDirection(FVector NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetLightShaftOverrideDirection"), @params);
    }
    public void SetEnableLightShaftOcclusion(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetEnableLightShaftOcclusion"), @params);
    }
    public void SetDynamicShadowDistanceStationaryLight(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetDynamicShadowDistanceStationaryLight"), @params);
    }
    public void SetDynamicShadowDistanceMovableLight(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetDynamicShadowDistanceMovableLight"), @params);
    }
    public void SetDynamicShadowCascades(int NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetDynamicShadowCascades"), @params);
    }
    public void SetCascadeTransitionFraction(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetCascadeTransitionFraction"), @params);
    }
    public void SetCascadeDistributionExponent(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetCascadeDistributionExponent"), @params);
    }
    public void SetAtmosphereSunLightIndex(int NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetAtmosphereSunLightIndex"), @params);
    }
    public void SetAtmosphereSunLight(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetAtmosphereSunLight"), @params);
    }
}

public unsafe class Distribution : ObjectBase<UDistribution>
{
    public Distribution(IntPtr pointer) : base(pointer) {}}

public unsafe class DistributionFloat : ObjectBase<UDistributionFloat>
{
    public DistributionFloat(IntPtr pointer) : base(pointer) {}
}

public unsafe class DistributionFloatConstant : ObjectBase<UDistributionFloatConstant>
{
    public DistributionFloatConstant(IntPtr pointer) : base(pointer) {}
}

public unsafe class DistributionFloatConstantCurve : ObjectBase<UDistributionFloatConstantCurve>
{
    public DistributionFloatConstantCurve(IntPtr pointer) : base(pointer) {}
}

public unsafe class DistributionFloatParameterBase : ObjectBase<UDistributionFloatParameterBase>
{
    public DistributionFloatParameterBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class DistributionFloatParticleParameter : ObjectBase<UDistributionFloatParticleParameter>
{
    public DistributionFloatParticleParameter(IntPtr pointer) : base(pointer) {}}

public unsafe class DistributionFloatUniform : ObjectBase<UDistributionFloatUniform>
{
    public DistributionFloatUniform(IntPtr pointer) : base(pointer) {}
}

public unsafe class DistributionFloatUniformCurve : ObjectBase<UDistributionFloatUniformCurve>
{
    public DistributionFloatUniformCurve(IntPtr pointer) : base(pointer) {}
}

public unsafe class DistributionVector : ObjectBase<UDistributionVector>
{
    public DistributionVector(IntPtr pointer) : base(pointer) {}
}

public unsafe class DistributionVectorConstant : ObjectBase<UDistributionVectorConstant>
{
    public DistributionVectorConstant(IntPtr pointer) : base(pointer) {}
}

public unsafe class DistributionVectorConstantCurve : ObjectBase<UDistributionVectorConstantCurve>
{
    public DistributionVectorConstantCurve(IntPtr pointer) : base(pointer) {}
}

public unsafe class DistributionVectorParameterBase : ObjectBase<UDistributionVectorParameterBase>
{
    public DistributionVectorParameterBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class DistributionVectorParticleParameter : ObjectBase<UDistributionVectorParticleParameter>
{
    public DistributionVectorParticleParameter(IntPtr pointer) : base(pointer) {}}

public unsafe class DistributionVectorUniform : ObjectBase<UDistributionVectorUniform>
{
    public DistributionVectorUniform(IntPtr pointer) : base(pointer) {}
}

public unsafe class DistributionVectorUniformCurve : ObjectBase<UDistributionVectorUniformCurve>
{
    public DistributionVectorUniformCurve(IntPtr pointer) : base(pointer) {}
}

public unsafe class DocumentationActor : ObjectBase<ADocumentationActor>
{
    public DocumentationActor(IntPtr pointer) : base(pointer) {}}

public unsafe class DPICustomScalingRule : ObjectBase<UDPICustomScalingRule>
{
    public DPICustomScalingRule(IntPtr pointer) : base(pointer) {}}

public unsafe class DrawFrustumComponent : ObjectBase<UDrawFrustumComponent>
{
    public DrawFrustumComponent(IntPtr pointer) : base(pointer) {}
}

public unsafe class DrawSphereComponent : ObjectBase<UDrawSphereComponent>
{
    public DrawSphereComponent(IntPtr pointer) : base(pointer) {}}

public unsafe class EdGraph : ObjectBase<UEdGraph>
{
    public EdGraph(IntPtr pointer) : base(pointer) {}
}

public unsafe class GraphNodeContextMenuContext : ObjectBase<UGraphNodeContextMenuContext>
{
    public GraphNodeContextMenuContext(IntPtr pointer) : base(pointer) {}
}

public unsafe class EdGraphNode : ObjectBase<UEdGraphNode>
{
    public EdGraphNode(IntPtr pointer) : base(pointer) {}
}

public unsafe class EdGraphNode_Documentation : ObjectBase<UEdGraphNode_Documentation>
{
    public EdGraphNode_Documentation(IntPtr pointer) : base(pointer) {}
}

public unsafe class EdGraphPin_Deprecated : ObjectBase<UEdGraphPin_Deprecated>
{
    public EdGraphPin_Deprecated(IntPtr pointer) : base(pointer) {}
}

public unsafe class EdGraphSchema : ObjectBase<UEdGraphSchema>
{
    public EdGraphSchema(IntPtr pointer) : base(pointer) {}}

public unsafe class Emitter : ObjectBase<AEmitter>
{
    public Emitter(IntPtr pointer) : base(pointer) {}
    public void ToggleActive()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ToggleActive"), @params);
    }
    public void SetVectorParameter(FName ParameterName, FVector Param)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName), 
            ("Param", Param)
        ];
        ProcessEvent(GetFunction("SetVectorParameter"), @params);
    }
    public void SetTemplate(UParticleSystem* NewTemplate)
    {
        Span<(string name, object value)> @params = [
            ("NewTemplate", (IntPtr)NewTemplate)
        ];
        ProcessEvent(GetFunction("SetTemplate"), @params);
    }
    public void SetMaterialParameter(FName ParameterName, UMaterialInterface* Param)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName), 
            ("Param", (IntPtr)Param)
        ];
        ProcessEvent(GetFunction("SetMaterialParameter"), @params);
    }
    public void SetFloatParameter(FName ParameterName, float Param)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName), 
            ("Param", Param)
        ];
        ProcessEvent(GetFunction("SetFloatParameter"), @params);
    }
    public void SetColorParameter(FName ParameterName, FLinearColor Param)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName), 
            ("Param", Param)
        ];
        ProcessEvent(GetFunction("SetColorParameter"), @params);
    }
    public void SetActorParameter(FName ParameterName, AActor* Param)
    {
        Span<(string name, object value)> @params = [
            ("ParameterName", ParameterName), 
            ("Param", (IntPtr)Param)
        ];
        ProcessEvent(GetFunction("SetActorParameter"), @params);
    }
    public void OnRep_bCurrentlyActive()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_bCurrentlyActive"), @params);
    }
    public void OnParticleSystemFinished(UParticleSystemComponent* FinishedComponent)
    {
        Span<(string name, object value)> @params = [
            ("FinishedComponent", (IntPtr)FinishedComponent)
        ];
        ProcessEvent(GetFunction("OnParticleSystemFinished"), @params);
    }
    public bool IsActive()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsActive"), @params);
    }
    public void Deactivate()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Deactivate"), @params);
    }
    public void Activate()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Activate"), @params);
    }
}

public unsafe class EmitterCameraLensEffectBase : ObjectBase<AEmitterCameraLensEffectBase>
{
    public EmitterCameraLensEffectBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class ViewModeUtils : ObjectBase<UViewModeUtils>
{
    public ViewModeUtils(IntPtr pointer) : base(pointer) {}}

public unsafe class EngineBaseTypes : ObjectBase<UEngineBaseTypes>
{
    public EngineBaseTypes(IntPtr pointer) : base(pointer) {}}

public unsafe class EngineHandlerComponentFactory : ObjectBase<UEngineHandlerComponentFactory>
{
    public EngineHandlerComponentFactory(IntPtr pointer) : base(pointer) {}}

public unsafe class LocalMessage : ObjectBase<ULocalMessage>
{
    public LocalMessage(IntPtr pointer) : base(pointer) {}}

public unsafe class EngineMessage : ObjectBase<UEngineMessage>
{
    public EngineMessage(IntPtr pointer) : base(pointer) {}
}

public unsafe class EngineTypes : ObjectBase<UEngineTypes>
{
    public EngineTypes(IntPtr pointer) : base(pointer) {}}

public unsafe class ExponentialHeightFog : ObjectBase<AExponentialHeightFog>
{
    public ExponentialHeightFog(IntPtr pointer) : base(pointer) {}
    public void OnRep_bEnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("OnRep_bEnabled"), @params);
    }
}

public unsafe class ExponentialHeightFogComponent : ObjectBase<UExponentialHeightFogComponent>
{
    public ExponentialHeightFogComponent(IntPtr pointer) : base(pointer) {}
    public void SetVolumetricFogScatteringDistribution(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetVolumetricFogScatteringDistribution"), @params);
    }
    public void SetVolumetricFogExtinctionScale(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetVolumetricFogExtinctionScale"), @params);
    }
    public void SetVolumetricFogEmissive(FLinearColor NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetVolumetricFogEmissive"), @params);
    }
    public void SetVolumetricFogDistance(float NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetVolumetricFogDistance"), @params);
    }
    public void SetVolumetricFogAlbedo(FColor NewValue)
    {
        Span<(string name, object value)> @params = [
            ("NewValue", NewValue)
        ];
        ProcessEvent(GetFunction("SetVolumetricFogAlbedo"), @params);
    }
    public void SetVolumetricFog(bool bNewValue)
    {
        Span<(string name, object value)> @params = [
            ("bNewValue", bNewValue)
        ];
        ProcessEvent(GetFunction("SetVolumetricFog"), @params);
    }
    public void SetStartDistance(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetStartDistance"), @params);
    }
    public void SetNonDirectionalInscatteringColorDistance(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetNonDirectionalInscatteringColorDistance"), @params);
    }
    public void SetInscatteringTextureTint(FLinearColor Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetInscatteringTextureTint"), @params);
    }
    public void SetInscatteringColorCubemapAngle(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetInscatteringColorCubemapAngle"), @params);
    }
    public void SetInscatteringColorCubemap(UTextureCube* Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", (IntPtr)Value)
        ];
        ProcessEvent(GetFunction("SetInscatteringColorCubemap"), @params);
    }
    public void SetFullyDirectionalInscatteringColorDistance(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetFullyDirectionalInscatteringColorDistance"), @params);
    }
    public void SetFogMaxOpacity(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetFogMaxOpacity"), @params);
    }
    public void SetFogInscatteringColor(FLinearColor Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetFogInscatteringColor"), @params);
    }
    public void SetFogHeightFalloff(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetFogHeightFalloff"), @params);
    }
    public void SetFogDensity(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetFogDensity"), @params);
    }
    public void SetFogCutoffDistance(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetFogCutoffDistance"), @params);
    }
    public void SetDirectionalInscatteringStartDistance(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetDirectionalInscatteringStartDistance"), @params);
    }
    public void SetDirectionalInscatteringExponent(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetDirectionalInscatteringExponent"), @params);
    }
    public void SetDirectionalInscatteringColor(FLinearColor Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetDirectionalInscatteringColor"), @params);
    }
}

public unsafe class Exporter : ObjectBase<UExporter>
{
    public Exporter(IntPtr pointer) : base(pointer) {}
    public bool ScriptRunAssetExportTask(UAssetExportTask* Task)
    {
        Span<(string name, object value)> @params = [
            ("Task", (IntPtr)Task)
        ];
        return ProcessEvent<bool>(GetFunction("ScriptRunAssetExportTask"), @params);
    }
    public bool RunAssetExportTasks(ref TArray<IntPtr> ExportTasks)
    {
        Span<(string name, object value)> @params = [
            ("ExportTasks", ExportTasks)
        ];
        return ProcessEvent<bool>(GetFunction("RunAssetExportTasks"), @params);
    }
    public bool RunAssetExportTask(UAssetExportTask* Task)
    {
        Span<(string name, object value)> @params = [
            ("Task", (IntPtr)Task)
        ];
        return ProcessEvent<bool>(GetFunction("RunAssetExportTask"), @params);
    }
}

public unsafe class FloatingPawnMovement : ObjectBase<UFloatingPawnMovement>
{
    public FloatingPawnMovement(IntPtr pointer) : base(pointer) {}
}

public unsafe class Font : ObjectBase<UFont>
{
    public Font(IntPtr pointer) : base(pointer) {}
}

public unsafe class FontFace : ObjectBase<UFontFace>
{
    public FontFace(IntPtr pointer) : base(pointer) {}
}

public unsafe class FontImportOptions : ObjectBase<UFontImportOptions>
{
    public FontImportOptions(IntPtr pointer) : base(pointer) {}
}

public unsafe class ForceFeedbackAttenuation : ObjectBase<UForceFeedbackAttenuation>
{
    public ForceFeedbackAttenuation(IntPtr pointer) : base(pointer) {}
}

public unsafe class ForceFeedbackComponent : ObjectBase<UForceFeedbackComponent>
{
    public ForceFeedbackComponent(IntPtr pointer) : base(pointer) {}
    public void Stop()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("Stop"), @params);
    }
    public void SetIntensityMultiplier(float NewIntensityMultiplier)
    {
        Span<(string name, object value)> @params = [
            ("NewIntensityMultiplier", NewIntensityMultiplier)
        ];
        ProcessEvent(GetFunction("SetIntensityMultiplier"), @params);
    }
    public void SetForceFeedbackEffect(UForceFeedbackEffect* NewForceFeedbackEffect)
    {
        Span<(string name, object value)> @params = [
            ("NewForceFeedbackEffect", (IntPtr)NewForceFeedbackEffect)
        ];
        ProcessEvent(GetFunction("SetForceFeedbackEffect"), @params);
    }
    public void Play(float StartTime)
    {
        Span<(string name, object value)> @params = [
            ("StartTime", StartTime)
        ];
        ProcessEvent(GetFunction("Play"), @params);
    }
    public bool BP_GetAttenuationSettingsToApply(ref FForceFeedbackAttenuationSettings OutAttenuationSettings)
    {
        Span<(string name, object value)> @params = [
            ("OutAttenuationSettings", OutAttenuationSettings)
        ];
        return ProcessEvent<bool>(GetFunction("BP_GetAttenuationSettingsToApply"), @params);
    }
    public void AdjustAttenuation(ref FForceFeedbackAttenuationSettings InAttenuationSettings)
    {
        Span<(string name, object value)> @params = [
            ("InAttenuationSettings", InAttenuationSettings)
        ];
        ProcessEvent(GetFunction("AdjustAttenuation"), @params);
    }
}

public unsafe class ForceFeedbackEffect : ObjectBase<UForceFeedbackEffect>
{
    public ForceFeedbackEffect(IntPtr pointer) : base(pointer) {}
}

public unsafe class GameEngine : ObjectBase<UGameEngine>
{
    public GameEngine(IntPtr pointer) : base(pointer) {}
}

public unsafe class GameNetworkManager : ObjectBase<AGameNetworkManager>
{
    public GameNetworkManager(IntPtr pointer) : base(pointer) {}
}

public unsafe class GameplayStatics : ObjectBase<UGameplayStatics>
{
    public GameplayStatics(IntPtr pointer) : base(pointer) {}
    public void UnRetainAllSoundsInSoundClass(USoundClass* InSoundClass)
    {
        Span<(string name, object value)> @params = [
            ("InSoundClass", (IntPtr)InSoundClass)
        ];
        ProcessEvent(GetFunction("UnRetainAllSoundsInSoundClass"), @params);
    }
    public void UnloadStreamLevelBySoftObjectPtr(UObject* WorldContextObject, TSoftObjectPtr<UWorld> Level, FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Level", Level), 
            ("LatentInfo", LatentInfo), 
            ("bShouldBlockOnUnload", bShouldBlockOnUnload)
        ];
        ProcessEvent(GetFunction("UnloadStreamLevelBySoftObjectPtr"), @params);
    }
    public void UnloadStreamLevel(UObject* WorldContextObject, FName LevelName, FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("LevelName", LevelName), 
            ("LatentInfo", LatentInfo), 
            ("bShouldBlockOnUnload", bShouldBlockOnUnload)
        ];
        ProcessEvent(GetFunction("UnloadStreamLevel"), @params);
    }
    public bool SuggestProjectileVelocity_CustomArc(UObject* WorldContextObject, ref FVector OutLaunchVelocity, FVector StartPos, FVector EndPos, float OverrideGravityZ, float ArcParam)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("OutLaunchVelocity", OutLaunchVelocity), 
            ("StartPos", StartPos), 
            ("EndPos", EndPos), 
            ("OverrideGravityZ", OverrideGravityZ), 
            ("ArcParam", ArcParam)
        ];
        return ProcessEvent<bool>(GetFunction("SuggestProjectileVelocity_CustomArc"), @params);
    }
    public UAudioComponent* SpawnSoundAttached(USoundBase* Sound, USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, bool bAutoDestroy)
    {
        Span<(string name, object value)> @params = [
            ("Sound", (IntPtr)Sound), 
            ("AttachToComponent", (IntPtr)AttachToComponent), 
            ("AttachPointName", AttachPointName), 
            ("Location", Location), 
            ("Rotation", Rotation), 
            ("LocationType", LocationType), 
            ("bStopWhenAttachedToDestroyed", bStopWhenAttachedToDestroyed), 
            ("VolumeMultiplier", VolumeMultiplier), 
            ("PitchMultiplier", PitchMultiplier), 
            ("StartTime", StartTime), 
            ("AttenuationSettings", (IntPtr)AttenuationSettings), 
            ("ConcurrencySettings", (IntPtr)ConcurrencySettings), 
            ("bAutoDestroy", bAutoDestroy)
        ];
        return (UAudioComponent*)ProcessEvent<IntPtr>(GetFunction("SpawnSoundAttached"), @params);
    }
    public UAudioComponent* SpawnSoundAtLocation(UObject* WorldContextObject, USoundBase* Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, bool bAutoDestroy)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Sound", (IntPtr)Sound), 
            ("Location", Location), 
            ("Rotation", Rotation), 
            ("VolumeMultiplier", VolumeMultiplier), 
            ("PitchMultiplier", PitchMultiplier), 
            ("StartTime", StartTime), 
            ("AttenuationSettings", (IntPtr)AttenuationSettings), 
            ("ConcurrencySettings", (IntPtr)ConcurrencySettings), 
            ("bAutoDestroy", bAutoDestroy)
        ];
        return (UAudioComponent*)ProcessEvent<IntPtr>(GetFunction("SpawnSoundAtLocation"), @params);
    }
    public UAudioComponent* SpawnSound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Sound", (IntPtr)Sound), 
            ("VolumeMultiplier", VolumeMultiplier), 
            ("PitchMultiplier", PitchMultiplier), 
            ("StartTime", StartTime), 
            ("ConcurrencySettings", (IntPtr)ConcurrencySettings), 
            ("bPersistAcrossLevelTransition", bPersistAcrossLevelTransition), 
            ("bAutoDestroy", bAutoDestroy)
        ];
        return (UAudioComponent*)ProcessEvent<IntPtr>(GetFunction("SpawnSound2D"), @params);
    }
    public UObject* SpawnObject(UClass* ObjectClass, UObject* Outer)
    {
        Span<(string name, object value)> @params = [
            ("ObjectClass", (IntPtr)ObjectClass), 
            ("Outer", (IntPtr)Outer)
        ];
        return (UObject*)ProcessEvent<IntPtr>(GetFunction("SpawnObject"), @params);
    }
    public UForceFeedbackComponent* SpawnForceFeedbackAttached(UForceFeedbackEffect* ForceFeedbackEffect, USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy)
    {
        Span<(string name, object value)> @params = [
            ("ForceFeedbackEffect", (IntPtr)ForceFeedbackEffect), 
            ("AttachToComponent", (IntPtr)AttachToComponent), 
            ("AttachPointName", AttachPointName), 
            ("Location", Location), 
            ("Rotation", Rotation), 
            ("LocationType", LocationType), 
            ("bStopWhenAttachedToDestroyed", bStopWhenAttachedToDestroyed), 
            ("bLooping", bLooping), 
            ("IntensityMultiplier", IntensityMultiplier), 
            ("StartTime", StartTime), 
            ("AttenuationSettings", (IntPtr)AttenuationSettings), 
            ("bAutoDestroy", bAutoDestroy)
        ];
        return (UForceFeedbackComponent*)ProcessEvent<IntPtr>(GetFunction("SpawnForceFeedbackAttached"), @params);
    }
    public UForceFeedbackComponent* SpawnForceFeedbackAtLocation(UObject* WorldContextObject, UForceFeedbackEffect* ForceFeedbackEffect, FVector Location, FRotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("ForceFeedbackEffect", (IntPtr)ForceFeedbackEffect), 
            ("Location", Location), 
            ("Rotation", Rotation), 
            ("bLooping", bLooping), 
            ("IntensityMultiplier", IntensityMultiplier), 
            ("StartTime", StartTime), 
            ("AttenuationSettings", (IntPtr)AttenuationSettings), 
            ("bAutoDestroy", bAutoDestroy)
        ];
        return (UForceFeedbackComponent*)ProcessEvent<IntPtr>(GetFunction("SpawnForceFeedbackAtLocation"), @params);
    }
    public UParticleSystemComponent* SpawnEmitterAttached(UParticleSystem* EmitterTemplate, USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, FVector Scale, EAttachLocation LocationType, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate)
    {
        Span<(string name, object value)> @params = [
            ("EmitterTemplate", (IntPtr)EmitterTemplate), 
            ("AttachToComponent", (IntPtr)AttachToComponent), 
            ("AttachPointName", AttachPointName), 
            ("Location", Location), 
            ("Rotation", Rotation), 
            ("Scale", Scale), 
            ("LocationType", LocationType), 
            ("bAutoDestroy", bAutoDestroy), 
            ("PoolingMethod", PoolingMethod), 
            ("bAutoActivate", bAutoActivate)
        ];
        return (UParticleSystemComponent*)ProcessEvent<IntPtr>(GetFunction("SpawnEmitterAttached"), @params);
    }
    public UParticleSystemComponent* SpawnEmitterAtLocation(UObject* WorldContextObject, UParticleSystem* EmitterTemplate, FVector Location, FRotator Rotation, FVector Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("EmitterTemplate", (IntPtr)EmitterTemplate), 
            ("Location", Location), 
            ("Rotation", Rotation), 
            ("Scale", Scale), 
            ("bAutoDestroy", bAutoDestroy), 
            ("PoolingMethod", PoolingMethod), 
            ("bAutoActivateSystem", bAutoActivateSystem)
        ];
        return (UParticleSystemComponent*)ProcessEvent<IntPtr>(GetFunction("SpawnEmitterAtLocation"), @params);
    }
    public UAudioComponent* SpawnDialogueAttached(UDialogueWave* Dialogue, ref FDialogueContext Context, USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, bool bAutoDestroy)
    {
        Span<(string name, object value)> @params = [
            ("Dialogue", (IntPtr)Dialogue), 
            ("Context", Context), 
            ("AttachToComponent", (IntPtr)AttachToComponent), 
            ("AttachPointName", AttachPointName), 
            ("Location", Location), 
            ("Rotation", Rotation), 
            ("LocationType", LocationType), 
            ("bStopWhenAttachedToDestroyed", bStopWhenAttachedToDestroyed), 
            ("VolumeMultiplier", VolumeMultiplier), 
            ("PitchMultiplier", PitchMultiplier), 
            ("StartTime", StartTime), 
            ("AttenuationSettings", (IntPtr)AttenuationSettings), 
            ("bAutoDestroy", bAutoDestroy)
        ];
        return (UAudioComponent*)ProcessEvent<IntPtr>(GetFunction("SpawnDialogueAttached"), @params);
    }
    public UAudioComponent* SpawnDialogueAtLocation(UObject* WorldContextObject, UDialogueWave* Dialogue, ref FDialogueContext Context, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, bool bAutoDestroy)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Dialogue", (IntPtr)Dialogue), 
            ("Context", Context), 
            ("Location", Location), 
            ("Rotation", Rotation), 
            ("VolumeMultiplier", VolumeMultiplier), 
            ("PitchMultiplier", PitchMultiplier), 
            ("StartTime", StartTime), 
            ("AttenuationSettings", (IntPtr)AttenuationSettings), 
            ("bAutoDestroy", bAutoDestroy)
        ];
        return (UAudioComponent*)ProcessEvent<IntPtr>(GetFunction("SpawnDialogueAtLocation"), @params);
    }
    public UAudioComponent* SpawnDialogue2D(UObject* WorldContextObject, UDialogueWave* Dialogue, ref FDialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Dialogue", (IntPtr)Dialogue), 
            ("Context", Context), 
            ("VolumeMultiplier", VolumeMultiplier), 
            ("PitchMultiplier", PitchMultiplier), 
            ("StartTime", StartTime), 
            ("bAutoDestroy", bAutoDestroy)
        ];
        return (UAudioComponent*)ProcessEvent<IntPtr>(GetFunction("SpawnDialogue2D"), @params);
    }
    public UDecalComponent* SpawnDecalAttached(UMaterialInterface* DecalMaterial, FVector DecalSize, USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, EAttachLocation LocationType, float LifeSpan)
    {
        Span<(string name, object value)> @params = [
            ("DecalMaterial", (IntPtr)DecalMaterial), 
            ("DecalSize", DecalSize), 
            ("AttachToComponent", (IntPtr)AttachToComponent), 
            ("AttachPointName", AttachPointName), 
            ("Location", Location), 
            ("Rotation", Rotation), 
            ("LocationType", LocationType), 
            ("LifeSpan", LifeSpan)
        ];
        return (UDecalComponent*)ProcessEvent<IntPtr>(GetFunction("SpawnDecalAttached"), @params);
    }
    public UDecalComponent* SpawnDecalAtLocation(UObject* WorldContextObject, UMaterialInterface* DecalMaterial, FVector DecalSize, FVector Location, FRotator Rotation, float LifeSpan)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("DecalMaterial", (IntPtr)DecalMaterial), 
            ("DecalSize", DecalSize), 
            ("Location", Location), 
            ("Rotation", Rotation), 
            ("LifeSpan", LifeSpan)
        ];
        return (UDecalComponent*)ProcessEvent<IntPtr>(GetFunction("SpawnDecalAtLocation"), @params);
    }
    public void SetWorldOriginLocation(UObject* WorldContextObject, FIntVector NewLocation)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("NewLocation", NewLocation)
        ];
        ProcessEvent(GetFunction("SetWorldOriginLocation"), @params);
    }
    public void SetViewportMouseCaptureMode(UObject* WorldContextObject, EMouseCaptureMode MouseCaptureMode)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("MouseCaptureMode", MouseCaptureMode)
        ];
        ProcessEvent(GetFunction("SetViewportMouseCaptureMode"), @params);
    }
    public void SetSubtitlesEnabled(bool bEnabled)
    {
        Span<(string name, object value)> @params = [
            ("bEnabled", bEnabled)
        ];
        ProcessEvent(GetFunction("SetSubtitlesEnabled"), @params);
    }
    public void SetSoundMixClassOverride(UObject* WorldContextObject, USoundMix* InSoundMixModifier, USoundClass* InSoundClass, float Volume, float Pitch, float fadeInTime, bool bApplyToChildren)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("InSoundMixModifier", (IntPtr)InSoundMixModifier), 
            ("InSoundClass", (IntPtr)InSoundClass), 
            ("Volume", Volume), 
            ("Pitch", Pitch), 
            ("fadeInTime", fadeInTime), 
            ("bApplyToChildren", bApplyToChildren)
        ];
        ProcessEvent(GetFunction("SetSoundMixClassOverride"), @params);
    }
    public void SetSoundClassDistanceScale(UObject* WorldContextObject, USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("SoundClass", (IntPtr)SoundClass), 
            ("DistanceAttenuationScale", DistanceAttenuationScale), 
            ("TimeSec", TimeSec)
        ];
        ProcessEvent(GetFunction("SetSoundClassDistanceScale"), @params);
    }
    public void SetPlayerControllerID(APlayerController* Player, int ControllerId)
    {
        Span<(string name, object value)> @params = [
            ("Player", (IntPtr)Player), 
            ("ControllerId", ControllerId)
        ];
        ProcessEvent(GetFunction("SetPlayerControllerID"), @params);
    }
    public void SetMaxAudioChannelsScaled(UObject* WorldContextObject, float MaxChannelCountScale)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("MaxChannelCountScale", MaxChannelCountScale)
        ];
        ProcessEvent(GetFunction("SetMaxAudioChannelsScaled"), @params);
    }
    public void SetGlobalTimeDilation(UObject* WorldContextObject, float TimeDilation)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("TimeDilation", TimeDilation)
        ];
        ProcessEvent(GetFunction("SetGlobalTimeDilation"), @params);
    }
    public void SetGlobalPitchModulation(UObject* WorldContextObject, float PitchModulation, float TimeSec)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("PitchModulation", PitchModulation), 
            ("TimeSec", TimeSec)
        ];
        ProcessEvent(GetFunction("SetGlobalPitchModulation"), @params);
    }
    public void SetGlobalListenerFocusParameters(UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("FocusAzimuthScale", FocusAzimuthScale), 
            ("NonFocusAzimuthScale", NonFocusAzimuthScale), 
            ("FocusDistanceScale", FocusDistanceScale), 
            ("NonFocusDistanceScale", NonFocusDistanceScale), 
            ("FocusVolumeScale", FocusVolumeScale), 
            ("NonFocusVolumeScale", NonFocusVolumeScale), 
            ("FocusPriorityScale", FocusPriorityScale), 
            ("NonFocusPriorityScale", NonFocusPriorityScale)
        ];
        ProcessEvent(GetFunction("SetGlobalListenerFocusParameters"), @params);
    }
    public bool SetGamePaused(UObject* WorldContextObject, bool bPaused)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("bPaused", bPaused)
        ];
        return ProcessEvent<bool>(GetFunction("SetGamePaused"), @params);
    }
    public void SetForceDisableSplitscreen(UObject* WorldContextObject, bool bDisable)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("bDisable", bDisable)
        ];
        ProcessEvent(GetFunction("SetForceDisableSplitscreen"), @params);
    }
    public void SetEnableWorldRendering(UObject* WorldContextObject, bool bEnable)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("bEnable", bEnable)
        ];
        ProcessEvent(GetFunction("SetEnableWorldRendering"), @params);
    }
    public void SetBaseSoundMix(UObject* WorldContextObject, USoundMix* InSoundMix)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("InSoundMix", (IntPtr)InSoundMix)
        ];
        ProcessEvent(GetFunction("SetBaseSoundMix"), @params);
    }
    public bool SaveGameToSlot(USaveGame* SaveGameObject, FString SlotName, int UserIndex)
    {
        Span<(string name, object value)> @params = [
            ("SaveGameObject", (IntPtr)SaveGameObject), 
            ("SlotName", SlotName), 
            ("UserIndex", UserIndex)
        ];
        return ProcessEvent<bool>(GetFunction("SaveGameToSlot"), @params);
    }
    public void RemovePlayer(APlayerController* Player, bool bDestroyPawn)
    {
        Span<(string name, object value)> @params = [
            ("Player", (IntPtr)Player), 
            ("bDestroyPawn", bDestroyPawn)
        ];
        ProcessEvent(GetFunction("RemovePlayer"), @params);
    }
    public FVector RebaseZeroOriginOntoLocal(UObject* WorldContextObject, FVector WorldLocation)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("WorldLocation", WorldLocation)
        ];
        return ProcessEvent<FVector>(GetFunction("RebaseZeroOriginOntoLocal"), @params);
    }
    public FVector RebaseLocalOriginOntoZero(UObject* WorldContextObject, FVector WorldLocation)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("WorldLocation", WorldLocation)
        ];
        return ProcessEvent<FVector>(GetFunction("RebaseLocalOriginOntoZero"), @params);
    }
    public void PushSoundMixModifier(UObject* WorldContextObject, USoundMix* InSoundMixModifier)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("InSoundMixModifier", (IntPtr)InSoundMixModifier)
        ];
        ProcessEvent(GetFunction("PushSoundMixModifier"), @params);
    }
    public bool ProjectWorldToScreen(APlayerController* Player, ref FVector WorldPosition, ref FVector2D ScreenPosition, bool bPlayerViewportRelative)
    {
        Span<(string name, object value)> @params = [
            ("Player", (IntPtr)Player), 
            ("WorldPosition", WorldPosition), 
            ("ScreenPosition", ScreenPosition), 
            ("bPlayerViewportRelative", bPlayerViewportRelative)
        ];
        return ProcessEvent<bool>(GetFunction("ProjectWorldToScreen"), @params);
    }
    public void PrimeSound(USoundBase* InSound)
    {
        Span<(string name, object value)> @params = [
            ("InSound", (IntPtr)InSound)
        ];
        ProcessEvent(GetFunction("PrimeSound"), @params);
    }
    public void PrimeAllSoundsInSoundClass(USoundClass* InSoundClass)
    {
        Span<(string name, object value)> @params = [
            ("InSoundClass", (IntPtr)InSoundClass)
        ];
        ProcessEvent(GetFunction("PrimeAllSoundsInSoundClass"), @params);
    }
    public void PopSoundMixModifier(UObject* WorldContextObject, USoundMix* InSoundMixModifier)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("InSoundMixModifier", (IntPtr)InSoundMixModifier)
        ];
        ProcessEvent(GetFunction("PopSoundMixModifier"), @params);
    }
    public void PlayWorldCameraShake(UObject* WorldContextObject, TSubclassOf<UCameraShakeBase> Shake, FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Shake", Shake), 
            ("Epicenter", Epicenter), 
            ("InnerRadius", InnerRadius), 
            ("OuterRadius", OuterRadius), 
            ("Falloff", Falloff), 
            ("bOrientShakeTowardsEpicenter", bOrientShakeTowardsEpicenter)
        ];
        ProcessEvent(GetFunction("PlayWorldCameraShake"), @params);
    }
    public void PlaySoundAtLocation(UObject* WorldContextObject, USoundBase* Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, AActor* OwningActor)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Sound", (IntPtr)Sound), 
            ("Location", Location), 
            ("Rotation", Rotation), 
            ("VolumeMultiplier", VolumeMultiplier), 
            ("PitchMultiplier", PitchMultiplier), 
            ("StartTime", StartTime), 
            ("AttenuationSettings", (IntPtr)AttenuationSettings), 
            ("ConcurrencySettings", (IntPtr)ConcurrencySettings), 
            ("OwningActor", (IntPtr)OwningActor)
        ];
        ProcessEvent(GetFunction("PlaySoundAtLocation"), @params);
    }
    public void PlaySound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, AActor* OwningActor, bool bIsUISound)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Sound", (IntPtr)Sound), 
            ("VolumeMultiplier", VolumeMultiplier), 
            ("PitchMultiplier", PitchMultiplier), 
            ("StartTime", StartTime), 
            ("ConcurrencySettings", (IntPtr)ConcurrencySettings), 
            ("OwningActor", (IntPtr)OwningActor), 
            ("bIsUISound", bIsUISound)
        ];
        ProcessEvent(GetFunction("PlaySound2D"), @params);
    }
    public void PlayDialogueAtLocation(UObject* WorldContextObject, UDialogueWave* Dialogue, ref FDialogueContext Context, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Dialogue", (IntPtr)Dialogue), 
            ("Context", Context), 
            ("Location", Location), 
            ("Rotation", Rotation), 
            ("VolumeMultiplier", VolumeMultiplier), 
            ("PitchMultiplier", PitchMultiplier), 
            ("StartTime", StartTime), 
            ("AttenuationSettings", (IntPtr)AttenuationSettings)
        ];
        ProcessEvent(GetFunction("PlayDialogueAtLocation"), @params);
    }
    public void PlayDialogue2D(UObject* WorldContextObject, UDialogueWave* Dialogue, ref FDialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Dialogue", (IntPtr)Dialogue), 
            ("Context", Context), 
            ("VolumeMultiplier", VolumeMultiplier), 
            ("PitchMultiplier", PitchMultiplier), 
            ("StartTime", StartTime)
        ];
        ProcessEvent(GetFunction("PlayDialogue2D"), @params);
    }
    public FString ParseOption(FString Options, FString Key)
    {
        Span<(string name, object value)> @params = [
            ("Options", Options), 
            ("Key", Key)
        ];
        return ProcessEvent<FString>(GetFunction("ParseOption"), @params);
    }
    public void OpenLevelBySoftObjectPtr(UObject* WorldContextObject, TSoftObjectPtr<UWorld> Level, bool bAbsolute, FString Options)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Level", Level), 
            ("bAbsolute", bAbsolute), 
            ("Options", Options)
        ];
        ProcessEvent(GetFunction("OpenLevelBySoftObjectPtr"), @params);
    }
    public void OpenLevel(UObject* WorldContextObject, FName LevelName, bool bAbsolute, FString Options)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("LevelName", LevelName), 
            ("bAbsolute", bAbsolute), 
            ("Options", Options)
        ];
        ProcessEvent(GetFunction("OpenLevel"), @params);
    }
    public FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, FVector Location, FVector ImpactPoint, FVector Normal, FVector ImpactNormal, UPhysicalMaterial* PhysMat, AActor* HitActor, UPrimitiveComponent* HitComponent, FName HitBoneName, int HitItem, int ElementIndex, int FaceIndex, FVector TraceStart, FVector TraceEnd)
    {
        Span<(string name, object value)> @params = [
            ("bBlockingHit", bBlockingHit), 
            ("bInitialOverlap", bInitialOverlap), 
            ("Time", Time), 
            ("Distance", Distance), 
            ("Location", Location), 
            ("ImpactPoint", ImpactPoint), 
            ("Normal", Normal), 
            ("ImpactNormal", ImpactNormal), 
            ("PhysMat", (IntPtr)PhysMat), 
            ("HitActor", (IntPtr)HitActor), 
            ("HitComponent", (IntPtr)HitComponent), 
            ("HitBoneName", HitBoneName), 
            ("HitItem", HitItem), 
            ("ElementIndex", ElementIndex), 
            ("FaceIndex", FaceIndex), 
            ("TraceStart", TraceStart), 
            ("TraceEnd", TraceEnd)
        ];
        return ProcessEvent<FHitResult>(GetFunction("MakeHitResult"), @params);
    }
    public void LoadStreamLevelBySoftObjectPtr(UObject* WorldContextObject, TSoftObjectPtr<UWorld> Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, FLatentActionInfo LatentInfo)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Level", Level), 
            ("bMakeVisibleAfterLoad", bMakeVisibleAfterLoad), 
            ("bShouldBlockOnLoad", bShouldBlockOnLoad), 
            ("LatentInfo", LatentInfo)
        ];
        ProcessEvent(GetFunction("LoadStreamLevelBySoftObjectPtr"), @params);
    }
    public void LoadStreamLevel(UObject* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, FLatentActionInfo LatentInfo)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("LevelName", LevelName), 
            ("bMakeVisibleAfterLoad", bMakeVisibleAfterLoad), 
            ("bShouldBlockOnLoad", bShouldBlockOnLoad), 
            ("LatentInfo", LatentInfo)
        ];
        ProcessEvent(GetFunction("LoadStreamLevel"), @params);
    }
    public USaveGame* LoadGameFromSlot(FString SlotName, int UserIndex)
    {
        Span<(string name, object value)> @params = [
            ("SlotName", SlotName), 
            ("UserIndex", UserIndex)
        ];
        return (USaveGame*)ProcessEvent<IntPtr>(GetFunction("LoadGameFromSlot"), @params);
    }
    public bool IsSplitscreenForceDisabled(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return ProcessEvent<bool>(GetFunction("IsSplitscreenForceDisabled"), @params);
    }
    public bool IsGamePaused(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return ProcessEvent<bool>(GetFunction("IsGamePaused"), @params);
    }
    public bool HasOption(FString Options, FString InKey)
    {
        Span<(string name, object value)> @params = [
            ("Options", Options), 
            ("InKey", InKey)
        ];
        return ProcessEvent<bool>(GetFunction("HasOption"), @params);
    }
    public bool HasLaunchOption(FString OptionToCheck)
    {
        Span<(string name, object value)> @params = [
            ("OptionToCheck", OptionToCheck)
        ];
        return ProcessEvent<bool>(GetFunction("HasLaunchOption"), @params);
    }
    public int GrassOverlappingSphereCount(UObject* WorldContextObject, UStaticMesh* StaticMesh, FVector CenterPosition, float Radius)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("StaticMesh", (IntPtr)StaticMesh), 
            ("CenterPosition", CenterPosition), 
            ("Radius", Radius)
        ];
        return ProcessEvent<int>(GetFunction("GrassOverlappingSphereCount"), @params);
    }
    public FIntVector GetWorldOriginLocation(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return ProcessEvent<FIntVector>(GetFunction("GetWorldOriginLocation"), @params);
    }
    public float GetWorldDeltaSeconds(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return ProcessEvent<float>(GetFunction("GetWorldDeltaSeconds"), @params);
    }
    public void GetViewProjectionMatrix(FMinimalViewInfo DesiredView, ref FMatrix ViewMatrix, ref FMatrix ProjectionMatrix, ref FMatrix ViewProjectionMatrix)
    {
        Span<(string name, object value)> @params = [
            ("DesiredView", DesiredView), 
            ("ViewMatrix", ViewMatrix), 
            ("ProjectionMatrix", ProjectionMatrix), 
            ("ViewProjectionMatrix", ViewProjectionMatrix)
        ];
        ProcessEvent(GetFunction("GetViewProjectionMatrix"), @params);
    }
    public EMouseCaptureMode GetViewportMouseCaptureMode(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return ProcessEvent<EMouseCaptureMode>(GetFunction("GetViewportMouseCaptureMode"), @params);
    }
    public float GetUnpausedTimeSeconds(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return ProcessEvent<float>(GetFunction("GetUnpausedTimeSeconds"), @params);
    }
    public float GetTimeSeconds(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return ProcessEvent<float>(GetFunction("GetTimeSeconds"), @params);
    }
    public EPhysicalSurface GetSurfaceType(ref FHitResult Hit)
    {
        Span<(string name, object value)> @params = [
            ("Hit", Hit)
        ];
        return ProcessEvent<EPhysicalSurface>(GetFunction("GetSurfaceType"), @params);
    }
    public ULevelStreaming* GetStreamingLevel(UObject* WorldContextObject, FName PackageName)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("PackageName", PackageName)
        ];
        return (ULevelStreaming*)ProcessEvent<IntPtr>(GetFunction("GetStreamingLevel"), @params);
    }
    public float GetRealTimeSeconds(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return ProcessEvent<float>(GetFunction("GetRealTimeSeconds"), @params);
    }
    public APawn* GetPlayerPawn(UObject* WorldContextObject, int PlayerIndex)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("PlayerIndex", PlayerIndex)
        ];
        return (APawn*)ProcessEvent<IntPtr>(GetFunction("GetPlayerPawn"), @params);
    }
    public int GetPlayerControllerID(APlayerController* Player)
    {
        Span<(string name, object value)> @params = [
            ("Player", (IntPtr)Player)
        ];
        return ProcessEvent<int>(GetFunction("GetPlayerControllerID"), @params);
    }
    public APlayerController* GetPlayerControllerFromID(UObject* WorldContextObject, int ControllerId)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("ControllerId", ControllerId)
        ];
        return (APlayerController*)ProcessEvent<IntPtr>(GetFunction("GetPlayerControllerFromID"), @params);
    }
    public APlayerController* GetPlayerController(UObject* WorldContextObject, int PlayerIndex)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("PlayerIndex", PlayerIndex)
        ];
        return (APlayerController*)ProcessEvent<IntPtr>(GetFunction("GetPlayerController"), @params);
    }
    public ACharacter* GetPlayerCharacter(UObject* WorldContextObject, int PlayerIndex)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("PlayerIndex", PlayerIndex)
        ];
        return (ACharacter*)ProcessEvent<IntPtr>(GetFunction("GetPlayerCharacter"), @params);
    }
    public APlayerCameraManager* GetPlayerCameraManager(UObject* WorldContextObject, int PlayerIndex)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("PlayerIndex", PlayerIndex)
        ];
        return (APlayerCameraManager*)ProcessEvent<IntPtr>(GetFunction("GetPlayerCameraManager"), @params);
    }
    public FString GetPlatformName()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetPlatformName"), @params);
    }
    public UClass* GetObjectClass(UObject* Object)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object)
        ];
        return (UClass*)ProcessEvent<IntPtr>(GetFunction("GetObjectClass"), @params);
    }
    public int GetMaxAudioChannelCount(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return ProcessEvent<int>(GetFunction("GetMaxAudioChannelCount"), @params);
    }
    public void GetKeyValue(FString Pair, ref FString Key, ref FString Value)
    {
        Span<(string name, object value)> @params = [
            ("Pair", Pair), 
            ("Key", Key), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("GetKeyValue"), @params);
    }
    public int GetIntOption(FString Options, FString Key, int DefaultValue)
    {
        Span<(string name, object value)> @params = [
            ("Options", Options), 
            ("Key", Key), 
            ("DefaultValue", DefaultValue)
        ];
        return ProcessEvent<int>(GetFunction("GetIntOption"), @params);
    }
    public float GetGlobalTimeDilation(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return ProcessEvent<float>(GetFunction("GetGlobalTimeDilation"), @params);
    }
    public AGameStateBase* GetGameState(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return (AGameStateBase*)ProcessEvent<IntPtr>(GetFunction("GetGameState"), @params);
    }
    public AGameModeBase* GetGameMode(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return (AGameModeBase*)ProcessEvent<IntPtr>(GetFunction("GetGameMode"), @params);
    }
    public UGameInstance* GetGameInstance(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return (UGameInstance*)ProcessEvent<IntPtr>(GetFunction("GetGameInstance"), @params);
    }
    public bool GetEnableWorldRendering(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return ProcessEvent<bool>(GetFunction("GetEnableWorldRendering"), @params);
    }
    public UReverbEffect* GetCurrentReverbEffect(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return (UReverbEffect*)ProcessEvent<IntPtr>(GetFunction("GetCurrentReverbEffect"), @params);
    }
    public FString GetCurrentLevelName(UObject* WorldContextObject, bool bRemovePrefixString)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("bRemovePrefixString", bRemovePrefixString)
        ];
        return ProcessEvent<FString>(GetFunction("GetCurrentLevelName"), @params);
    }
    public bool GetClosestListenerLocation(UObject* WorldContextObject, ref FVector Location, float MaximumRange, bool bAllowAttenuationOverride, ref FVector ListenerPosition)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Location", Location), 
            ("MaximumRange", MaximumRange), 
            ("bAllowAttenuationOverride", bAllowAttenuationOverride), 
            ("ListenerPosition", ListenerPosition)
        ];
        return ProcessEvent<bool>(GetFunction("GetClosestListenerLocation"), @params);
    }
    public float GetAudioTimeSeconds(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return ProcessEvent<float>(GetFunction("GetAudioTimeSeconds"), @params);
    }
    public void GetAllActorsWithTag(UObject* WorldContextObject, FName Tag, ref TArray<IntPtr> OutActors)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Tag", Tag), 
            ("OutActors", OutActors)
        ];
        ProcessEvent(GetFunction("GetAllActorsWithTag"), @params);
    }
    public void GetAllActorsWithInterface(UObject* WorldContextObject, TSubclassOf<UInterface> Interface, ref TArray<IntPtr> OutActors)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Interface", Interface), 
            ("OutActors", OutActors)
        ];
        ProcessEvent(GetFunction("GetAllActorsWithInterface"), @params);
    }
    public void GetAllActorsOfClassWithTag(UObject* WorldContextObject, TSubclassOf<AActor> ActorClass, FName Tag, ref TArray<IntPtr> OutActors)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("ActorClass", ActorClass), 
            ("Tag", Tag), 
            ("OutActors", OutActors)
        ];
        ProcessEvent(GetFunction("GetAllActorsOfClassWithTag"), @params);
    }
    public void GetAllActorsOfClass(UObject* WorldContextObject, TSubclassOf<AActor> ActorClass, ref TArray<IntPtr> OutActors)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("ActorClass", ActorClass), 
            ("OutActors", OutActors)
        ];
        ProcessEvent(GetFunction("GetAllActorsOfClass"), @params);
    }
    public AActor* GetActorOfClass(UObject* WorldContextObject, TSubclassOf<AActor> ActorClass)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("ActorClass", ActorClass)
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("GetActorOfClass"), @params);
    }
    public void GetActorArrayBounds(ref TArray<IntPtr> Actors, bool bOnlyCollidingComponents, ref FVector Center, ref FVector BoxExtent)
    {
        Span<(string name, object value)> @params = [
            ("Actors", Actors), 
            ("bOnlyCollidingComponents", bOnlyCollidingComponents), 
            ("Center", Center), 
            ("BoxExtent", BoxExtent)
        ];
        ProcessEvent(GetFunction("GetActorArrayBounds"), @params);
    }
    public FVector GetActorArrayAverageLocation(ref TArray<IntPtr> Actors)
    {
        Span<(string name, object value)> @params = [
            ("Actors", Actors)
        ];
        return ProcessEvent<FVector>(GetFunction("GetActorArrayAverageLocation"), @params);
    }
    public void GetAccurateRealTime(ref int Seconds, ref float PartialSeconds)
    {
        Span<(string name, object value)> @params = [
            ("Seconds", Seconds), 
            ("PartialSeconds", PartialSeconds)
        ];
        ProcessEvent(GetFunction("GetAccurateRealTime"), @params);
    }
    public void FlushLevelStreaming(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        ProcessEvent(GetFunction("FlushLevelStreaming"), @params);
    }
    public AActor* FinishSpawningActor(AActor* Actor, ref FTransform SpawnTransform)
    {
        Span<(string name, object value)> @params = [
            ("Actor", (IntPtr)Actor), 
            ("SpawnTransform", SpawnTransform)
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("FinishSpawningActor"), @params);
    }
    public AActor* FindNearestActor(FVector Origin, ref TArray<IntPtr> ActorsToCheck, ref float Distance)
    {
        Span<(string name, object value)> @params = [
            ("Origin", Origin), 
            ("ActorsToCheck", ActorsToCheck), 
            ("Distance", Distance)
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("FindNearestActor"), @params);
    }
    public bool FindCollisionUV(ref FHitResult Hit, int UVChannel, ref FVector2D UV)
    {
        Span<(string name, object value)> @params = [
            ("Hit", Hit), 
            ("UVChannel", UVChannel), 
            ("UV", UV)
        ];
        return ProcessEvent<bool>(GetFunction("FindCollisionUV"), @params);
    }
    public void EnableLiveStreaming(bool Enable)
    {
        Span<(string name, object value)> @params = [
            ("Enable", Enable)
        ];
        ProcessEvent(GetFunction("EnableLiveStreaming"), @params);
    }
    public bool DoesSaveGameExist(FString SlotName, int UserIndex)
    {
        Span<(string name, object value)> @params = [
            ("SlotName", SlotName), 
            ("UserIndex", UserIndex)
        ];
        return ProcessEvent<bool>(GetFunction("DoesSaveGameExist"), @params);
    }
    public bool DeprojectScreenToWorld(APlayerController* Player, ref FVector2D ScreenPosition, ref FVector WorldPosition, ref FVector WorldDirection)
    {
        Span<(string name, object value)> @params = [
            ("Player", (IntPtr)Player), 
            ("ScreenPosition", ScreenPosition), 
            ("WorldPosition", WorldPosition), 
            ("WorldDirection", WorldDirection)
        ];
        return ProcessEvent<bool>(GetFunction("DeprojectScreenToWorld"), @params);
    }
    public bool DeleteGameInSlot(FString SlotName, int UserIndex)
    {
        Span<(string name, object value)> @params = [
            ("SlotName", SlotName), 
            ("UserIndex", UserIndex)
        ];
        return ProcessEvent<bool>(GetFunction("DeleteGameInSlot"), @params);
    }
    public void DeactivateReverbEffect(UObject* WorldContextObject, FName TagName)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("TagName", TagName)
        ];
        ProcessEvent(GetFunction("DeactivateReverbEffect"), @params);
    }
    public UAudioComponent* CreateSound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Sound", (IntPtr)Sound), 
            ("VolumeMultiplier", VolumeMultiplier), 
            ("PitchMultiplier", PitchMultiplier), 
            ("StartTime", StartTime), 
            ("ConcurrencySettings", (IntPtr)ConcurrencySettings), 
            ("bPersistAcrossLevelTransition", bPersistAcrossLevelTransition), 
            ("bAutoDestroy", bAutoDestroy)
        ];
        return (UAudioComponent*)ProcessEvent<IntPtr>(GetFunction("CreateSound2D"), @params);
    }
    public USaveGame* CreateSaveGameObject(TSubclassOf<USaveGame> SaveGameClass)
    {
        Span<(string name, object value)> @params = [
            ("SaveGameClass", SaveGameClass)
        ];
        return (USaveGame*)ProcessEvent<IntPtr>(GetFunction("CreateSaveGameObject"), @params);
    }
    public APlayerController* createPlayer(UObject* WorldContextObject, int ControllerId, bool bSpawnPlayerController)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("ControllerId", ControllerId), 
            ("bSpawnPlayerController", bSpawnPlayerController)
        ];
        return (APlayerController*)ProcessEvent<IntPtr>(GetFunction("createPlayer"), @params);
    }
    public void ClearSoundMixModifiers(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        ProcessEvent(GetFunction("ClearSoundMixModifiers"), @params);
    }
    public void ClearSoundMixClassOverride(UObject* WorldContextObject, USoundMix* InSoundMixModifier, USoundClass* InSoundClass, float fadeOutTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("InSoundMixModifier", (IntPtr)InSoundMixModifier), 
            ("InSoundClass", (IntPtr)InSoundClass), 
            ("fadeOutTime", fadeOutTime)
        ];
        ProcessEvent(GetFunction("ClearSoundMixClassOverride"), @params);
    }
    public void CancelAsyncLoading()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("CancelAsyncLoading"), @params);
    }
    public void BreakHitResult(ref FHitResult Hit, ref bool bBlockingHit, ref bool bInitialOverlap, ref float Time, ref float Distance, ref FVector Location, ref FVector ImpactPoint, ref FVector Normal, ref FVector ImpactNormal, ref UPhysicalMaterial* PhysMat, ref AActor* HitActor, ref UPrimitiveComponent* HitComponent, ref FName HitBoneName, ref int HitItem, ref int ElementIndex, ref int FaceIndex, ref FVector TraceStart, ref FVector TraceEnd)
    {
        Span<(string name, object value)> @params = [
            ("Hit", Hit), 
            ("bBlockingHit", bBlockingHit), 
            ("bInitialOverlap", bInitialOverlap), 
            ("Time", Time), 
            ("Distance", Distance), 
            ("Location", Location), 
            ("ImpactPoint", ImpactPoint), 
            ("Normal", Normal), 
            ("ImpactNormal", ImpactNormal), 
            ("PhysMat", (IntPtr)PhysMat), 
            ("HitActor", (IntPtr)HitActor), 
            ("HitComponent", (IntPtr)HitComponent), 
            ("HitBoneName", HitBoneName), 
            ("HitItem", HitItem), 
            ("ElementIndex", ElementIndex), 
            ("FaceIndex", FaceIndex), 
            ("TraceStart", TraceStart), 
            ("TraceEnd", TraceEnd)
        ];
        ProcessEvent(GetFunction("BreakHitResult"), @params);
    }
    public bool BlueprintSuggestProjectileVelocity(UObject* WorldContextObject, ref FVector TossVelocity, FVector StartLocation, FVector EndLocation, float LaunchSpeed, float OverrideGravityZ, ESuggestProjVelocityTraceOption TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("TossVelocity", TossVelocity), 
            ("StartLocation", StartLocation), 
            ("EndLocation", EndLocation), 
            ("LaunchSpeed", LaunchSpeed), 
            ("OverrideGravityZ", OverrideGravityZ), 
            ("TraceOption", TraceOption), 
            ("CollisionRadius", CollisionRadius), 
            ("bFavorHighArc", bFavorHighArc), 
            ("bDrawDebug", bDrawDebug)
        ];
        return ProcessEvent<bool>(GetFunction("BlueprintSuggestProjectileVelocity"), @params);
    }
    public bool Blueprint_PredictProjectilePath_ByTraceChannel(UObject* WorldContextObject, ref FHitResult OutHit, ref TArray<FVector> OutPathPositions, ref FVector OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, ECollisionChannel TraceChannel, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("OutHit", OutHit), 
            ("OutPathPositions", OutPathPositions), 
            ("OutLastTraceDestination", OutLastTraceDestination), 
            ("StartPos", StartPos), 
            ("LaunchVelocity", LaunchVelocity), 
            ("bTracePath", bTracePath), 
            ("ProjectileRadius", ProjectileRadius), 
            ("TraceChannel", TraceChannel), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("DrawDebugTime", DrawDebugTime), 
            ("SimFrequency", SimFrequency), 
            ("MaxSimTime", MaxSimTime), 
            ("OverrideGravityZ", OverrideGravityZ)
        ];
        return ProcessEvent<bool>(GetFunction("Blueprint_PredictProjectilePath_ByTraceChannel"), @params);
    }
    public bool Blueprint_PredictProjectilePath_ByObjectType(UObject* WorldContextObject, ref FHitResult OutHit, ref TArray<FVector> OutPathPositions, ref FVector OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, ref TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("OutHit", OutHit), 
            ("OutPathPositions", OutPathPositions), 
            ("OutLastTraceDestination", OutLastTraceDestination), 
            ("StartPos", StartPos), 
            ("LaunchVelocity", LaunchVelocity), 
            ("bTracePath", bTracePath), 
            ("ProjectileRadius", ProjectileRadius), 
            ("ObjectTypes", ObjectTypes), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("DrawDebugTime", DrawDebugTime), 
            ("SimFrequency", SimFrequency), 
            ("MaxSimTime", MaxSimTime), 
            ("OverrideGravityZ", OverrideGravityZ)
        ];
        return ProcessEvent<bool>(GetFunction("Blueprint_PredictProjectilePath_ByObjectType"), @params);
    }
    public bool Blueprint_PredictProjectilePath_Advanced(UObject* WorldContextObject, ref FPredictProjectilePathParams PredictParams, ref FPredictProjectilePathResult PredictResult)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("PredictParams", PredictParams), 
            ("PredictResult", PredictResult)
        ];
        return ProcessEvent<bool>(GetFunction("Blueprint_PredictProjectilePath_Advanced"), @params);
    }
    public AActor* BeginSpawningActorFromClass(UObject* WorldContextObject, TSubclassOf<AActor> ActorClass, ref FTransform SpawnTransform, bool bNoCollisionFail, AActor* Owner)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("ActorClass", ActorClass), 
            ("SpawnTransform", SpawnTransform), 
            ("bNoCollisionFail", bNoCollisionFail), 
            ("Owner", (IntPtr)Owner)
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("BeginSpawningActorFromClass"), @params);
    }
    public AActor* BeginSpawningActorFromBlueprint(UObject* WorldContextObject, UBlueprint* Blueprint, ref FTransform SpawnTransform, bool bNoCollisionFail)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Blueprint", (IntPtr)Blueprint), 
            ("SpawnTransform", SpawnTransform), 
            ("bNoCollisionFail", bNoCollisionFail)
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("BeginSpawningActorFromBlueprint"), @params);
    }
    public AActor* BeginDeferredActorSpawnFromClass(UObject* WorldContextObject, TSubclassOf<AActor> ActorClass, ref FTransform SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, AActor* Owner)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("ActorClass", ActorClass), 
            ("SpawnTransform", SpawnTransform), 
            ("CollisionHandlingOverride", CollisionHandlingOverride), 
            ("Owner", (IntPtr)Owner)
        ];
        return (AActor*)ProcessEvent<IntPtr>(GetFunction("BeginDeferredActorSpawnFromClass"), @params);
    }
    public bool AreSubtitlesEnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("AreSubtitlesEnabled"), @params);
    }
    public bool AreAnyListenersWithinRange(UObject* WorldContextObject, ref FVector Location, float MaximumRange)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Location", Location), 
            ("MaximumRange", MaximumRange)
        ];
        return ProcessEvent<bool>(GetFunction("AreAnyListenersWithinRange"), @params);
    }
    public bool ApplyRadialDamageWithFalloff(UObject* WorldContextObject, float BaseDamage, float MinimumDamage, ref FVector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, TSubclassOf<UDamageType> DamageTypeClass, ref TArray<IntPtr> IgnoreActors, AActor* DamageCauser, AController* InstigatedByController, ECollisionChannel DamagePreventionChannel)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("BaseDamage", BaseDamage), 
            ("MinimumDamage", MinimumDamage), 
            ("Origin", Origin), 
            ("DamageInnerRadius", DamageInnerRadius), 
            ("DamageOuterRadius", DamageOuterRadius), 
            ("DamageFalloff", DamageFalloff), 
            ("DamageTypeClass", DamageTypeClass), 
            ("IgnoreActors", IgnoreActors), 
            ("DamageCauser", (IntPtr)DamageCauser), 
            ("InstigatedByController", (IntPtr)InstigatedByController), 
            ("DamagePreventionChannel", DamagePreventionChannel)
        ];
        return ProcessEvent<bool>(GetFunction("ApplyRadialDamageWithFalloff"), @params);
    }
    public bool ApplyRadialDamage(UObject* WorldContextObject, float BaseDamage, ref FVector Origin, float DamageRadius, TSubclassOf<UDamageType> DamageTypeClass, ref TArray<IntPtr> IgnoreActors, AActor* DamageCauser, AController* InstigatedByController, bool bDoFullDamage, ECollisionChannel DamagePreventionChannel)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("BaseDamage", BaseDamage), 
            ("Origin", Origin), 
            ("DamageRadius", DamageRadius), 
            ("DamageTypeClass", DamageTypeClass), 
            ("IgnoreActors", IgnoreActors), 
            ("DamageCauser", (IntPtr)DamageCauser), 
            ("InstigatedByController", (IntPtr)InstigatedByController), 
            ("bDoFullDamage", bDoFullDamage), 
            ("DamagePreventionChannel", DamagePreventionChannel)
        ];
        return ProcessEvent<bool>(GetFunction("ApplyRadialDamage"), @params);
    }
    public float ApplyPointDamage(AActor* DamagedActor, float BaseDamage, ref FVector HitFromDirection, ref FHitResult HitInfo, AController* EventInstigator, AActor* DamageCauser, TSubclassOf<UDamageType> DamageTypeClass)
    {
        Span<(string name, object value)> @params = [
            ("DamagedActor", (IntPtr)DamagedActor), 
            ("BaseDamage", BaseDamage), 
            ("HitFromDirection", HitFromDirection), 
            ("HitInfo", HitInfo), 
            ("EventInstigator", (IntPtr)EventInstigator), 
            ("DamageCauser", (IntPtr)DamageCauser), 
            ("DamageTypeClass", DamageTypeClass)
        ];
        return ProcessEvent<float>(GetFunction("ApplyPointDamage"), @params);
    }
    public float ApplyDamage(AActor* DamagedActor, float BaseDamage, AController* EventInstigator, AActor* DamageCauser, TSubclassOf<UDamageType> DamageTypeClass)
    {
        Span<(string name, object value)> @params = [
            ("DamagedActor", (IntPtr)DamagedActor), 
            ("BaseDamage", BaseDamage), 
            ("EventInstigator", (IntPtr)EventInstigator), 
            ("DamageCauser", (IntPtr)DamageCauser), 
            ("DamageTypeClass", DamageTypeClass)
        ];
        return ProcessEvent<float>(GetFunction("ApplyDamage"), @params);
    }
    public void AnnounceAccessibleString(FString AnnouncementString)
    {
        Span<(string name, object value)> @params = [
            ("AnnouncementString", AnnouncementString)
        ];
        ProcessEvent(GetFunction("AnnounceAccessibleString"), @params);
    }
    public void ActivateReverbEffect(UObject* WorldContextObject, UReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("ReverbEffect", (IntPtr)ReverbEffect), 
            ("TagName", TagName), 
            ("Priority", Priority), 
            ("Volume", Volume), 
            ("FadeTime", FadeTime)
        ];
        ProcessEvent(GetFunction("ActivateReverbEffect"), @params);
    }
}

public unsafe class GameSession : ObjectBase<AGameSession>
{
    public GameSession(IntPtr pointer) : base(pointer) {}
}

public unsafe class GameUserSettings : ObjectBase<UGameUserSettings>
{
    public GameUserSettings(IntPtr pointer) : base(pointer) {}
    public void ValidateSettings()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ValidateSettings"), @params);
    }
    public bool SupportsHDRDisplayOutput()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("SupportsHDRDisplayOutput"), @params);
    }
    public void SetVSyncEnabled(bool bEnable)
    {
        Span<(string name, object value)> @params = [
            ("bEnable", bEnable)
        ];
        ProcessEvent(GetFunction("SetVSyncEnabled"), @params);
    }
    public void SetVisualEffectQuality(int Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetVisualEffectQuality"), @params);
    }
    public void SetViewDistanceQuality(int Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetViewDistanceQuality"), @params);
    }
    public void SetToDefaults()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("SetToDefaults"), @params);
    }
    public void SetTextureQuality(int Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetTextureQuality"), @params);
    }
    public void SetShadowQuality(int Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetShadowQuality"), @params);
    }
    public void SetShadingQuality(int Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetShadingQuality"), @params);
    }
    public void SetScreenResolution(FIntPoint Resolution)
    {
        Span<(string name, object value)> @params = [
            ("Resolution", Resolution)
        ];
        ProcessEvent(GetFunction("SetScreenResolution"), @params);
    }
    public void SetResolutionScaleValueEx(float NewScaleValue)
    {
        Span<(string name, object value)> @params = [
            ("NewScaleValue", NewScaleValue)
        ];
        ProcessEvent(GetFunction("SetResolutionScaleValueEx"), @params);
    }
    public void SetResolutionScaleValue(int NewScaleValue)
    {
        Span<(string name, object value)> @params = [
            ("NewScaleValue", NewScaleValue)
        ];
        ProcessEvent(GetFunction("SetResolutionScaleValue"), @params);
    }
    public void SetResolutionScaleNormalized(float NewScaleNormalized)
    {
        Span<(string name, object value)> @params = [
            ("NewScaleNormalized", NewScaleNormalized)
        ];
        ProcessEvent(GetFunction("SetResolutionScaleNormalized"), @params);
    }
    public void SetPostProcessingQuality(int Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetPostProcessingQuality"), @params);
    }
    public void SetOverallScalabilityLevel(int Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetOverallScalabilityLevel"), @params);
    }
    public void SetFullscreenMode(EWindowMode InFullscreenMode)
    {
        Span<(string name, object value)> @params = [
            ("InFullscreenMode", InFullscreenMode)
        ];
        ProcessEvent(GetFunction("SetFullscreenMode"), @params);
    }
    public void SetFrameRateLimit(float NewLimit)
    {
        Span<(string name, object value)> @params = [
            ("NewLimit", NewLimit)
        ];
        ProcessEvent(GetFunction("SetFrameRateLimit"), @params);
    }
    public void SetFoliageQuality(int Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetFoliageQuality"), @params);
    }
    public void SetDynamicResolutionEnabled(bool bEnable)
    {
        Span<(string name, object value)> @params = [
            ("bEnable", bEnable)
        ];
        ProcessEvent(GetFunction("SetDynamicResolutionEnabled"), @params);
    }
    public void SetBenchmarkFallbackValues()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("SetBenchmarkFallbackValues"), @params);
    }
    public void SetAudioQualityLevel(int QualityLevel)
    {
        Span<(string name, object value)> @params = [
            ("QualityLevel", QualityLevel)
        ];
        ProcessEvent(GetFunction("SetAudioQualityLevel"), @params);
    }
    public void SetAntiAliasingQuality(int Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetAntiAliasingQuality"), @params);
    }
    public void SaveSettings()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("SaveSettings"), @params);
    }
    public void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier)
    {
        Span<(string name, object value)> @params = [
            ("WorkScale", WorkScale), 
            ("CPUMultiplier", CPUMultiplier), 
            ("GPUMultiplier", GPUMultiplier)
        ];
        ProcessEvent(GetFunction("RunHardwareBenchmark"), @params);
    }
    public void RevertVideoMode()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("RevertVideoMode"), @params);
    }
    public void ResetToCurrentSettings()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ResetToCurrentSettings"), @params);
    }
    public void LoadSettings(bool bForceReload)
    {
        Span<(string name, object value)> @params = [
            ("bForceReload", bForceReload)
        ];
        ProcessEvent(GetFunction("LoadSettings"), @params);
    }
    public bool IsVSyncEnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsVSyncEnabled"), @params);
    }
    public bool IsVSyncDirty()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsVSyncDirty"), @params);
    }
    public bool IsScreenResolutionDirty()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsScreenResolutionDirty"), @params);
    }
    public bool IsHDREnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsHDREnabled"), @params);
    }
    public bool IsFullscreenModeDirty()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsFullscreenModeDirty"), @params);
    }
    public bool IsDynamicResolutionEnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsDynamicResolutionEnabled"), @params);
    }
    public bool IsDynamicResolutionDirty()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsDynamicResolutionDirty"), @params);
    }
    public bool IsDirty()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsDirty"), @params);
    }
    public int GetVisualEffectQuality()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetVisualEffectQuality"), @params);
    }
    public int GetViewDistanceQuality()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetViewDistanceQuality"), @params);
    }
    public int GetTextureQuality()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetTextureQuality"), @params);
    }
    public int GetSyncInterval()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetSyncInterval"), @params);
    }
    public int GetShadowQuality()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetShadowQuality"), @params);
    }
    public int GetShadingQuality()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetShadingQuality"), @params);
    }
    public FIntPoint GetScreenResolution()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FIntPoint>(GetFunction("GetScreenResolution"), @params);
    }
    public float GetResolutionScaleNormalized()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetResolutionScaleNormalized"), @params);
    }
    public void GetResolutionScaleInformationEx(ref float CurrentScaleNormalized, ref float CurrentScaleValue, ref float MinScaleValue, ref float MaxScaleValue)
    {
        Span<(string name, object value)> @params = [
            ("CurrentScaleNormalized", CurrentScaleNormalized), 
            ("CurrentScaleValue", CurrentScaleValue), 
            ("MinScaleValue", MinScaleValue), 
            ("MaxScaleValue", MaxScaleValue)
        ];
        ProcessEvent(GetFunction("GetResolutionScaleInformationEx"), @params);
    }
    public void GetResolutionScaleInformation(ref float CurrentScaleNormalized, ref int CurrentScaleValue, ref int MinScaleValue, ref int MaxScaleValue)
    {
        Span<(string name, object value)> @params = [
            ("CurrentScaleNormalized", CurrentScaleNormalized), 
            ("CurrentScaleValue", CurrentScaleValue), 
            ("MinScaleValue", MinScaleValue), 
            ("MaxScaleValue", MaxScaleValue)
        ];
        ProcessEvent(GetFunction("GetResolutionScaleInformation"), @params);
    }
    public float GetRecommendedResolutionScale()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetRecommendedResolutionScale"), @params);
    }
    public EWindowMode GetPreferredFullscreenMode()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<EWindowMode>(GetFunction("GetPreferredFullscreenMode"), @params);
    }
    public int GetPostProcessingQuality()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetPostProcessingQuality"), @params);
    }
    public int GetOverallScalabilityLevel()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetOverallScalabilityLevel"), @params);
    }
    public FIntPoint GetLastConfirmedScreenResolution()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FIntPoint>(GetFunction("GetLastConfirmedScreenResolution"), @params);
    }
    public EWindowMode GetLastConfirmedFullscreenMode()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<EWindowMode>(GetFunction("GetLastConfirmedFullscreenMode"), @params);
    }
    public UGameUserSettings* GetGameUserSettings()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UGameUserSettings*)ProcessEvent<IntPtr>(GetFunction("GetGameUserSettings"), @params);
    }
    public EWindowMode GetFullscreenMode()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<EWindowMode>(GetFunction("GetFullscreenMode"), @params);
    }
    public float GetFrameRateLimit()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetFrameRateLimit"), @params);
    }
    public int GetFramePace()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetFramePace"), @params);
    }
    public int GetFoliageQuality()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetFoliageQuality"), @params);
    }
    public FIntPoint GetDesktopResolution()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FIntPoint>(GetFunction("GetDesktopResolution"), @params);
    }
    public FIntPoint GetDefaultWindowPosition()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FIntPoint>(GetFunction("GetDefaultWindowPosition"), @params);
    }
    public EWindowMode GetDefaultWindowMode()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<EWindowMode>(GetFunction("GetDefaultWindowMode"), @params);
    }
    public float GetDefaultResolutionScale()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetDefaultResolutionScale"), @params);
    }
    public FIntPoint GetDefaultResolution()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FIntPoint>(GetFunction("GetDefaultResolution"), @params);
    }
    public int GetCurrentHDRDisplayNits()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetCurrentHDRDisplayNits"), @params);
    }
    public int GetAudioQualityLevel()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetAudioQualityLevel"), @params);
    }
    public int GetAntiAliasingQuality()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetAntiAliasingQuality"), @params);
    }
    public void EnableHDRDisplayOutput(bool bEnable, int DisplayNits)
    {
        Span<(string name, object value)> @params = [
            ("bEnable", bEnable), 
            ("DisplayNits", DisplayNits)
        ];
        ProcessEvent(GetFunction("EnableHDRDisplayOutput"), @params);
    }
    public void ConfirmVideoMode()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ConfirmVideoMode"), @params);
    }
    public void ApplySettings(bool bCheckForCommandLineOverrides)
    {
        Span<(string name, object value)> @params = [
            ("bCheckForCommandLineOverrides", bCheckForCommandLineOverrides)
        ];
        ProcessEvent(GetFunction("ApplySettings"), @params);
    }
    public void ApplyResolutionSettings(bool bCheckForCommandLineOverrides)
    {
        Span<(string name, object value)> @params = [
            ("bCheckForCommandLineOverrides", bCheckForCommandLineOverrides)
        ];
        ProcessEvent(GetFunction("ApplyResolutionSettings"), @params);
    }
    public void ApplyNonResolutionSettings()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ApplyNonResolutionSettings"), @params);
    }
    public void ApplyHardwareBenchmarkResults()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ApplyHardwareBenchmarkResults"), @params);
    }
}

public unsafe class SpotLight : ObjectBase<ASpotLight>
{
    public SpotLight(IntPtr pointer) : base(pointer) {}
    public void SetOuterConeAngle(float NewOuterConeAngle)
    {
        Span<(string name, object value)> @params = [
            ("NewOuterConeAngle", NewOuterConeAngle)
        ];
        ProcessEvent(GetFunction("SetOuterConeAngle"), @params);
    }
    public void SetInnerConeAngle(float NewInnerConeAngle)
    {
        Span<(string name, object value)> @params = [
            ("NewInnerConeAngle", NewInnerConeAngle)
        ];
        ProcessEvent(GetFunction("SetInnerConeAngle"), @params);
    }
}

public unsafe class GeneratedMeshAreaLight : ObjectBase<AGeneratedMeshAreaLight>
{
    public GeneratedMeshAreaLight(IntPtr pointer) : base(pointer) {}}

public unsafe class HapticFeedbackEffect_Base : ObjectBase<UHapticFeedbackEffect_Base>
{
    public HapticFeedbackEffect_Base(IntPtr pointer) : base(pointer) {}}

public unsafe class HapticFeedbackEffect_Buffer : ObjectBase<UHapticFeedbackEffect_Buffer>
{
    public HapticFeedbackEffect_Buffer(IntPtr pointer) : base(pointer) {}
}

public unsafe class HapticFeedbackEffect_Curve : ObjectBase<UHapticFeedbackEffect_Curve>
{
    public HapticFeedbackEffect_Curve(IntPtr pointer) : base(pointer) {}
}

public unsafe class HapticFeedbackEffect_SoundWave : ObjectBase<UHapticFeedbackEffect_SoundWave>
{
    public HapticFeedbackEffect_SoundWave(IntPtr pointer) : base(pointer) {}
}

public unsafe class HealthSnapshotBlueprintLibrary : ObjectBase<UHealthSnapshotBlueprintLibrary>
{
    public HealthSnapshotBlueprintLibrary(IntPtr pointer) : base(pointer) {}
    public void StopPerformanceSnapshots()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("StopPerformanceSnapshots"), @params);
    }
    public void StartPerformanceSnapshots()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("StartPerformanceSnapshots"), @params);
    }
    public void LogPerformanceSnapshot(FString SnapshotTitle, bool bResetStats)
    {
        Span<(string name, object value)> @params = [
            ("SnapshotTitle", SnapshotTitle), 
            ("bResetStats", bResetStats)
        ];
        ProcessEvent(GetFunction("LogPerformanceSnapshot"), @params);
    }
}

public unsafe class HLODEngineSubsystem : ObjectBase<UHLODEngineSubsystem>
{
    public HLODEngineSubsystem(IntPtr pointer) : base(pointer) {}}

public unsafe class HLODProxy : ObjectBase<UHLODProxy>
{
    public HLODProxy(IntPtr pointer) : base(pointer) {}
}

public unsafe class HLODProxyDesc : ObjectBase<UHLODProxyDesc>
{
    public HLODProxyDesc(IntPtr pointer) : base(pointer) {}}

public unsafe class ImportanceSamplingLibrary : ObjectBase<UImportanceSamplingLibrary>
{
    public ImportanceSamplingLibrary(IntPtr pointer) : base(pointer) {}
    public float RandomSobolFloat(int Index, int Dimension, float Seed)
    {
        Span<(string name, object value)> @params = [
            ("Index", Index), 
            ("Dimension", Dimension), 
            ("Seed", Seed)
        ];
        return ProcessEvent<float>(GetFunction("RandomSobolFloat"), @params);
    }
    public FVector RandomSobolCell3D(int Index, int NumCells, FVector Cell, FVector Seed)
    {
        Span<(string name, object value)> @params = [
            ("Index", Index), 
            ("NumCells", NumCells), 
            ("Cell", Cell), 
            ("Seed", Seed)
        ];
        return ProcessEvent<FVector>(GetFunction("RandomSobolCell3D"), @params);
    }
    public FVector2D RandomSobolCell2D(int Index, int NumCells, FVector2D Cell, FVector2D Seed)
    {
        Span<(string name, object value)> @params = [
            ("Index", Index), 
            ("NumCells", NumCells), 
            ("Cell", Cell), 
            ("Seed", Seed)
        ];
        return ProcessEvent<FVector2D>(GetFunction("RandomSobolCell2D"), @params);
    }
    public float NextSobolFloat(int Index, int Dimension, float PreviousValue)
    {
        Span<(string name, object value)> @params = [
            ("Index", Index), 
            ("Dimension", Dimension), 
            ("PreviousValue", PreviousValue)
        ];
        return ProcessEvent<float>(GetFunction("NextSobolFloat"), @params);
    }
    public FVector NextSobolCell3D(int Index, int NumCells, FVector PreviousValue)
    {
        Span<(string name, object value)> @params = [
            ("Index", Index), 
            ("NumCells", NumCells), 
            ("PreviousValue", PreviousValue)
        ];
        return ProcessEvent<FVector>(GetFunction("NextSobolCell3D"), @params);
    }
    public FVector2D NextSobolCell2D(int Index, int NumCells, FVector2D PreviousValue)
    {
        Span<(string name, object value)> @params = [
            ("Index", Index), 
            ("NumCells", NumCells), 
            ("PreviousValue", PreviousValue)
        ];
        return ProcessEvent<FVector2D>(GetFunction("NextSobolCell2D"), @params);
    }
    public FImportanceTexture MakeImportanceTexture(UTexture2D* Texture, EImportanceWeight WeightingFunc)
    {
        Span<(string name, object value)> @params = [
            ("Texture", (IntPtr)Texture), 
            ("WeightingFunc", WeightingFunc)
        ];
        return ProcessEvent<FImportanceTexture>(GetFunction("MakeImportanceTexture"), @params);
    }
    public void ImportanceSample(ref FImportanceTexture Texture, ref FVector2D Rand, int Samples, float Intensity, ref FVector2D SamplePosition, ref FLinearColor SampleColor, ref float SampleIntensity, ref float SampleSize)
    {
        Span<(string name, object value)> @params = [
            ("Texture", Texture), 
            ("Rand", Rand), 
            ("Samples", Samples), 
            ("Intensity", Intensity), 
            ("SamplePosition", SamplePosition), 
            ("SampleColor", SampleColor), 
            ("SampleIntensity", SampleIntensity), 
            ("SampleSize", SampleSize)
        ];
        ProcessEvent(GetFunction("ImportanceSample"), @params);
    }
    public void BreakImportanceTexture(ref FImportanceTexture ImportanceTexture, ref UTexture2D* Texture, ref EImportanceWeight WeightingFunc)
    {
        Span<(string name, object value)> @params = [
            ("ImportanceTexture", ImportanceTexture), 
            ("Texture", (IntPtr)Texture), 
            ("WeightingFunc", WeightingFunc)
        ];
        ProcessEvent(GetFunction("BreakImportanceTexture"), @params);
    }
}

public unsafe class ImportantToggleSettingInterface : ObjectBase<IImportantToggleSettingInterface>
{
    public ImportantToggleSettingInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class InGameAdManager : ObjectBase<UInGameAdManager>
{
    public InGameAdManager(IntPtr pointer) : base(pointer) {}
}

public unsafe class InheritableComponentHandler : ObjectBase<UInheritableComponentHandler>
{
    public InheritableComponentHandler(IntPtr pointer) : base(pointer) {}
}

public unsafe class InputDelegateBinding : ObjectBase<UInputDelegateBinding>
{
    public InputDelegateBinding(IntPtr pointer) : base(pointer) {}}

public unsafe class InputActionDelegateBinding : ObjectBase<UInputActionDelegateBinding>
{
    public InputActionDelegateBinding(IntPtr pointer) : base(pointer) {}
}

public unsafe class InputAxisDelegateBinding : ObjectBase<UInputAxisDelegateBinding>
{
    public InputAxisDelegateBinding(IntPtr pointer) : base(pointer) {}
}

public unsafe class InputAxisKeyDelegateBinding : ObjectBase<UInputAxisKeyDelegateBinding>
{
    public InputAxisKeyDelegateBinding(IntPtr pointer) : base(pointer) {}
}

public unsafe class InputComponent : ObjectBase<UInputComponent>
{
    public InputComponent(IntPtr pointer) : base(pointer) {}
    public bool WasControllerKeyJustReleased(FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("WasControllerKeyJustReleased"), @params);
    }
    public bool WasControllerKeyJustPressed(FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("WasControllerKeyJustPressed"), @params);
    }
    public bool IsControllerKeyDown(FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("IsControllerKeyDown"), @params);
    }
    public void GetTouchState(int FingerIndex, ref float LocationX, ref float LocationY, ref bool bIsCurrentlyPressed)
    {
        Span<(string name, object value)> @params = [
            ("FingerIndex", FingerIndex), 
            ("LocationX", LocationX), 
            ("LocationY", LocationY), 
            ("bIsCurrentlyPressed", bIsCurrentlyPressed)
        ];
        ProcessEvent(GetFunction("GetTouchState"), @params);
    }
    public FVector GetControllerVectorKeyState(FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<FVector>(GetFunction("GetControllerVectorKeyState"), @params);
    }
    public void GetControllerMouseDelta(ref float DeltaX, ref float DeltaY)
    {
        Span<(string name, object value)> @params = [
            ("DeltaX", DeltaX), 
            ("DeltaY", DeltaY)
        ];
        ProcessEvent(GetFunction("GetControllerMouseDelta"), @params);
    }
    public float GetControllerKeyTimeDown(FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<float>(GetFunction("GetControllerKeyTimeDown"), @params);
    }
    public void GetControllerAnalogStickState(EControllerAnalogStick WhichStick, ref float StickX, ref float StickY)
    {
        Span<(string name, object value)> @params = [
            ("WhichStick", WhichStick), 
            ("StickX", StickX), 
            ("StickY", StickY)
        ];
        ProcessEvent(GetFunction("GetControllerAnalogStickState"), @params);
    }
    public float GetControllerAnalogKeyState(FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<float>(GetFunction("GetControllerAnalogKeyState"), @params);
    }
}

public unsafe class InputKeyDelegateBinding : ObjectBase<UInputKeyDelegateBinding>
{
    public InputKeyDelegateBinding(IntPtr pointer) : base(pointer) {}
}

public unsafe class InputSettings : ObjectBase<UInputSettings>
{
    public InputSettings(IntPtr pointer) : base(pointer) {}
    public void SaveKeyMappings()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("SaveKeyMappings"), @params);
    }
    public void RemoveAxisMapping(ref FInputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps)
    {
        Span<(string name, object value)> @params = [
            ("KeyMapping", KeyMapping), 
            ("bForceRebuildKeymaps", bForceRebuildKeymaps)
        ];
        ProcessEvent(GetFunction("RemoveAxisMapping"), @params);
    }
    public void RemoveActionMapping(ref FInputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps)
    {
        Span<(string name, object value)> @params = [
            ("KeyMapping", KeyMapping), 
            ("bForceRebuildKeymaps", bForceRebuildKeymaps)
        ];
        ProcessEvent(GetFunction("RemoveActionMapping"), @params);
    }
    public UInputSettings* GetInputSettings()
    {
        Span<(string name, object value)> @params = [
        ];
        return (UInputSettings*)ProcessEvent<IntPtr>(GetFunction("GetInputSettings"), @params);
    }
    public void GetAxisNames(ref TArray<FName> AxisNames)
    {
        Span<(string name, object value)> @params = [
            ("AxisNames", AxisNames)
        ];
        ProcessEvent(GetFunction("GetAxisNames"), @params);
    }
    public void GetAxisMappingByName(FName InAxisName, ref TArray<FInputAxisKeyMapping> OutMappings)
    {
        Span<(string name, object value)> @params = [
            ("InAxisName", InAxisName), 
            ("OutMappings", OutMappings)
        ];
        ProcessEvent(GetFunction("GetAxisMappingByName"), @params);
    }
    public void GetActionNames(ref TArray<FName> ActionNames)
    {
        Span<(string name, object value)> @params = [
            ("ActionNames", ActionNames)
        ];
        ProcessEvent(GetFunction("GetActionNames"), @params);
    }
    public void GetActionMappingByName(FName InActionName, ref TArray<FInputActionKeyMapping> OutMappings)
    {
        Span<(string name, object value)> @params = [
            ("InActionName", InActionName), 
            ("OutMappings", OutMappings)
        ];
        ProcessEvent(GetFunction("GetActionMappingByName"), @params);
    }
    public void ForceRebuildKeymaps()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ForceRebuildKeymaps"), @params);
    }
    public void AddAxisMapping(ref FInputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps)
    {
        Span<(string name, object value)> @params = [
            ("KeyMapping", KeyMapping), 
            ("bForceRebuildKeymaps", bForceRebuildKeymaps)
        ];
        ProcessEvent(GetFunction("AddAxisMapping"), @params);
    }
    public void AddActionMapping(ref FInputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps)
    {
        Span<(string name, object value)> @params = [
            ("KeyMapping", KeyMapping), 
            ("bForceRebuildKeymaps", bForceRebuildKeymaps)
        ];
        ProcessEvent(GetFunction("AddActionMapping"), @params);
    }
}

public unsafe class InputTouchDelegateBinding : ObjectBase<UInputTouchDelegateBinding>
{
    public InputTouchDelegateBinding(IntPtr pointer) : base(pointer) {}
}

public unsafe class InputVectorAxisDelegateBinding : ObjectBase<UInputVectorAxisDelegateBinding>
{
    public InputVectorAxisDelegateBinding(IntPtr pointer) : base(pointer) {}}

public unsafe class Interface_ActorSubobject : ObjectBase<IInterface_ActorSubobject>
{
    public Interface_ActorSubobject(IntPtr pointer) : base(pointer) {}}

public unsafe class Interface_AssetUserData : ObjectBase<IInterface_AssetUserData>
{
    public Interface_AssetUserData(IntPtr pointer) : base(pointer) {}}

public unsafe class BoneReferenceSkeletonProvider : ObjectBase<IBoneReferenceSkeletonProvider>
{
    public BoneReferenceSkeletonProvider(IntPtr pointer) : base(pointer) {}}

public unsafe class Interface_CollisionDataProvider : ObjectBase<IInterface_CollisionDataProvider>
{
    public Interface_CollisionDataProvider(IntPtr pointer) : base(pointer) {}}

public unsafe class Interface_PostProcessVolume : ObjectBase<IInterface_PostProcessVolume>
{
    public Interface_PostProcessVolume(IntPtr pointer) : base(pointer) {}}

public unsafe class Interface_PreviewMeshProvider : ObjectBase<IInterface_PreviewMeshProvider>
{
    public Interface_PreviewMeshProvider(IntPtr pointer) : base(pointer) {}}

public unsafe class InterpCurveEdSetup : ObjectBase<UInterpCurveEdSetup>
{
    public InterpCurveEdSetup(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpData : ObjectBase<UInterpData>
{
    public InterpData(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpFilter : ObjectBase<UInterpFilter>
{
    public InterpFilter(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpFilter_Classes : ObjectBase<UInterpFilter_Classes>
{
    public InterpFilter_Classes(IntPtr pointer) : base(pointer) {}}

public unsafe class InterpFilter_Custom : ObjectBase<UInterpFilter_Custom>
{
    public InterpFilter_Custom(IntPtr pointer) : base(pointer) {}}

public unsafe class InterpGroup : ObjectBase<UInterpGroup>
{
    public InterpGroup(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpGroupCamera : ObjectBase<UInterpGroupCamera>
{
    public InterpGroupCamera(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpGroupDirector : ObjectBase<UInterpGroupDirector>
{
    public InterpGroupDirector(IntPtr pointer) : base(pointer) {}}

public unsafe class InterpGroupInst : ObjectBase<UInterpGroupInst>
{
    public InterpGroupInst(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpGroupInstCamera : ObjectBase<UInterpGroupInstCamera>
{
    public InterpGroupInstCamera(IntPtr pointer) : base(pointer) {}}

public unsafe class InterpGroupInstDirector : ObjectBase<UInterpGroupInstDirector>
{
    public InterpGroupInstDirector(IntPtr pointer) : base(pointer) {}}

public unsafe class InterpToMovementComponent : ObjectBase<UInterpToMovementComponent>
{
    public InterpToMovementComponent(IntPtr pointer) : base(pointer) {}
    public void StopSimulating(ref FHitResult HitResult)
    {
        Span<(string name, object value)> @params = [
            ("HitResult", HitResult)
        ];
        ProcessEvent(GetFunction("StopSimulating"), @params);
    }
    public void RestartMovement(float InitialDirection)
    {
        Span<(string name, object value)> @params = [
            ("InitialDirection", InitialDirection)
        ];
        ProcessEvent(GetFunction("RestartMovement"), @params);
    }
    public void ResetControlPoints()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ResetControlPoints"), @params);
    }
    public void OnInterpToWaitEndDelegate__DelegateSignature(ref FHitResult ImpactResult, float Time)
    {
        Span<(string name, object value)> @params = [
            ("ImpactResult", ImpactResult), 
            ("Time", Time)
        ];
        ProcessEvent(GetFunction("OnInterpToWaitEndDelegate__DelegateSignature"), @params);
    }
    public void OnInterpToWaitBeginDelegate__DelegateSignature(ref FHitResult ImpactResult, float Time)
    {
        Span<(string name, object value)> @params = [
            ("ImpactResult", ImpactResult), 
            ("Time", Time)
        ];
        ProcessEvent(GetFunction("OnInterpToWaitBeginDelegate__DelegateSignature"), @params);
    }
    public void OnInterpToStopDelegate__DelegateSignature(ref FHitResult ImpactResult, float Time)
    {
        Span<(string name, object value)> @params = [
            ("ImpactResult", ImpactResult), 
            ("Time", Time)
        ];
        ProcessEvent(GetFunction("OnInterpToStopDelegate__DelegateSignature"), @params);
    }
    public void OnInterpToReverseDelegate__DelegateSignature(ref FHitResult ImpactResult, float Time)
    {
        Span<(string name, object value)> @params = [
            ("ImpactResult", ImpactResult), 
            ("Time", Time)
        ];
        ProcessEvent(GetFunction("OnInterpToReverseDelegate__DelegateSignature"), @params);
    }
    public void OnInterpToResetDelegate__DelegateSignature(ref FHitResult ImpactResult, float Time)
    {
        Span<(string name, object value)> @params = [
            ("ImpactResult", ImpactResult), 
            ("Time", Time)
        ];
        ProcessEvent(GetFunction("OnInterpToResetDelegate__DelegateSignature"), @params);
    }
    public void FinaliseControlPoints()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("FinaliseControlPoints"), @params);
    }
    public void AddControlPointPosition(FVector Pos, bool bPositionIsRelative)
    {
        Span<(string name, object value)> @params = [
            ("Pos", Pos), 
            ("bPositionIsRelative", bPositionIsRelative)
        ];
        ProcessEvent(GetFunction("AddControlPointPosition"), @params);
    }
}

public unsafe class InterpTrack : ObjectBase<UInterpTrack>
{
    public InterpTrack(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackFloatBase : ObjectBase<UInterpTrackFloatBase>
{
    public InterpTrackFloatBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackAnimControl : ObjectBase<UInterpTrackAnimControl>
{
    public InterpTrackAnimControl(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackVectorBase : ObjectBase<UInterpTrackVectorBase>
{
    public InterpTrackVectorBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackAudioMaster : ObjectBase<UInterpTrackAudioMaster>
{
    public InterpTrackAudioMaster(IntPtr pointer) : base(pointer) {}}

public unsafe class InterpTrackBoolProp : ObjectBase<UInterpTrackBoolProp>
{
    public InterpTrackBoolProp(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackColorProp : ObjectBase<UInterpTrackColorProp>
{
    public InterpTrackColorProp(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackColorScale : ObjectBase<UInterpTrackColorScale>
{
    public InterpTrackColorScale(IntPtr pointer) : base(pointer) {}}

public unsafe class InterpTrackDirector : ObjectBase<UInterpTrackDirector>
{
    public InterpTrackDirector(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackEvent : ObjectBase<UInterpTrackEvent>
{
    public InterpTrackEvent(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackFade : ObjectBase<UInterpTrackFade>
{
    public InterpTrackFade(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackFloatAnimBPParam : ObjectBase<UInterpTrackFloatAnimBPParam>
{
    public InterpTrackFloatAnimBPParam(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackFloatMaterialParam : ObjectBase<UInterpTrackFloatMaterialParam>
{
    public InterpTrackFloatMaterialParam(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackFloatParticleParam : ObjectBase<UInterpTrackFloatParticleParam>
{
    public InterpTrackFloatParticleParam(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackFloatProp : ObjectBase<UInterpTrackFloatProp>
{
    public InterpTrackFloatProp(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInst : ObjectBase<UInterpTrackInst>
{
    public InterpTrackInst(IntPtr pointer) : base(pointer) {}}

public unsafe class InterpTrackInstAnimControl : ObjectBase<UInterpTrackInstAnimControl>
{
    public InterpTrackInstAnimControl(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstAudioMaster : ObjectBase<UInterpTrackInstAudioMaster>
{
    public InterpTrackInstAudioMaster(IntPtr pointer) : base(pointer) {}}

public unsafe class InterpTrackInstProperty : ObjectBase<UInterpTrackInstProperty>
{
    public InterpTrackInstProperty(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstBoolProp : ObjectBase<UInterpTrackInstBoolProp>
{
    public InterpTrackInstBoolProp(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstColorProp : ObjectBase<UInterpTrackInstColorProp>
{
    public InterpTrackInstColorProp(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstColorScale : ObjectBase<UInterpTrackInstColorScale>
{
    public InterpTrackInstColorScale(IntPtr pointer) : base(pointer) {}}

public unsafe class InterpTrackInstDirector : ObjectBase<UInterpTrackInstDirector>
{
    public InterpTrackInstDirector(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstEvent : ObjectBase<UInterpTrackInstEvent>
{
    public InterpTrackInstEvent(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstFade : ObjectBase<UInterpTrackInstFade>
{
    public InterpTrackInstFade(IntPtr pointer) : base(pointer) {}}

public unsafe class InterpTrackInstFloatAnimBPParam : ObjectBase<UInterpTrackInstFloatAnimBPParam>
{
    public InterpTrackInstFloatAnimBPParam(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstFloatMaterialParam : ObjectBase<UInterpTrackInstFloatMaterialParam>
{
    public InterpTrackInstFloatMaterialParam(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstFloatParticleParam : ObjectBase<UInterpTrackInstFloatParticleParam>
{
    public InterpTrackInstFloatParticleParam(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstFloatProp : ObjectBase<UInterpTrackInstFloatProp>
{
    public InterpTrackInstFloatProp(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstLinearColorProp : ObjectBase<UInterpTrackInstLinearColorProp>
{
    public InterpTrackInstLinearColorProp(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstMove : ObjectBase<UInterpTrackInstMove>
{
    public InterpTrackInstMove(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstParticleReplay : ObjectBase<UInterpTrackInstParticleReplay>
{
    public InterpTrackInstParticleReplay(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstSlomo : ObjectBase<UInterpTrackInstSlomo>
{
    public InterpTrackInstSlomo(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstSound : ObjectBase<UInterpTrackInstSound>
{
    public InterpTrackInstSound(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstToggle : ObjectBase<UInterpTrackInstToggle>
{
    public InterpTrackInstToggle(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstVectorMaterialParam : ObjectBase<UInterpTrackInstVectorMaterialParam>
{
    public InterpTrackInstVectorMaterialParam(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstVectorProp : ObjectBase<UInterpTrackInstVectorProp>
{
    public InterpTrackInstVectorProp(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackInstVisibility : ObjectBase<UInterpTrackInstVisibility>
{
    public InterpTrackInstVisibility(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackLinearColorBase : ObjectBase<UInterpTrackLinearColorBase>
{
    public InterpTrackLinearColorBase(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackLinearColorProp : ObjectBase<UInterpTrackLinearColorProp>
{
    public InterpTrackLinearColorProp(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackMove : ObjectBase<UInterpTrackMove>
{
    public InterpTrackMove(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackMoveAxis : ObjectBase<UInterpTrackMoveAxis>
{
    public InterpTrackMoveAxis(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackParticleReplay : ObjectBase<UInterpTrackParticleReplay>
{
    public InterpTrackParticleReplay(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackSlomo : ObjectBase<UInterpTrackSlomo>
{
    public InterpTrackSlomo(IntPtr pointer) : base(pointer) {}}

public unsafe class InterpTrackSound : ObjectBase<UInterpTrackSound>
{
    public InterpTrackSound(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackToggle : ObjectBase<UInterpTrackToggle>
{
    public InterpTrackToggle(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackVectorMaterialParam : ObjectBase<UInterpTrackVectorMaterialParam>
{
    public InterpTrackVectorMaterialParam(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackVectorProp : ObjectBase<UInterpTrackVectorProp>
{
    public InterpTrackVectorProp(IntPtr pointer) : base(pointer) {}
}

public unsafe class InterpTrackVisibility : ObjectBase<UInterpTrackVisibility>
{
    public InterpTrackVisibility(IntPtr pointer) : base(pointer) {}
}

public unsafe class IntSerialization : ObjectBase<UIntSerialization>
{
    public IntSerialization(IntPtr pointer) : base(pointer) {}
}

public unsafe class KillZVolume : ObjectBase<AKillZVolume>
{
    public KillZVolume(IntPtr pointer) : base(pointer) {}}

public unsafe class KismetArrayLibrary : ObjectBase<UKismetArrayLibrary>
{
    public KismetArrayLibrary(IntPtr pointer) : base(pointer) {}
    public void SetArrayPropertyByName(UObject* Object, FName PropertyName, ref TArray<int> Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetArrayPropertyByName"), @params);
    }
    public void FilterArray(ref TArray<IntPtr> TargetArray, TSubclassOf<AActor> FilterClass, ref TArray<IntPtr> FilteredArray)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray), 
            ("FilterClass", FilterClass), 
            ("FilteredArray", FilteredArray)
        ];
        ProcessEvent(GetFunction("FilterArray"), @params);
    }
    public void Array_Swap(ref TArray<int> TargetArray, int FirstIndex, int SecondIndex)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray), 
            ("FirstIndex", FirstIndex), 
            ("SecondIndex", SecondIndex)
        ];
        ProcessEvent(GetFunction("Array_Swap"), @params);
    }
    public void Array_Shuffle(ref TArray<int> TargetArray)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray)
        ];
        ProcessEvent(GetFunction("Array_Shuffle"), @params);
    }
    public void Array_Set(ref TArray<int> TargetArray, int Index, ref int Item, bool bSizeToFit)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray), 
            ("Index", Index), 
            ("Item", Item), 
            ("bSizeToFit", bSizeToFit)
        ];
        ProcessEvent(GetFunction("Array_Set"), @params);
    }
    public void Array_Reverse(ref TArray<int> TargetArray)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray)
        ];
        ProcessEvent(GetFunction("Array_Reverse"), @params);
    }
    public void Array_Resize(ref TArray<int> TargetArray, int Size)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray), 
            ("Size", Size)
        ];
        ProcessEvent(GetFunction("Array_Resize"), @params);
    }
    public bool Array_RemoveItem(ref TArray<int> TargetArray, ref int Item)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray), 
            ("Item", Item)
        ];
        return ProcessEvent<bool>(GetFunction("Array_RemoveItem"), @params);
    }
    public void Array_Remove(ref TArray<int> TargetArray, int IndexToRemove)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray), 
            ("IndexToRemove", IndexToRemove)
        ];
        ProcessEvent(GetFunction("Array_Remove"), @params);
    }
    public void Array_RandomFromStream(ref TArray<int> TargetArray, ref FRandomStream RandomStream, ref int outItem, ref int OutIndex)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray), 
            ("RandomStream", RandomStream), 
            ("outItem", outItem), 
            ("OutIndex", OutIndex)
        ];
        ProcessEvent(GetFunction("Array_RandomFromStream"), @params);
    }
    public void Array_Random(ref TArray<int> TargetArray, ref int outItem, ref int OutIndex)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray), 
            ("outItem", outItem), 
            ("OutIndex", OutIndex)
        ];
        ProcessEvent(GetFunction("Array_Random"), @params);
    }
    public int Array_Length(ref TArray<int> TargetArray)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray)
        ];
        return ProcessEvent<int>(GetFunction("Array_Length"), @params);
    }
    public int Array_LastIndex(ref TArray<int> TargetArray)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray)
        ];
        return ProcessEvent<int>(GetFunction("Array_LastIndex"), @params);
    }
    public bool Array_IsValidIndex(ref TArray<int> TargetArray, int IndexToTest)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray), 
            ("IndexToTest", IndexToTest)
        ];
        return ProcessEvent<bool>(GetFunction("Array_IsValidIndex"), @params);
    }
    public void Array_Insert(ref TArray<int> TargetArray, ref int NewItem, int Index)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray), 
            ("NewItem", NewItem), 
            ("Index", Index)
        ];
        ProcessEvent(GetFunction("Array_Insert"), @params);
    }
    public bool Array_Identical(ref TArray<int> ArrayA, ref TArray<int> ArrayB)
    {
        Span<(string name, object value)> @params = [
            ("ArrayA", ArrayA), 
            ("ArrayB", ArrayB)
        ];
        return ProcessEvent<bool>(GetFunction("Array_Identical"), @params);
    }
    public void Array_Get(ref TArray<int> TargetArray, int Index, ref int Item)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray), 
            ("Index", Index), 
            ("Item", Item)
        ];
        ProcessEvent(GetFunction("Array_Get"), @params);
    }
    public int Array_Find(ref TArray<int> TargetArray, ref int ItemToFind)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray), 
            ("ItemToFind", ItemToFind)
        ];
        return ProcessEvent<int>(GetFunction("Array_Find"), @params);
    }
    public bool Array_Contains(ref TArray<int> TargetArray, ref int ItemToFind)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray), 
            ("ItemToFind", ItemToFind)
        ];
        return ProcessEvent<bool>(GetFunction("Array_Contains"), @params);
    }
    public void Array_Clear(ref TArray<int> TargetArray)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray)
        ];
        ProcessEvent(GetFunction("Array_Clear"), @params);
    }
    public void Array_Append(ref TArray<int> TargetArray, ref TArray<int> SourceArray)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray), 
            ("SourceArray", SourceArray)
        ];
        ProcessEvent(GetFunction("Array_Append"), @params);
    }
    public int Array_AddUnique(ref TArray<int> TargetArray, ref int NewItem)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray), 
            ("NewItem", NewItem)
        ];
        return ProcessEvent<int>(GetFunction("Array_AddUnique"), @params);
    }
    public int Array_Add(ref TArray<int> TargetArray, ref int NewItem)
    {
        Span<(string name, object value)> @params = [
            ("TargetArray", TargetArray), 
            ("NewItem", NewItem)
        ];
        return ProcessEvent<int>(GetFunction("Array_Add"), @params);
    }
}

public unsafe class KismetGuidLibrary : ObjectBase<UKismetGuidLibrary>
{
    public KismetGuidLibrary(IntPtr pointer) : base(pointer) {}
    public void Parse_StringToGuid(FString GuidString, ref FGuid OutGuid, ref bool Success)
    {
        Span<(string name, object value)> @params = [
            ("GuidString", GuidString), 
            ("OutGuid", OutGuid), 
            ("Success", Success)
        ];
        ProcessEvent(GetFunction("Parse_StringToGuid"), @params);
    }
    public bool NotEqual_GuidGuid(ref FGuid A, ref FGuid B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_GuidGuid"), @params);
    }
    public FGuid NewGuid()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FGuid>(GetFunction("NewGuid"), @params);
    }
    public bool IsValid_Guid(ref FGuid InGuid)
    {
        Span<(string name, object value)> @params = [
            ("InGuid", InGuid)
        ];
        return ProcessEvent<bool>(GetFunction("IsValid_Guid"), @params);
    }
    public void Invalidate_Guid(ref FGuid InGuid)
    {
        Span<(string name, object value)> @params = [
            ("InGuid", InGuid)
        ];
        ProcessEvent(GetFunction("Invalidate_Guid"), @params);
    }
    public bool EqualEqual_GuidGuid(ref FGuid A, ref FGuid B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_GuidGuid"), @params);
    }
    public FString Conv_GuidToString(ref FGuid InGuid)
    {
        Span<(string name, object value)> @params = [
            ("InGuid", InGuid)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_GuidToString"), @params);
    }
}

public unsafe class KismetInputLibrary : ObjectBase<UKismetInputLibrary>
{
    public KismetInputLibrary(IntPtr pointer) : base(pointer) {}
    public bool PointerEvent_IsTouchEvent(ref FPointerEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<bool>(GetFunction("PointerEvent_IsTouchEvent"), @params);
    }
    public bool PointerEvent_IsMouseButtonDown(ref FPointerEvent Input, FKey MouseButton)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input), 
            ("MouseButton", MouseButton)
        ];
        return ProcessEvent<bool>(GetFunction("PointerEvent_IsMouseButtonDown"), @params);
    }
    public float PointerEvent_GetWheelDelta(ref FPointerEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<float>(GetFunction("PointerEvent_GetWheelDelta"), @params);
    }
    public int PointerEvent_GetUserIndex(ref FPointerEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<int>(GetFunction("PointerEvent_GetUserIndex"), @params);
    }
    public int PointerEvent_GetTouchpadIndex(ref FPointerEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<int>(GetFunction("PointerEvent_GetTouchpadIndex"), @params);
    }
    public FVector2D PointerEvent_GetScreenSpacePosition(ref FPointerEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<FVector2D>(GetFunction("PointerEvent_GetScreenSpacePosition"), @params);
    }
    public int PointerEvent_GetPointerIndex(ref FPointerEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<int>(GetFunction("PointerEvent_GetPointerIndex"), @params);
    }
    public FVector2D PointerEvent_GetLastScreenSpacePosition(ref FPointerEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<FVector2D>(GetFunction("PointerEvent_GetLastScreenSpacePosition"), @params);
    }
    public ESlateGesture PointerEvent_GetGestureType(ref FPointerEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<ESlateGesture>(GetFunction("PointerEvent_GetGestureType"), @params);
    }
    public FVector2D PointerEvent_GetGestureDelta(ref FPointerEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<FVector2D>(GetFunction("PointerEvent_GetGestureDelta"), @params);
    }
    public FKey PointerEvent_GetEffectingButton(ref FPointerEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<FKey>(GetFunction("PointerEvent_GetEffectingButton"), @params);
    }
    public FVector2D PointerEvent_GetCursorDelta(ref FPointerEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<FVector2D>(GetFunction("PointerEvent_GetCursorDelta"), @params);
    }
    public bool Key_IsVectorAxis(ref FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("Key_IsVectorAxis"), @params);
    }
    public bool Key_IsValid(ref FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("Key_IsValid"), @params);
    }
    public bool Key_IsMouseButton(ref FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("Key_IsMouseButton"), @params);
    }
    public bool Key_IsModifierKey(ref FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("Key_IsModifierKey"), @params);
    }
    public bool Key_IsKeyboardKey(ref FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("Key_IsKeyboardKey"), @params);
    }
    public bool Key_IsGamepadKey(ref FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("Key_IsGamepadKey"), @params);
    }
    public bool Key_IsDigital(ref FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("Key_IsDigital"), @params);
    }
    public bool Key_IsButtonAxis(ref FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("Key_IsButtonAxis"), @params);
    }
    public bool Key_IsAxis3D(ref FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("Key_IsAxis3D"), @params);
    }
    public bool Key_IsAxis2D(ref FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("Key_IsAxis2D"), @params);
    }
    public bool Key_IsAxis1D(ref FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("Key_IsAxis1D"), @params);
    }
    public bool Key_IsAnalog(ref FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("Key_IsAnalog"), @params);
    }
    public EUINavigation Key_GetNavigationDirectionFromKey(ref FKeyEvent InKeyEvent)
    {
        Span<(string name, object value)> @params = [
            ("InKeyEvent", InKeyEvent)
        ];
        return ProcessEvent<EUINavigation>(GetFunction("Key_GetNavigationDirectionFromKey"), @params);
    }
    public EUINavigation Key_GetNavigationDirectionFromAnalog(ref FAnalogInputEvent InAnalogEvent)
    {
        Span<(string name, object value)> @params = [
            ("InAnalogEvent", InAnalogEvent)
        ];
        return ProcessEvent<EUINavigation>(GetFunction("Key_GetNavigationDirectionFromAnalog"), @params);
    }
    public EUINavigationAction Key_GetNavigationActionFromKey(ref FKeyEvent InKeyEvent)
    {
        Span<(string name, object value)> @params = [
            ("InKeyEvent", InKeyEvent)
        ];
        return ProcessEvent<EUINavigationAction>(GetFunction("Key_GetNavigationActionFromKey"), @params);
    }
    public EUINavigationAction Key_GetNavigationAction(ref FKey InKey)
    {
        Span<(string name, object value)> @params = [
            ("InKey", InKey)
        ];
        return ProcessEvent<EUINavigationAction>(GetFunction("Key_GetNavigationAction"), @params);
    }
    public FText Key_GetDisplayName(ref FKey Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<FText>(GetFunction("Key_GetDisplayName"), @params);
    }
    public bool InputEvent_IsShiftDown(ref FInputEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<bool>(GetFunction("InputEvent_IsShiftDown"), @params);
    }
    public bool InputEvent_IsRightShiftDown(ref FInputEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<bool>(GetFunction("InputEvent_IsRightShiftDown"), @params);
    }
    public bool InputEvent_IsRightControlDown(ref FInputEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<bool>(GetFunction("InputEvent_IsRightControlDown"), @params);
    }
    public bool InputEvent_IsRightCommandDown(ref FInputEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<bool>(GetFunction("InputEvent_IsRightCommandDown"), @params);
    }
    public bool InputEvent_IsRightAltDown(ref FInputEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<bool>(GetFunction("InputEvent_IsRightAltDown"), @params);
    }
    public bool InputEvent_IsRepeat(ref FInputEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<bool>(GetFunction("InputEvent_IsRepeat"), @params);
    }
    public bool InputEvent_IsLeftShiftDown(ref FInputEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<bool>(GetFunction("InputEvent_IsLeftShiftDown"), @params);
    }
    public bool InputEvent_IsLeftControlDown(ref FInputEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<bool>(GetFunction("InputEvent_IsLeftControlDown"), @params);
    }
    public bool InputEvent_IsLeftCommandDown(ref FInputEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<bool>(GetFunction("InputEvent_IsLeftCommandDown"), @params);
    }
    public bool InputEvent_IsLeftAltDown(ref FInputEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<bool>(GetFunction("InputEvent_IsLeftAltDown"), @params);
    }
    public bool InputEvent_IsControlDown(ref FInputEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<bool>(GetFunction("InputEvent_IsControlDown"), @params);
    }
    public bool InputEvent_IsCommandDown(ref FInputEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<bool>(GetFunction("InputEvent_IsCommandDown"), @params);
    }
    public bool InputEvent_IsAltDown(ref FInputEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<bool>(GetFunction("InputEvent_IsAltDown"), @params);
    }
    public FText InputChord_GetDisplayName(ref FInputChord Key)
    {
        Span<(string name, object value)> @params = [
            ("Key", Key)
        ];
        return ProcessEvent<FText>(GetFunction("InputChord_GetDisplayName"), @params);
    }
    public int GetUserIndex(ref FKeyEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<int>(GetFunction("GetUserIndex"), @params);
    }
    public FKey GetKey(ref FKeyEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<FKey>(GetFunction("GetKey"), @params);
    }
    public float GetAnalogValue(ref FAnalogInputEvent Input)
    {
        Span<(string name, object value)> @params = [
            ("Input", Input)
        ];
        return ProcessEvent<float>(GetFunction("GetAnalogValue"), @params);
    }
    public bool EqualEqual_KeyKey(FKey A, FKey B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_KeyKey"), @params);
    }
    public bool EqualEqual_InputChordInputChord(FInputChord A, FInputChord B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_InputChordInputChord"), @params);
    }
    public void CalibrateTilt()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("CalibrateTilt"), @params);
    }
}

public unsafe class KismetInternationalizationLibrary : ObjectBase<UKismetInternationalizationLibrary>
{
    public KismetInternationalizationLibrary(IntPtr pointer) : base(pointer) {}
    public bool SetCurrentLocale(FString Culture, bool SaveToConfig)
    {
        Span<(string name, object value)> @params = [
            ("Culture", Culture), 
            ("SaveToConfig", SaveToConfig)
        ];
        return ProcessEvent<bool>(GetFunction("SetCurrentLocale"), @params);
    }
    public bool SetCurrentLanguageAndLocale(FString Culture, bool SaveToConfig)
    {
        Span<(string name, object value)> @params = [
            ("Culture", Culture), 
            ("SaveToConfig", SaveToConfig)
        ];
        return ProcessEvent<bool>(GetFunction("SetCurrentLanguageAndLocale"), @params);
    }
    public bool SetCurrentLanguage(FString Culture, bool SaveToConfig)
    {
        Span<(string name, object value)> @params = [
            ("Culture", Culture), 
            ("SaveToConfig", SaveToConfig)
        ];
        return ProcessEvent<bool>(GetFunction("SetCurrentLanguage"), @params);
    }
    public bool SetCurrentCulture(FString Culture, bool SaveToConfig)
    {
        Span<(string name, object value)> @params = [
            ("Culture", Culture), 
            ("SaveToConfig", SaveToConfig)
        ];
        return ProcessEvent<bool>(GetFunction("SetCurrentCulture"), @params);
    }
    public bool SetCurrentAssetGroupCulture(FName AssetGroup, FString Culture, bool SaveToConfig)
    {
        Span<(string name, object value)> @params = [
            ("AssetGroup", AssetGroup), 
            ("Culture", Culture), 
            ("SaveToConfig", SaveToConfig)
        ];
        return ProcessEvent<bool>(GetFunction("SetCurrentAssetGroupCulture"), @params);
    }
    public FString GetSuitableCulture(ref TArray<FString> AvailableCultures, FString CultureToMatch, FString FallbackCulture)
    {
        Span<(string name, object value)> @params = [
            ("AvailableCultures", AvailableCultures), 
            ("CultureToMatch", CultureToMatch), 
            ("FallbackCulture", FallbackCulture)
        ];
        return ProcessEvent<FString>(GetFunction("GetSuitableCulture"), @params);
    }
    public FString GetNativeCulture(ELocalizedTextSourceCategory TextCategory)
    {
        Span<(string name, object value)> @params = [
            ("TextCategory", TextCategory)
        ];
        return ProcessEvent<FString>(GetFunction("GetNativeCulture"), @params);
    }
    public TArray<FString> GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional)
    {
        Span<(string name, object value)> @params = [
            ("IncludeGame", IncludeGame), 
            ("IncludeEngine", IncludeEngine), 
            ("IncludeEditor", IncludeEditor), 
            ("IncludeAdditional", IncludeAdditional)
        ];
        return ProcessEvent<TArray<FString>>(GetFunction("GetLocalizedCultures"), @params);
    }
    public FString GetCurrentLocale()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetCurrentLocale"), @params);
    }
    public FString GetCurrentLanguage()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetCurrentLanguage"), @params);
    }
    public FString GetCurrentCulture()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetCurrentCulture"), @params);
    }
    public FString GetCurrentAssetGroupCulture(FName AssetGroup)
    {
        Span<(string name, object value)> @params = [
            ("AssetGroup", AssetGroup)
        ];
        return ProcessEvent<FString>(GetFunction("GetCurrentAssetGroupCulture"), @params);
    }
    public FString GetCultureDisplayName(FString Culture, bool Localized)
    {
        Span<(string name, object value)> @params = [
            ("Culture", Culture), 
            ("Localized", Localized)
        ];
        return ProcessEvent<FString>(GetFunction("GetCultureDisplayName"), @params);
    }
    public void ClearCurrentAssetGroupCulture(FName AssetGroup, bool SaveToConfig)
    {
        Span<(string name, object value)> @params = [
            ("AssetGroup", AssetGroup), 
            ("SaveToConfig", SaveToConfig)
        ];
        ProcessEvent(GetFunction("ClearCurrentAssetGroupCulture"), @params);
    }
}

public unsafe class KismetMaterialLibrary : ObjectBase<UKismetMaterialLibrary>
{
    public KismetMaterialLibrary(IntPtr pointer) : base(pointer) {}
    public void SetVectorParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName ParameterName, ref FLinearColor ParameterValue)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Collection", (IntPtr)Collection), 
            ("ParameterName", ParameterName), 
            ("ParameterValue", ParameterValue)
        ];
        ProcessEvent(GetFunction("SetVectorParameterValue"), @params);
    }
    public void SetScalarParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName ParameterName, float ParameterValue)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Collection", (IntPtr)Collection), 
            ("ParameterName", ParameterName), 
            ("ParameterValue", ParameterValue)
        ];
        ProcessEvent(GetFunction("SetScalarParameterValue"), @params);
    }
    public FLinearColor GetVectorParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName ParameterName)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Collection", (IntPtr)Collection), 
            ("ParameterName", ParameterName)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("GetVectorParameterValue"), @params);
    }
    public float GetScalarParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName ParameterName)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Collection", (IntPtr)Collection), 
            ("ParameterName", ParameterName)
        ];
        return ProcessEvent<float>(GetFunction("GetScalarParameterValue"), @params);
    }
    public UMaterialInstanceDynamic* CreateDynamicMaterialInstance(UObject* WorldContextObject, UMaterialInterface* Parent, FName OptionalName, EMIDCreationFlags CreationFlags)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Parent", (IntPtr)Parent), 
            ("OptionalName", OptionalName), 
            ("CreationFlags", CreationFlags)
        ];
        return (UMaterialInstanceDynamic*)ProcessEvent<IntPtr>(GetFunction("CreateDynamicMaterialInstance"), @params);
    }
}

public unsafe class KismetMathLibrary : ObjectBase<UKismetMathLibrary>
{
    public KismetMathLibrary(IntPtr pointer) : base(pointer) {}
    public int Xor_IntInt(int A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<int>(GetFunction("Xor_IntInt"), @params);
    }
    public long Xor_Int64Int64(long A, long B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<long>(GetFunction("Xor_Int64Int64"), @params);
    }
    public int Wrap(int Value, int Min, int Max)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("Min", Min), 
            ("Max", Max)
        ];
        return ProcessEvent<int>(GetFunction("Wrap"), @params);
    }
    public FVector WeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float Weight)
    {
        Span<(string name, object value)> @params = [
            ("CurrentSample", CurrentSample), 
            ("PreviousSample", PreviousSample), 
            ("Weight", Weight)
        ];
        return ProcessEvent<FVector>(GetFunction("WeightedMovingAverage_FVector"), @params);
    }
    public FRotator WeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float Weight)
    {
        Span<(string name, object value)> @params = [
            ("CurrentSample", CurrentSample), 
            ("PreviousSample", PreviousSample), 
            ("Weight", Weight)
        ];
        return ProcessEvent<FRotator>(GetFunction("WeightedMovingAverage_FRotator"), @params);
    }
    public float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight)
    {
        Span<(string name, object value)> @params = [
            ("CurrentSample", CurrentSample), 
            ("PreviousSample", PreviousSample), 
            ("Weight", Weight)
        ];
        return ProcessEvent<float>(GetFunction("WeightedMovingAverage_Float"), @params);
    }
    public float VSizeXYSquared(FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("VSizeXYSquared"), @params);
    }
    public float VSizeXY(FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("VSizeXY"), @params);
    }
    public float VSizeSquared(FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("VSizeSquared"), @params);
    }
    public float VSize2DSquared(FVector2D A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("VSize2DSquared"), @params);
    }
    public float VSize2D(FVector2D A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("VSize2D"), @params);
    }
    public float VSize(FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("VSize"), @params);
    }
    public FVector VLerp(FVector A, FVector B, float Alpha)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Alpha", Alpha)
        ];
        return ProcessEvent<FVector>(GetFunction("VLerp"), @params);
    }
    public FVector VInterpTo_Constant(FVector Current, FVector Target, float DeltaTime, float InterpSpeed)
    {
        Span<(string name, object value)> @params = [
            ("Current", Current), 
            ("Target", Target), 
            ("DeltaTime", DeltaTime), 
            ("InterpSpeed", InterpSpeed)
        ];
        return ProcessEvent<FVector>(GetFunction("VInterpTo_Constant"), @params);
    }
    public FVector VInterpTo(FVector Current, FVector Target, float DeltaTime, float InterpSpeed)
    {
        Span<(string name, object value)> @params = [
            ("Current", Current), 
            ("Target", Target), 
            ("DeltaTime", DeltaTime), 
            ("InterpSpeed", InterpSpeed)
        ];
        return ProcessEvent<FVector>(GetFunction("VInterpTo"), @params);
    }
    public FVector VectorSpringInterp(FVector Current, FVector Target, ref FVectorSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass)
    {
        Span<(string name, object value)> @params = [
            ("Current", Current), 
            ("Target", Target), 
            ("SpringState", SpringState), 
            ("Stiffness", Stiffness), 
            ("CriticalDampingFactor", CriticalDampingFactor), 
            ("DeltaTime", DeltaTime), 
            ("Mass", Mass)
        ];
        return ProcessEvent<FVector>(GetFunction("VectorSpringInterp"), @params);
    }
    public FVector Vector_Zero()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_Zero"), @params);
    }
    public FVector Vector_Up()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_Up"), @params);
    }
    public void Vector_UnwindEuler(ref FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        ProcessEvent(GetFunction("Vector_UnwindEuler"), @params);
    }
    public FVector2D Vector_UnitCartesianToSpherical(FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FVector2D>(GetFunction("Vector_UnitCartesianToSpherical"), @params);
    }
    public FVector Vector_ToRadians(FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_ToRadians"), @params);
    }
    public FVector Vector_ToDegrees(FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_ToDegrees"), @params);
    }
    public FVector Vector_SnappedToGrid(FVector InVect, float InGridSize)
    {
        Span<(string name, object value)> @params = [
            ("InVect", InVect), 
            ("InGridSize", InGridSize)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_SnappedToGrid"), @params);
    }
    public void Vector_Set(ref FVector A, float X, float Y, float Z)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("X", X), 
            ("Y", Y), 
            ("Z", Z)
        ];
        ProcessEvent(GetFunction("Vector_Set"), @params);
    }
    public FVector Vector_Right()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_Right"), @params);
    }
    public FVector Vector_Reciprocal(ref FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_Reciprocal"), @params);
    }
    public FVector Vector_ProjectOnToNormal(FVector V, FVector InNormal)
    {
        Span<(string name, object value)> @params = [
            ("V", V), 
            ("InNormal", InNormal)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_ProjectOnToNormal"), @params);
    }
    public FVector Vector_One()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_One"), @params);
    }
    public FVector Vector_NormalUnsafe(ref FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_NormalUnsafe"), @params);
    }
    public void Vector_Normalize(ref FVector A, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Tolerance", Tolerance)
        ];
        ProcessEvent(GetFunction("Vector_Normalize"), @params);
    }
    public FVector Vector_Normal2D(FVector A, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_Normal2D"), @params);
    }
    public FVector Vector_MirrorByPlane(FVector A, ref FPlane InPlane)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("InPlane", InPlane)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_MirrorByPlane"), @params);
    }
    public FVector Vector_Left()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_Left"), @params);
    }
    public bool Vector_IsZero(ref FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<bool>(GetFunction("Vector_IsZero"), @params);
    }
    public bool Vector_IsUnit(ref FVector A, float SquaredLenthTolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("SquaredLenthTolerance", SquaredLenthTolerance)
        ];
        return ProcessEvent<bool>(GetFunction("Vector_IsUnit"), @params);
    }
    public bool Vector_IsUniform(ref FVector A, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<bool>(GetFunction("Vector_IsUniform"), @params);
    }
    public bool Vector_IsNormal(ref FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<bool>(GetFunction("Vector_IsNormal"), @params);
    }
    public bool Vector_IsNearlyZero(ref FVector A, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<bool>(GetFunction("Vector_IsNearlyZero"), @params);
    }
    public bool Vector_IsNAN(ref FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<bool>(GetFunction("Vector_IsNAN"), @params);
    }
    public float Vector_HeadingAngle(FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Vector_HeadingAngle"), @params);
    }
    public FVector Vector_GetSignVector(FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_GetSignVector"), @params);
    }
    public FVector Vector_GetProjection(FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_GetProjection"), @params);
    }
    public float Vector_GetAbsMin(FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Vector_GetAbsMin"), @params);
    }
    public float Vector_GetAbsMax(FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Vector_GetAbsMax"), @params);
    }
    public FVector Vector_GetAbs(FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_GetAbs"), @params);
    }
    public FVector Vector_Forward()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_Forward"), @params);
    }
    public FVector Vector_Down()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_Down"), @params);
    }
    public float Vector_DistanceSquared(FVector v1, FVector v2)
    {
        Span<(string name, object value)> @params = [
            ("v1", v1), 
            ("v2", v2)
        ];
        return ProcessEvent<float>(GetFunction("Vector_DistanceSquared"), @params);
    }
    public float Vector_Distance2DSquared(FVector v1, FVector v2)
    {
        Span<(string name, object value)> @params = [
            ("v1", v1), 
            ("v2", v2)
        ];
        return ProcessEvent<float>(GetFunction("Vector_Distance2DSquared"), @params);
    }
    public float Vector_Distance2D(FVector v1, FVector v2)
    {
        Span<(string name, object value)> @params = [
            ("v1", v1), 
            ("v2", v2)
        ];
        return ProcessEvent<float>(GetFunction("Vector_Distance2D"), @params);
    }
    public float Vector_Distance(FVector v1, FVector v2)
    {
        Span<(string name, object value)> @params = [
            ("v1", v1), 
            ("v2", v2)
        ];
        return ProcessEvent<float>(GetFunction("Vector_Distance"), @params);
    }
    public float Vector_CosineAngle2D(FVector A, FVector B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<float>(GetFunction("Vector_CosineAngle2D"), @params);
    }
    public FVector Vector_ComponentMin(FVector A, FVector B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_ComponentMin"), @params);
    }
    public FVector Vector_ComponentMax(FVector A, FVector B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_ComponentMax"), @params);
    }
    public FVector Vector_ClampSizeMax2D(FVector A, float Max)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Max", Max)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_ClampSizeMax2D"), @params);
    }
    public FVector Vector_ClampSizeMax(FVector A, float Max)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Max", Max)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_ClampSizeMax"), @params);
    }
    public FVector Vector_ClampSize2D(FVector A, float Min, float Max)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Min", Min), 
            ("Max", Max)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_ClampSize2D"), @params);
    }
    public FVector Vector_BoundedToCube(FVector InVect, float InRadius)
    {
        Span<(string name, object value)> @params = [
            ("InVect", InVect), 
            ("InRadius", InRadius)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_BoundedToCube"), @params);
    }
    public FVector Vector_BoundedToBox(FVector InVect, FVector InBoxMin, FVector InBoxMax)
    {
        Span<(string name, object value)> @params = [
            ("InVect", InVect), 
            ("InBoxMin", InBoxMin), 
            ("InBoxMax", InBoxMax)
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_BoundedToBox"), @params);
    }
    public FVector Vector_Backward()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("Vector_Backward"), @params);
    }
    public void Vector_Assign(ref FVector A, ref FVector InVector)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("InVector", InVector)
        ];
        ProcessEvent(GetFunction("Vector_Assign"), @params);
    }
    public void Vector_AddBounded(ref FVector A, FVector InAddVect, float InRadius)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("InAddVect", InAddVect), 
            ("InRadius", InRadius)
        ];
        ProcessEvent(GetFunction("Vector_AddBounded"), @params);
    }
    public FVector4 Vector4_Zero()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector4>(GetFunction("Vector4_Zero"), @params);
    }
    public float Vector4_SizeSquared3(ref FVector4 A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Vector4_SizeSquared3"), @params);
    }
    public float Vector4_SizeSquared(ref FVector4 A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Vector4_SizeSquared"), @params);
    }
    public float Vector4_Size3(ref FVector4 A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Vector4_Size3"), @params);
    }
    public float Vector4_Size(ref FVector4 A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Vector4_Size"), @params);
    }
    public void Vector4_Set(ref FVector4 A, float X, float Y, float Z, float W)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("X", X), 
            ("Y", Y), 
            ("Z", Z), 
            ("W", W)
        ];
        ProcessEvent(GetFunction("Vector4_Set"), @params);
    }
    public FVector4 Vector4_NormalUnsafe3(ref FVector4 A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FVector4>(GetFunction("Vector4_NormalUnsafe3"), @params);
    }
    public void Vector4_Normalize3(ref FVector4 A, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Tolerance", Tolerance)
        ];
        ProcessEvent(GetFunction("Vector4_Normalize3"), @params);
    }
    public FVector4 Vector4_Normal3(ref FVector4 A, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<FVector4>(GetFunction("Vector4_Normal3"), @params);
    }
    public FVector4 Vector4_Negated(ref FVector4 A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FVector4>(GetFunction("Vector4_Negated"), @params);
    }
    public FVector4 Vector4_MirrorByVector3(ref FVector4 Direction, ref FVector4 SurfaceNormal)
    {
        Span<(string name, object value)> @params = [
            ("Direction", Direction), 
            ("SurfaceNormal", SurfaceNormal)
        ];
        return ProcessEvent<FVector4>(GetFunction("Vector4_MirrorByVector3"), @params);
    }
    public bool Vector4_IsZero(ref FVector4 A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<bool>(GetFunction("Vector4_IsZero"), @params);
    }
    public bool Vector4_IsUnit3(ref FVector4 A, float SquaredLenthTolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("SquaredLenthTolerance", SquaredLenthTolerance)
        ];
        return ProcessEvent<bool>(GetFunction("Vector4_IsUnit3"), @params);
    }
    public bool Vector4_IsNormal3(ref FVector4 A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<bool>(GetFunction("Vector4_IsNormal3"), @params);
    }
    public bool Vector4_IsNearlyZero3(ref FVector4 A, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<bool>(GetFunction("Vector4_IsNearlyZero3"), @params);
    }
    public bool Vector4_IsNAN(ref FVector4 A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<bool>(GetFunction("Vector4_IsNAN"), @params);
    }
    public float Vector4_DotProduct3(ref FVector4 A, ref FVector4 B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<float>(GetFunction("Vector4_DotProduct3"), @params);
    }
    public float Vector4_DotProduct(ref FVector4 A, ref FVector4 B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<float>(GetFunction("Vector4_DotProduct"), @params);
    }
    public FVector4 Vector4_CrossProduct3(ref FVector4 A, ref FVector4 B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector4>(GetFunction("Vector4_CrossProduct3"), @params);
    }
    public void Vector4_Assign(ref FVector4 A, ref FVector4 InVector)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("InVector", InVector)
        ];
        ProcessEvent(GetFunction("Vector4_Assign"), @params);
    }
    public FVector2D Vector2DInterpTo_Constant(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed)
    {
        Span<(string name, object value)> @params = [
            ("Current", Current), 
            ("Target", Target), 
            ("DeltaTime", DeltaTime), 
            ("InterpSpeed", InterpSpeed)
        ];
        return ProcessEvent<FVector2D>(GetFunction("Vector2DInterpTo_Constant"), @params);
    }
    public FVector2D Vector2DInterpTo(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed)
    {
        Span<(string name, object value)> @params = [
            ("Current", Current), 
            ("Target", Target), 
            ("DeltaTime", DeltaTime), 
            ("InterpSpeed", InterpSpeed)
        ];
        return ProcessEvent<FVector2D>(GetFunction("Vector2DInterpTo"), @params);
    }
    public FVector2D Vector2D_Zero()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector2D>(GetFunction("Vector2D_Zero"), @params);
    }
    public FVector2D Vector2D_Unit45Deg()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector2D>(GetFunction("Vector2D_Unit45Deg"), @params);
    }
    public FVector2D Vector2D_One()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector2D>(GetFunction("Vector2D_One"), @params);
    }
    public FVector VEase(FVector A, FVector B, float Alpha, EEasingFunc EasingFunc, float BlendExp, int Steps)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Alpha", Alpha), 
            ("EasingFunc", EasingFunc), 
            ("BlendExp", BlendExp), 
            ("Steps", Steps)
        ];
        return ProcessEvent<FVector>(GetFunction("VEase"), @params);
    }
    public FDateTime UtcNow()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FDateTime>(GetFunction("UtcNow"), @params);
    }
    public FVector4 TransformVector4(ref FMatrix Matrix, ref FVector4 Vec4)
    {
        Span<(string name, object value)> @params = [
            ("Matrix", Matrix), 
            ("Vec4", Vec4)
        ];
        return ProcessEvent<FVector4>(GetFunction("TransformVector4"), @params);
    }
    public FRotator TransformRotation(ref FTransform T, FRotator Rotation)
    {
        Span<(string name, object value)> @params = [
            ("T", T), 
            ("Rotation", Rotation)
        ];
        return ProcessEvent<FRotator>(GetFunction("TransformRotation"), @params);
    }
    public FVector TransformLocation(ref FTransform T, FVector Location)
    {
        Span<(string name, object value)> @params = [
            ("T", T), 
            ("Location", Location)
        ];
        return ProcessEvent<FVector>(GetFunction("TransformLocation"), @params);
    }
    public FVector TransformDirection(ref FTransform T, FVector Direction)
    {
        Span<(string name, object value)> @params = [
            ("T", T), 
            ("Direction", Direction)
        ];
        return ProcessEvent<FVector>(GetFunction("TransformDirection"), @params);
    }
    public float Transform_Determinant(ref FTransform Transform)
    {
        Span<(string name, object value)> @params = [
            ("Transform", Transform)
        ];
        return ProcessEvent<float>(GetFunction("Transform_Determinant"), @params);
    }
    public FVector2D ToSign2D(FVector2D A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FVector2D>(GetFunction("ToSign2D"), @params);
    }
    public FVector2D ToRounded2D(FVector2D A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FVector2D>(GetFunction("ToRounded2D"), @params);
    }
    public void ToDirectionAndLength2D(FVector2D A, ref FVector2D OutDir, ref float OutLength)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("OutDir", OutDir), 
            ("OutLength", OutLength)
        ];
        ProcessEvent(GetFunction("ToDirectionAndLength2D"), @params);
    }
    public FDateTime Today()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FDateTime>(GetFunction("Today"), @params);
    }
    public FTransform TLerp(ref FTransform A, ref FTransform B, float Alpha, ELerpInterpolationMode InterpMode)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Alpha", Alpha), 
            ("InterpMode", InterpMode)
        ];
        return ProcessEvent<FTransform>(GetFunction("TLerp"), @params);
    }
    public FTransform TInterpTo(ref FTransform Current, ref FTransform Target, float DeltaTime, float InterpSpeed)
    {
        Span<(string name, object value)> @params = [
            ("Current", Current), 
            ("Target", Target), 
            ("DeltaTime", DeltaTime), 
            ("InterpSpeed", InterpSpeed)
        ];
        return ProcessEvent<FTransform>(GetFunction("TInterpTo"), @params);
    }
    public FTimespan TimespanZeroValue()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FTimespan>(GetFunction("TimespanZeroValue"), @params);
    }
    public float TimespanRatio(FTimespan A, FTimespan B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<float>(GetFunction("TimespanRatio"), @params);
    }
    public FTimespan TimespanMinValue()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FTimespan>(GetFunction("TimespanMinValue"), @params);
    }
    public FTimespan TimespanMaxValue()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FTimespan>(GetFunction("TimespanMaxValue"), @params);
    }
    public bool TimespanFromString(FString TimespanString, ref FTimespan Result)
    {
        Span<(string name, object value)> @params = [
            ("TimespanString", TimespanString), 
            ("Result", Result)
        ];
        return ProcessEvent<bool>(GetFunction("TimespanFromString"), @params);
    }
    public FTransform TEase(ref FTransform A, ref FTransform B, float Alpha, EEasingFunc EasingFunc, float BlendExp, int Steps)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Alpha", Alpha), 
            ("EasingFunc", EasingFunc), 
            ("BlendExp", BlendExp), 
            ("Steps", Steps)
        ];
        return ProcessEvent<FTransform>(GetFunction("TEase"), @params);
    }
    public float Tan(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Tan"), @params);
    }
    public FVector Subtract_VectorVector(FVector A, FVector B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector>(GetFunction("Subtract_VectorVector"), @params);
    }
    public FVector Subtract_VectorInt(FVector A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector>(GetFunction("Subtract_VectorInt"), @params);
    }
    public FVector Subtract_VectorFloat(FVector A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector>(GetFunction("Subtract_VectorFloat"), @params);
    }
    public FVector4 Subtract_Vector4Vector4(ref FVector4 A, ref FVector4 B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector4>(GetFunction("Subtract_Vector4Vector4"), @params);
    }
    public FVector2D Subtract_Vector2DVector2D(FVector2D A, FVector2D B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector2D>(GetFunction("Subtract_Vector2DVector2D"), @params);
    }
    public FVector2D Subtract_Vector2DFloat(FVector2D A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector2D>(GetFunction("Subtract_Vector2DFloat"), @params);
    }
    public FTimespan Subtract_TimespanTimespan(FTimespan A, FTimespan B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FTimespan>(GetFunction("Subtract_TimespanTimespan"), @params);
    }
    public FQuat Subtract_QuatQuat(ref FQuat A, ref FQuat B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FQuat>(GetFunction("Subtract_QuatQuat"), @params);
    }
    public FLinearColor Subtract_LinearColorLinearColor(FLinearColor A, FLinearColor B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("Subtract_LinearColorLinearColor"), @params);
    }
    public FIntPoint Subtract_IntPointIntPoint(FIntPoint A, FIntPoint B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FIntPoint>(GetFunction("Subtract_IntPointIntPoint"), @params);
    }
    public FIntPoint Subtract_IntPointInt(FIntPoint A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FIntPoint>(GetFunction("Subtract_IntPointInt"), @params);
    }
    public int Subtract_IntInt(int A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<int>(GetFunction("Subtract_IntInt"), @params);
    }
    public long Subtract_Int64Int64(long A, long B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<long>(GetFunction("Subtract_Int64Int64"), @params);
    }
    public float Subtract_FloatFloat(float A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<float>(GetFunction("Subtract_FloatFloat"), @params);
    }
    public FDateTime Subtract_DateTimeTimespan(FDateTime A, FTimespan B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FDateTime>(GetFunction("Subtract_DateTimeTimespan"), @params);
    }
    public FTimespan Subtract_DateTimeDateTime(FDateTime A, FDateTime B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FTimespan>(GetFunction("Subtract_DateTimeDateTime"), @params);
    }
    public byte Subtract_ByteByte(byte A, byte B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<byte>(GetFunction("Subtract_ByteByte"), @params);
    }
    public float Square(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Square"), @params);
    }
    public float Sqrt(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Sqrt"), @params);
    }
    public FVector Spherical2DToUnitCartesian(FVector2D A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FVector>(GetFunction("Spherical2DToUnitCartesian"), @params);
    }
    public float Sin(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Sin"), @params);
    }
    public long SignOfInteger64(long A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<long>(GetFunction("SignOfInteger64"), @params);
    }
    public int SignOfInteger(int A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("SignOfInteger"), @params);
    }
    public float SignOfFloat(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("SignOfFloat"), @params);
    }
    public void SetRandomStreamSeed(ref FRandomStream Stream, int NewSeed)
    {
        Span<(string name, object value)> @params = [
            ("Stream", Stream), 
            ("NewSeed", NewSeed)
        ];
        ProcessEvent(GetFunction("SetRandomStreamSeed"), @params);
    }
    public void Set2D(ref FVector2D A, float X, float Y)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("X", X), 
            ("Y", Y)
        ];
        ProcessEvent(GetFunction("Set2D"), @params);
    }
    public FVector SelectVector(FVector A, FVector B, bool bPickA)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("bPickA", bPickA)
        ];
        return ProcessEvent<FVector>(GetFunction("SelectVector"), @params);
    }
    public FTransform SelectTransform(ref FTransform A, ref FTransform B, bool bPickA)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("bPickA", bPickA)
        ];
        return ProcessEvent<FTransform>(GetFunction("SelectTransform"), @params);
    }
    public FString SelectString(FString A, FString B, bool bPickA)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("bPickA", bPickA)
        ];
        return ProcessEvent<FString>(GetFunction("SelectString"), @params);
    }
    public FRotator SelectRotator(FRotator A, FRotator B, bool bPickA)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("bPickA", bPickA)
        ];
        return ProcessEvent<FRotator>(GetFunction("SelectRotator"), @params);
    }
    public UObject* SelectObject(UObject* A, UObject* B, bool bSelectA)
    {
        Span<(string name, object value)> @params = [
            ("A", (IntPtr)A), 
            ("B", (IntPtr)B), 
            ("bSelectA", bSelectA)
        ];
        return (UObject*)ProcessEvent<IntPtr>(GetFunction("SelectObject"), @params);
    }
    public int SelectInt(int A, int B, bool bPickA)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("bPickA", bPickA)
        ];
        return ProcessEvent<int>(GetFunction("SelectInt"), @params);
    }
    public float SelectFloat(float A, float B, bool bPickA)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("bPickA", bPickA)
        ];
        return ProcessEvent<float>(GetFunction("SelectFloat"), @params);
    }
    public FLinearColor SelectColor(FLinearColor A, FLinearColor B, bool bPickA)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("bPickA", bPickA)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("SelectColor"), @params);
    }
    public UClass* SelectClass(UClass* A, UClass* B, bool bSelectA)
    {
        Span<(string name, object value)> @params = [
            ("A", (IntPtr)A), 
            ("B", (IntPtr)B), 
            ("bSelectA", bSelectA)
        ];
        return (UClass*)ProcessEvent<IntPtr>(GetFunction("SelectClass"), @params);
    }
    public void SeedRandomStream(ref FRandomStream Stream)
    {
        Span<(string name, object value)> @params = [
            ("Stream", Stream)
        ];
        ProcessEvent(GetFunction("SeedRandomStream"), @params);
    }
    public float SafeDivide(float A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<float>(GetFunction("SafeDivide"), @params);
    }
    public long Round64(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<long>(GetFunction("Round64"), @params);
    }
    public int Round(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("Round"), @params);
    }
    public FRotator RotatorFromAxisAndAngle(FVector Axis, float Angle)
    {
        Span<(string name, object value)> @params = [
            ("Axis", Axis), 
            ("Angle", Angle)
        ];
        return ProcessEvent<FRotator>(GetFunction("RotatorFromAxisAndAngle"), @params);
    }
    public FVector RotateAngleAxis(FVector InVect, float AngleDeg, FVector Axis)
    {
        Span<(string name, object value)> @params = [
            ("InVect", InVect), 
            ("AngleDeg", AngleDeg), 
            ("Axis", Axis)
        ];
        return ProcessEvent<FVector>(GetFunction("RotateAngleAxis"), @params);
    }
    public FRotator RLerp(FRotator A, FRotator B, float Alpha, bool bShortestPath)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Alpha", Alpha), 
            ("bShortestPath", bShortestPath)
        ];
        return ProcessEvent<FRotator>(GetFunction("RLerp"), @params);
    }
    public FRotator RInterpTo_Constant(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed)
    {
        Span<(string name, object value)> @params = [
            ("Current", Current), 
            ("Target", Target), 
            ("DeltaTime", DeltaTime), 
            ("InterpSpeed", InterpSpeed)
        ];
        return ProcessEvent<FRotator>(GetFunction("RInterpTo_Constant"), @params);
    }
    public FRotator RInterpTo(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed)
    {
        Span<(string name, object value)> @params = [
            ("Current", Current), 
            ("Target", Target), 
            ("DeltaTime", DeltaTime), 
            ("InterpSpeed", InterpSpeed)
        ];
        return ProcessEvent<FRotator>(GetFunction("RInterpTo"), @params);
    }
    public void RGBToHSV_Vector(FLinearColor RGB, ref FLinearColor HSV)
    {
        Span<(string name, object value)> @params = [
            ("RGB", RGB), 
            ("HSV", HSV)
        ];
        ProcessEvent(GetFunction("RGBToHSV_Vector"), @params);
    }
    public void RGBToHSV(FLinearColor InColor, ref float H, ref float S, ref float V, ref float A)
    {
        Span<(string name, object value)> @params = [
            ("InColor", InColor), 
            ("H", H), 
            ("S", S), 
            ("V", V), 
            ("A", A)
        ];
        ProcessEvent(GetFunction("RGBToHSV"), @params);
    }
    public FLinearColor RGBLinearToHSV(FLinearColor RGB)
    {
        Span<(string name, object value)> @params = [
            ("RGB", RGB)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("RGBLinearToHSV"), @params);
    }
    public void ResetVectorSpringState(ref FVectorSpringState SpringState)
    {
        Span<(string name, object value)> @params = [
            ("SpringState", SpringState)
        ];
        ProcessEvent(GetFunction("ResetVectorSpringState"), @params);
    }
    public void ResetRandomStream(ref FRandomStream Stream)
    {
        Span<(string name, object value)> @params = [
            ("Stream", Stream)
        ];
        ProcessEvent(GetFunction("ResetRandomStream"), @params);
    }
    public void ResetFloatSpringState(ref FFloatSpringState SpringState)
    {
        Span<(string name, object value)> @params = [
            ("SpringState", SpringState)
        ];
        ProcessEvent(GetFunction("ResetFloatSpringState"), @params);
    }
    public FRotator REase(FRotator A, FRotator B, float Alpha, bool bShortestPath, EEasingFunc EasingFunc, float BlendExp, int Steps)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Alpha", Alpha), 
            ("bShortestPath", bShortestPath), 
            ("EasingFunc", EasingFunc), 
            ("BlendExp", BlendExp), 
            ("Steps", Steps)
        ];
        return ProcessEvent<FRotator>(GetFunction("REase"), @params);
    }
    public FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(ref FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians, ref FRandomStream Stream)
    {
        Span<(string name, object value)> @params = [
            ("ConeDir", ConeDir), 
            ("MaxYawInRadians", MaxYawInRadians), 
            ("MaxPitchInRadians", MaxPitchInRadians), 
            ("Stream", Stream)
        ];
        return ProcessEvent<FVector>(GetFunction("RandomUnitVectorInEllipticalConeInRadiansFromStream"), @params);
    }
    public FVector RandomUnitVectorInEllipticalConeInRadians(FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians)
    {
        Span<(string name, object value)> @params = [
            ("ConeDir", ConeDir), 
            ("MaxYawInRadians", MaxYawInRadians), 
            ("MaxPitchInRadians", MaxPitchInRadians)
        ];
        return ProcessEvent<FVector>(GetFunction("RandomUnitVectorInEllipticalConeInRadians"), @params);
    }
    public FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(ref FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, ref FRandomStream Stream)
    {
        Span<(string name, object value)> @params = [
            ("ConeDir", ConeDir), 
            ("MaxYawInDegrees", MaxYawInDegrees), 
            ("MaxPitchInDegrees", MaxPitchInDegrees), 
            ("Stream", Stream)
        ];
        return ProcessEvent<FVector>(GetFunction("RandomUnitVectorInEllipticalConeInDegreesFromStream"), @params);
    }
    public FVector RandomUnitVectorInEllipticalConeInDegrees(FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees)
    {
        Span<(string name, object value)> @params = [
            ("ConeDir", ConeDir), 
            ("MaxYawInDegrees", MaxYawInDegrees), 
            ("MaxPitchInDegrees", MaxPitchInDegrees)
        ];
        return ProcessEvent<FVector>(GetFunction("RandomUnitVectorInEllipticalConeInDegrees"), @params);
    }
    public FVector RandomUnitVectorInConeInRadiansFromStream(ref FVector ConeDir, float ConeHalfAngleInRadians, ref FRandomStream Stream)
    {
        Span<(string name, object value)> @params = [
            ("ConeDir", ConeDir), 
            ("ConeHalfAngleInRadians", ConeHalfAngleInRadians), 
            ("Stream", Stream)
        ];
        return ProcessEvent<FVector>(GetFunction("RandomUnitVectorInConeInRadiansFromStream"), @params);
    }
    public FVector RandomUnitVectorInConeInRadians(FVector ConeDir, float ConeHalfAngleInRadians)
    {
        Span<(string name, object value)> @params = [
            ("ConeDir", ConeDir), 
            ("ConeHalfAngleInRadians", ConeHalfAngleInRadians)
        ];
        return ProcessEvent<FVector>(GetFunction("RandomUnitVectorInConeInRadians"), @params);
    }
    public FVector RandomUnitVectorInConeInDegreesFromStream(ref FVector ConeDir, float ConeHalfAngleInDegrees, ref FRandomStream Stream)
    {
        Span<(string name, object value)> @params = [
            ("ConeDir", ConeDir), 
            ("ConeHalfAngleInDegrees", ConeHalfAngleInDegrees), 
            ("Stream", Stream)
        ];
        return ProcessEvent<FVector>(GetFunction("RandomUnitVectorInConeInDegreesFromStream"), @params);
    }
    public FVector RandomUnitVectorInConeInDegrees(FVector ConeDir, float ConeHalfAngleInDegrees)
    {
        Span<(string name, object value)> @params = [
            ("ConeDir", ConeDir), 
            ("ConeHalfAngleInDegrees", ConeHalfAngleInDegrees)
        ];
        return ProcessEvent<FVector>(GetFunction("RandomUnitVectorInConeInDegrees"), @params);
    }
    public FVector RandomUnitVectorFromStream(ref FRandomStream Stream)
    {
        Span<(string name, object value)> @params = [
            ("Stream", Stream)
        ];
        return ProcessEvent<FVector>(GetFunction("RandomUnitVectorFromStream"), @params);
    }
    public FVector RandomUnitVector()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FVector>(GetFunction("RandomUnitVector"), @params);
    }
    public FRotator RandomRotatorFromStream(bool bRoll, ref FRandomStream Stream)
    {
        Span<(string name, object value)> @params = [
            ("bRoll", bRoll), 
            ("Stream", Stream)
        ];
        return ProcessEvent<FRotator>(GetFunction("RandomRotatorFromStream"), @params);
    }
    public FRotator RandomRotator(bool bRoll)
    {
        Span<(string name, object value)> @params = [
            ("bRoll", bRoll)
        ];
        return ProcessEvent<FRotator>(GetFunction("RandomRotator"), @params);
    }
    public FVector RandomPointInBoundingBox(FVector Origin, FVector BoxExtent)
    {
        Span<(string name, object value)> @params = [
            ("Origin", Origin), 
            ("BoxExtent", BoxExtent)
        ];
        return ProcessEvent<FVector>(GetFunction("RandomPointInBoundingBox"), @params);
    }
    public int RandomIntegerInRangeFromStream(int Min, int Max, ref FRandomStream Stream)
    {
        Span<(string name, object value)> @params = [
            ("Min", Min), 
            ("Max", Max), 
            ("Stream", Stream)
        ];
        return ProcessEvent<int>(GetFunction("RandomIntegerInRangeFromStream"), @params);
    }
    public int RandomIntegerInRange(int Min, int Max)
    {
        Span<(string name, object value)> @params = [
            ("Min", Min), 
            ("Max", Max)
        ];
        return ProcessEvent<int>(GetFunction("RandomIntegerInRange"), @params);
    }
    public int RandomIntegerFromStream(int Max, ref FRandomStream Stream)
    {
        Span<(string name, object value)> @params = [
            ("Max", Max), 
            ("Stream", Stream)
        ];
        return ProcessEvent<int>(GetFunction("RandomIntegerFromStream"), @params);
    }
    public long RandomInteger64InRange(long Min, long Max)
    {
        Span<(string name, object value)> @params = [
            ("Min", Min), 
            ("Max", Max)
        ];
        return ProcessEvent<long>(GetFunction("RandomInteger64InRange"), @params);
    }
    public long RandomInteger64(long Max)
    {
        Span<(string name, object value)> @params = [
            ("Max", Max)
        ];
        return ProcessEvent<long>(GetFunction("RandomInteger64"), @params);
    }
    public int RandomInteger(int Max)
    {
        Span<(string name, object value)> @params = [
            ("Max", Max)
        ];
        return ProcessEvent<int>(GetFunction("RandomInteger"), @params);
    }
    public float RandomFloatInRangeFromStream(float Min, float Max, ref FRandomStream Stream)
    {
        Span<(string name, object value)> @params = [
            ("Min", Min), 
            ("Max", Max), 
            ("Stream", Stream)
        ];
        return ProcessEvent<float>(GetFunction("RandomFloatInRangeFromStream"), @params);
    }
    public float RandomFloatInRange(float Min, float Max)
    {
        Span<(string name, object value)> @params = [
            ("Min", Min), 
            ("Max", Max)
        ];
        return ProcessEvent<float>(GetFunction("RandomFloatInRange"), @params);
    }
    public float RandomFloatFromStream(ref FRandomStream Stream)
    {
        Span<(string name, object value)> @params = [
            ("Stream", Stream)
        ];
        return ProcessEvent<float>(GetFunction("RandomFloatFromStream"), @params);
    }
    public float RandomFloat()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("RandomFloat"), @params);
    }
    public bool RandomBoolWithWeightFromStream(float Weight, ref FRandomStream RandomStream)
    {
        Span<(string name, object value)> @params = [
            ("Weight", Weight), 
            ("RandomStream", RandomStream)
        ];
        return ProcessEvent<bool>(GetFunction("RandomBoolWithWeightFromStream"), @params);
    }
    public bool RandomBoolWithWeight(float Weight)
    {
        Span<(string name, object value)> @params = [
            ("Weight", Weight)
        ];
        return ProcessEvent<bool>(GetFunction("RandomBoolWithWeight"), @params);
    }
    public bool RandomBoolFromStream(ref FRandomStream Stream)
    {
        Span<(string name, object value)> @params = [
            ("Stream", Stream)
        ];
        return ProcessEvent<bool>(GetFunction("RandomBoolFromStream"), @params);
    }
    public bool RandomBool()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("RandomBool"), @params);
    }
    public float RadiansToDegrees(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("RadiansToDegrees"), @params);
    }
    public FVector Quat_VectorUp(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<FVector>(GetFunction("Quat_VectorUp"), @params);
    }
    public FVector Quat_VectorRight(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<FVector>(GetFunction("Quat_VectorRight"), @params);
    }
    public FVector Quat_VectorForward(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<FVector>(GetFunction("Quat_VectorForward"), @params);
    }
    public FVector Quat_UnrotateVector(ref FQuat Q, ref FVector V)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q), 
            ("V", V)
        ];
        return ProcessEvent<FVector>(GetFunction("Quat_UnrotateVector"), @params);
    }
    public float Quat_SizeSquared(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<float>(GetFunction("Quat_SizeSquared"), @params);
    }
    public float Quat_Size(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<float>(GetFunction("Quat_Size"), @params);
    }
    public void Quat_SetFromEuler(ref FQuat Q, ref FVector Euler)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q), 
            ("Euler", Euler)
        ];
        ProcessEvent(GetFunction("Quat_SetFromEuler"), @params);
    }
    public void Quat_SetComponents(ref FQuat Q, float X, float Y, float Z, float W)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q), 
            ("X", X), 
            ("Y", Y), 
            ("Z", Z), 
            ("W", W)
        ];
        ProcessEvent(GetFunction("Quat_SetComponents"), @params);
    }
    public FRotator Quat_Rotator(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<FRotator>(GetFunction("Quat_Rotator"), @params);
    }
    public FVector Quat_RotateVector(ref FQuat Q, ref FVector V)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q), 
            ("V", V)
        ];
        return ProcessEvent<FVector>(GetFunction("Quat_RotateVector"), @params);
    }
    public FQuat Quat_Normalized(ref FQuat Q, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q), 
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<FQuat>(GetFunction("Quat_Normalized"), @params);
    }
    public void Quat_Normalize(ref FQuat Q, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q), 
            ("Tolerance", Tolerance)
        ];
        ProcessEvent(GetFunction("Quat_Normalize"), @params);
    }
    public FQuat Quat_MakeFromEuler(ref FVector Euler)
    {
        Span<(string name, object value)> @params = [
            ("Euler", Euler)
        ];
        return ProcessEvent<FQuat>(GetFunction("Quat_MakeFromEuler"), @params);
    }
    public FQuat Quat_Log(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<FQuat>(GetFunction("Quat_Log"), @params);
    }
    public bool Quat_IsNormalized(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<bool>(GetFunction("Quat_IsNormalized"), @params);
    }
    public bool Quat_IsNonFinite(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<bool>(GetFunction("Quat_IsNonFinite"), @params);
    }
    public bool Quat_IsIdentity(ref FQuat Q, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q), 
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<bool>(GetFunction("Quat_IsIdentity"), @params);
    }
    public bool Quat_IsFinite(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<bool>(GetFunction("Quat_IsFinite"), @params);
    }
    public FQuat Quat_Inversed(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<FQuat>(GetFunction("Quat_Inversed"), @params);
    }
    public FQuat Quat_Identity()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FQuat>(GetFunction("Quat_Identity"), @params);
    }
    public FVector Quat_GetRotationAxis(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<FVector>(GetFunction("Quat_GetRotationAxis"), @params);
    }
    public FVector Quat_GetAxisZ(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<FVector>(GetFunction("Quat_GetAxisZ"), @params);
    }
    public FVector Quat_GetAxisY(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<FVector>(GetFunction("Quat_GetAxisY"), @params);
    }
    public FVector Quat_GetAxisX(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<FVector>(GetFunction("Quat_GetAxisX"), @params);
    }
    public float Quat_GetAngle(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<float>(GetFunction("Quat_GetAngle"), @params);
    }
    public FQuat Quat_Exp(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<FQuat>(GetFunction("Quat_Exp"), @params);
    }
    public FVector Quat_Euler(ref FQuat Q)
    {
        Span<(string name, object value)> @params = [
            ("Q", Q)
        ];
        return ProcessEvent<FVector>(GetFunction("Quat_Euler"), @params);
    }
    public void Quat_EnforceShortestArcWith(ref FQuat A, ref FQuat B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        ProcessEvent(GetFunction("Quat_EnforceShortestArcWith"), @params);
    }
    public float Quat_AngularDistance(ref FQuat A, ref FQuat B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<float>(GetFunction("Quat_AngularDistance"), @params);
    }
    public FVector ProjectVectorOnToVector(FVector V, FVector Target)
    {
        Span<(string name, object value)> @params = [
            ("V", V), 
            ("Target", Target)
        ];
        return ProcessEvent<FVector>(GetFunction("ProjectVectorOnToVector"), @params);
    }
    public FVector ProjectVectorOnToPlane(FVector V, FVector PlaneNormal)
    {
        Span<(string name, object value)> @params = [
            ("V", V), 
            ("PlaneNormal", PlaneNormal)
        ];
        return ProcessEvent<FVector>(GetFunction("ProjectVectorOnToPlane"), @params);
    }
    public FVector ProjectPointOnToPlane(FVector Point, FVector PlaneBase, FVector PlaneNormal)
    {
        Span<(string name, object value)> @params = [
            ("Point", Point), 
            ("PlaneBase", PlaneBase), 
            ("PlaneNormal", PlaneNormal)
        ];
        return ProcessEvent<FVector>(GetFunction("ProjectPointOnToPlane"), @params);
    }
    public bool PointsAreCoplanar(ref TArray<FVector> Points, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("Points", Points), 
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<bool>(GetFunction("PointsAreCoplanar"), @params);
    }
    public float PerlinNoise1D(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        return ProcessEvent<float>(GetFunction("PerlinNoise1D"), @params);
    }
    public int Percent_IntInt(int A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<int>(GetFunction("Percent_IntInt"), @params);
    }
    public float Percent_FloatFloat(float A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<float>(GetFunction("Percent_FloatFloat"), @params);
    }
    public byte Percent_ByteByte(byte A, byte B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<byte>(GetFunction("Percent_ByteByte"), @params);
    }
    public int Or_IntInt(int A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<int>(GetFunction("Or_IntInt"), @params);
    }
    public long Or_Int64Int64(long A, long B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<long>(GetFunction("Or_Int64Int64"), @params);
    }
    public FDateTime Now()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FDateTime>(GetFunction("Now"), @params);
    }
    public bool NotEqualExactly_VectorVector(FVector A, FVector B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqualExactly_VectorVector"), @params);
    }
    public bool NotEqualExactly_Vector4Vector4(ref FVector4 A, ref FVector4 B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqualExactly_Vector4Vector4"), @params);
    }
    public bool NotEqualExactly_Vector2DVector2D(FVector2D A, FVector2D B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqualExactly_Vector2DVector2D"), @params);
    }
    public bool NotEqual_VectorVector(FVector A, FVector B, float ErrorTolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("ErrorTolerance", ErrorTolerance)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_VectorVector"), @params);
    }
    public bool NotEqual_Vector4Vector4(ref FVector4 A, ref FVector4 B, float ErrorTolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("ErrorTolerance", ErrorTolerance)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_Vector4Vector4"), @params);
    }
    public bool NotEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("ErrorTolerance", ErrorTolerance)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_Vector2DVector2D"), @params);
    }
    public bool NotEqual_TimespanTimespan(FTimespan A, FTimespan B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_TimespanTimespan"), @params);
    }
    public bool NotEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("ErrorTolerance", ErrorTolerance)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_RotatorRotator"), @params);
    }
    public bool NotEqual_QuatQuat(ref FQuat A, ref FQuat B, float ErrorTolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("ErrorTolerance", ErrorTolerance)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_QuatQuat"), @params);
    }
    public bool NotEqual_ObjectObject(UObject* A, UObject* B)
    {
        Span<(string name, object value)> @params = [
            ("A", (IntPtr)A), 
            ("B", (IntPtr)B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_ObjectObject"), @params);
    }
    public bool NotEqual_NameName(FName A, FName B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_NameName"), @params);
    }
    public bool NotEqual_MatrixMatrix(ref FMatrix A, ref FMatrix B, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_MatrixMatrix"), @params);
    }
    public bool NotEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_LinearColorLinearColor"), @params);
    }
    public bool NotEqual_IntPointIntPoint(FIntPoint A, FIntPoint B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_IntPointIntPoint"), @params);
    }
    public bool NotEqual_IntInt(int A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_IntInt"), @params);
    }
    public bool NotEqual_Int64Int64(long A, long B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_Int64Int64"), @params);
    }
    public bool NotEqual_FloatFloat(float A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_FloatFloat"), @params);
    }
    public bool NotEqual_DateTimeDateTime(FDateTime A, FDateTime B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_DateTimeDateTime"), @params);
    }
    public bool NotEqual_ClassClass(UClass* A, UClass* B)
    {
        Span<(string name, object value)> @params = [
            ("A", (IntPtr)A), 
            ("B", (IntPtr)B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_ClassClass"), @params);
    }
    public bool NotEqual_ByteByte(byte A, byte B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_ByteByte"), @params);
    }
    public bool NotEqual_BoolBool(bool A, bool B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_BoolBool"), @params);
    }
    public bool Not_PreBool(bool A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<bool>(GetFunction("Not_PreBool"), @params);
    }
    public long Not_Int64(long A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<long>(GetFunction("Not_Int64"), @params);
    }
    public int Not_Int(int A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("Not_Int"), @params);
    }
    public FVector2D NormalSafe2D(FVector2D A, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<FVector2D>(GetFunction("NormalSafe2D"), @params);
    }
    public float NormalizeToRange(float Value, float RangeMin, float RangeMax)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("RangeMin", RangeMin), 
            ("RangeMax", RangeMax)
        ];
        return ProcessEvent<float>(GetFunction("NormalizeToRange"), @params);
    }
    public FRotator NormalizedDeltaRotator(FRotator A, FRotator B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FRotator>(GetFunction("NormalizedDeltaRotator"), @params);
    }
    public float NormalizeAxis(float Angle)
    {
        Span<(string name, object value)> @params = [
            ("Angle", Angle)
        ];
        return ProcessEvent<float>(GetFunction("NormalizeAxis"), @params);
    }
    public void Normalize2D(ref FVector2D A, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Tolerance", Tolerance)
        ];
        ProcessEvent(GetFunction("Normalize2D"), @params);
    }
    public FVector2D Normal2D(FVector2D A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FVector2D>(GetFunction("Normal2D"), @params);
    }
    public FVector Normal(FVector A, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<FVector>(GetFunction("Normal"), @params);
    }
    public FVector NegateVector(FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FVector>(GetFunction("NegateVector"), @params);
    }
    public FRotator NegateRotator(FRotator A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FRotator>(GetFunction("NegateRotator"), @params);
    }
    public FVector2D Negated2D(ref FVector2D A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FVector2D>(GetFunction("Negated2D"), @params);
    }
    public bool NearlyEqual_TransformTransform(ref FTransform A, ref FTransform B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("LocationTolerance", LocationTolerance), 
            ("RotationTolerance", RotationTolerance), 
            ("Scale3DTolerance", Scale3DTolerance)
        ];
        return ProcessEvent<bool>(GetFunction("NearlyEqual_TransformTransform"), @params);
    }
    public bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("ErrorTolerance", ErrorTolerance)
        ];
        return ProcessEvent<bool>(GetFunction("NearlyEqual_FloatFloat"), @params);
    }
    public float MultiplyMultiply_FloatFloat(float Base, float Exp)
    {
        Span<(string name, object value)> @params = [
            ("Base", Base), 
            ("Exp", Exp)
        ];
        return ProcessEvent<float>(GetFunction("MultiplyMultiply_FloatFloat"), @params);
    }
    public float MultiplyByPi(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        return ProcessEvent<float>(GetFunction("MultiplyByPi"), @params);
    }
    public FVector Multiply_VectorVector(FVector A, FVector B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector>(GetFunction("Multiply_VectorVector"), @params);
    }
    public FVector Multiply_VectorInt(FVector A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector>(GetFunction("Multiply_VectorInt"), @params);
    }
    public FVector Multiply_VectorFloat(FVector A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector>(GetFunction("Multiply_VectorFloat"), @params);
    }
    public FVector4 Multiply_Vector4Vector4(ref FVector4 A, ref FVector4 B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector4>(GetFunction("Multiply_Vector4Vector4"), @params);
    }
    public FVector2D Multiply_Vector2DVector2D(FVector2D A, FVector2D B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector2D>(GetFunction("Multiply_Vector2DVector2D"), @params);
    }
    public FVector2D Multiply_Vector2DFloat(FVector2D A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector2D>(GetFunction("Multiply_Vector2DFloat"), @params);
    }
    public FTimespan Multiply_TimespanFloat(FTimespan A, float Scalar)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Scalar", Scalar)
        ];
        return ProcessEvent<FTimespan>(GetFunction("Multiply_TimespanFloat"), @params);
    }
    public FRotator Multiply_RotatorInt(FRotator A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FRotator>(GetFunction("Multiply_RotatorInt"), @params);
    }
    public FRotator Multiply_RotatorFloat(FRotator A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FRotator>(GetFunction("Multiply_RotatorFloat"), @params);
    }
    public FQuat Multiply_QuatQuat(ref FQuat A, ref FQuat B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FQuat>(GetFunction("Multiply_QuatQuat"), @params);
    }
    public FMatrix Multiply_MatrixMatrix(ref FMatrix A, ref FMatrix B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FMatrix>(GetFunction("Multiply_MatrixMatrix"), @params);
    }
    public FMatrix Multiply_MatrixFloat(ref FMatrix A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FMatrix>(GetFunction("Multiply_MatrixFloat"), @params);
    }
    public FLinearColor Multiply_LinearColorLinearColor(FLinearColor A, FLinearColor B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("Multiply_LinearColorLinearColor"), @params);
    }
    public FLinearColor Multiply_LinearColorFloat(FLinearColor A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("Multiply_LinearColorFloat"), @params);
    }
    public FIntPoint Multiply_IntPointIntPoint(FIntPoint A, FIntPoint B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FIntPoint>(GetFunction("Multiply_IntPointIntPoint"), @params);
    }
    public FIntPoint Multiply_IntPointInt(FIntPoint A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FIntPoint>(GetFunction("Multiply_IntPointInt"), @params);
    }
    public int Multiply_IntInt(int A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<int>(GetFunction("Multiply_IntInt"), @params);
    }
    public float Multiply_IntFloat(int A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<float>(GetFunction("Multiply_IntFloat"), @params);
    }
    public long Multiply_Int64Int64(long A, long B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<long>(GetFunction("Multiply_Int64Int64"), @params);
    }
    public float Multiply_FloatFloat(float A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<float>(GetFunction("Multiply_FloatFloat"), @params);
    }
    public byte Multiply_ByteByte(byte A, byte B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<byte>(GetFunction("Multiply_ByteByte"), @params);
    }
    public FVector MirrorVectorByNormal(FVector InVect, FVector InNormal)
    {
        Span<(string name, object value)> @params = [
            ("InVect", InVect), 
            ("InNormal", InNormal)
        ];
        return ProcessEvent<FVector>(GetFunction("MirrorVectorByNormal"), @params);
    }
    public void MinOfIntArray(ref TArray<int> IntArray, ref int IndexOfMinValue, ref int MinValue)
    {
        Span<(string name, object value)> @params = [
            ("IntArray", IntArray), 
            ("IndexOfMinValue", IndexOfMinValue), 
            ("MinValue", MinValue)
        ];
        ProcessEvent(GetFunction("MinOfIntArray"), @params);
    }
    public void MinOfFloatArray(ref TArray<float> FloatArray, ref int IndexOfMinValue, ref float MinValue)
    {
        Span<(string name, object value)> @params = [
            ("FloatArray", FloatArray), 
            ("IndexOfMinValue", IndexOfMinValue), 
            ("MinValue", MinValue)
        ];
        ProcessEvent(GetFunction("MinOfFloatArray"), @params);
    }
    public void MinOfByteArray(ref TArray<byte> ByteArray, ref int IndexOfMinValue, ref byte MinValue)
    {
        Span<(string name, object value)> @params = [
            ("ByteArray", ByteArray), 
            ("IndexOfMinValue", IndexOfMinValue), 
            ("MinValue", MinValue)
        ];
        ProcessEvent(GetFunction("MinOfByteArray"), @params);
    }
    public long MinInt64(long A, long B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<long>(GetFunction("MinInt64"), @params);
    }
    public void MinimumAreaRectangle(UObject* WorldContextObject, ref TArray<FVector> InVerts, ref FVector SampleSurfaceNormal, ref FVector OutRectCenter, ref FRotator OutRectRotation, ref float OutSideLengthX, ref float OutSideLengthY, bool bDebugDraw)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("InVerts", InVerts), 
            ("SampleSurfaceNormal", SampleSurfaceNormal), 
            ("OutRectCenter", OutRectCenter), 
            ("OutRectRotation", OutRectRotation), 
            ("OutSideLengthX", OutSideLengthX), 
            ("OutSideLengthY", OutSideLengthY), 
            ("bDebugDraw", bDebugDraw)
        ];
        ProcessEvent(GetFunction("MinimumAreaRectangle"), @params);
    }
    public int Min(int A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<int>(GetFunction("Min"), @params);
    }
    public void MaxOfIntArray(ref TArray<int> IntArray, ref int IndexOfMaxValue, ref int MaxValue)
    {
        Span<(string name, object value)> @params = [
            ("IntArray", IntArray), 
            ("IndexOfMaxValue", IndexOfMaxValue), 
            ("MaxValue", MaxValue)
        ];
        ProcessEvent(GetFunction("MaxOfIntArray"), @params);
    }
    public void MaxOfFloatArray(ref TArray<float> FloatArray, ref int IndexOfMaxValue, ref float MaxValue)
    {
        Span<(string name, object value)> @params = [
            ("FloatArray", FloatArray), 
            ("IndexOfMaxValue", IndexOfMaxValue), 
            ("MaxValue", MaxValue)
        ];
        ProcessEvent(GetFunction("MaxOfFloatArray"), @params);
    }
    public void MaxOfByteArray(ref TArray<byte> ByteArray, ref int IndexOfMaxValue, ref byte MaxValue)
    {
        Span<(string name, object value)> @params = [
            ("ByteArray", ByteArray), 
            ("IndexOfMaxValue", IndexOfMaxValue), 
            ("MaxValue", MaxValue)
        ];
        ProcessEvent(GetFunction("MaxOfByteArray"), @params);
    }
    public long MaxInt64(long A, long B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<long>(GetFunction("MaxInt64"), @params);
    }
    public int Max(int A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<int>(GetFunction("Max"), @params);
    }
    public FVector4 Matrix_TransformVector4(ref FMatrix M, FVector4 V)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("V", V)
        ];
        return ProcessEvent<FVector4>(GetFunction("Matrix_TransformVector4"), @params);
    }
    public FVector4 Matrix_TransformVector(ref FMatrix M, FVector V)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("V", V)
        ];
        return ProcessEvent<FVector4>(GetFunction("Matrix_TransformVector"), @params);
    }
    public FVector4 Matrix_TransformPosition(ref FMatrix M, FVector V)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("V", V)
        ];
        return ProcessEvent<FVector4>(GetFunction("Matrix_TransformPosition"), @params);
    }
    public FQuat Matrix_ToQuat(ref FMatrix M)
    {
        Span<(string name, object value)> @params = [
            ("M", M)
        ];
        return ProcessEvent<FQuat>(GetFunction("Matrix_ToQuat"), @params);
    }
    public void Matrix_SetOrigin(ref FMatrix M, FVector NewOrigin)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("NewOrigin", NewOrigin)
        ];
        ProcessEvent(GetFunction("Matrix_SetOrigin"), @params);
    }
    public void Matrix_SetColumn(ref FMatrix M, EMatrixColumns Column, FVector Value)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("Column", Column), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("Matrix_SetColumn"), @params);
    }
    public void Matrix_SetAxis(ref FMatrix M, EAxis Axis, FVector AxisVector)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("Axis", Axis), 
            ("AxisVector", AxisVector)
        ];
        ProcessEvent(GetFunction("Matrix_SetAxis"), @params);
    }
    public FMatrix Matrix_ScaleTranslation(ref FMatrix M, FVector Scale3D)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("Scale3D", Scale3D)
        ];
        return ProcessEvent<FMatrix>(GetFunction("Matrix_ScaleTranslation"), @params);
    }
    public FMatrix Matrix_RemoveTranslation(ref FMatrix M)
    {
        Span<(string name, object value)> @params = [
            ("M", M)
        ];
        return ProcessEvent<FMatrix>(GetFunction("Matrix_RemoveTranslation"), @params);
    }
    public void Matrix_RemoveScaling(ref FMatrix M, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("Tolerance", Tolerance)
        ];
        ProcessEvent(GetFunction("Matrix_RemoveScaling"), @params);
    }
    public FMatrix Matrix_Mirror(ref FMatrix M, EAxis MirrorAxis, EAxis FlipAxis)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("MirrorAxis", MirrorAxis), 
            ("FlipAxis", FlipAxis)
        ];
        return ProcessEvent<FMatrix>(GetFunction("Matrix_Mirror"), @params);
    }
    public FVector Matrix_InverseTransformVector(ref FMatrix M, FVector V)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("V", V)
        ];
        return ProcessEvent<FVector>(GetFunction("Matrix_InverseTransformVector"), @params);
    }
    public FVector Matrix_InverseTransformPosition(ref FMatrix M, FVector V)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("V", V)
        ];
        return ProcessEvent<FVector>(GetFunction("Matrix_InverseTransformPosition"), @params);
    }
    public FMatrix Matrix_Identity()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FMatrix>(GetFunction("Matrix_Identity"), @params);
    }
    public FVector Matrix_GetUnitAxis(ref FMatrix M, EAxis Axis)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("Axis", Axis)
        ];
        return ProcessEvent<FVector>(GetFunction("Matrix_GetUnitAxis"), @params);
    }
    public void Matrix_GetUnitAxes(ref FMatrix M, ref FVector X, ref FVector Y, ref FVector Z)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("X", X), 
            ("Y", Y), 
            ("Z", Z)
        ];
        ProcessEvent(GetFunction("Matrix_GetUnitAxes"), @params);
    }
    public FMatrix Matrix_GetTransposed(ref FMatrix M)
    {
        Span<(string name, object value)> @params = [
            ("M", M)
        ];
        return ProcessEvent<FMatrix>(GetFunction("Matrix_GetTransposed"), @params);
    }
    public FMatrix Matrix_GetTransposeAdjoint(ref FMatrix M)
    {
        Span<(string name, object value)> @params = [
            ("M", M)
        ];
        return ProcessEvent<FMatrix>(GetFunction("Matrix_GetTransposeAdjoint"), @params);
    }
    public FVector Matrix_GetScaleVector(ref FMatrix M, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<FVector>(GetFunction("Matrix_GetScaleVector"), @params);
    }
    public FVector Matrix_GetScaledAxis(ref FMatrix M, EAxis Axis)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("Axis", Axis)
        ];
        return ProcessEvent<FVector>(GetFunction("Matrix_GetScaledAxis"), @params);
    }
    public void Matrix_GetScaledAxes(ref FMatrix M, ref FVector X, ref FVector Y, ref FVector Z)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("X", X), 
            ("Y", Y), 
            ("Z", Z)
        ];
        ProcessEvent(GetFunction("Matrix_GetScaledAxes"), @params);
    }
    public float Matrix_GetRotDeterminant(ref FMatrix M)
    {
        Span<(string name, object value)> @params = [
            ("M", M)
        ];
        return ProcessEvent<float>(GetFunction("Matrix_GetRotDeterminant"), @params);
    }
    public FRotator Matrix_GetRotator(ref FMatrix M)
    {
        Span<(string name, object value)> @params = [
            ("M", M)
        ];
        return ProcessEvent<FRotator>(GetFunction("Matrix_GetRotator"), @params);
    }
    public FVector Matrix_GetOrigin(ref FMatrix InMatrix)
    {
        Span<(string name, object value)> @params = [
            ("InMatrix", InMatrix)
        ];
        return ProcessEvent<FVector>(GetFunction("Matrix_GetOrigin"), @params);
    }
    public float Matrix_GetMaximumAxisScale(ref FMatrix M)
    {
        Span<(string name, object value)> @params = [
            ("M", M)
        ];
        return ProcessEvent<float>(GetFunction("Matrix_GetMaximumAxisScale"), @params);
    }
    public FMatrix Matrix_GetMatrixWithoutScale(ref FMatrix M, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<FMatrix>(GetFunction("Matrix_GetMatrixWithoutScale"), @params);
    }
    public FMatrix Matrix_GetInverse(ref FMatrix M)
    {
        Span<(string name, object value)> @params = [
            ("M", M)
        ];
        return ProcessEvent<FMatrix>(GetFunction("Matrix_GetInverse"), @params);
    }
    public bool Matrix_GetFrustumTopPlane(ref FMatrix M, ref FPlane OutPlane)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("OutPlane", OutPlane)
        ];
        return ProcessEvent<bool>(GetFunction("Matrix_GetFrustumTopPlane"), @params);
    }
    public bool Matrix_GetFrustumRightPlane(ref FMatrix M, ref FPlane OutPlane)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("OutPlane", OutPlane)
        ];
        return ProcessEvent<bool>(GetFunction("Matrix_GetFrustumRightPlane"), @params);
    }
    public bool Matrix_GetFrustumNearPlane(ref FMatrix M, ref FPlane OutPlane)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("OutPlane", OutPlane)
        ];
        return ProcessEvent<bool>(GetFunction("Matrix_GetFrustumNearPlane"), @params);
    }
    public bool Matrix_GetFrustumLeftPlane(ref FMatrix M, ref FPlane OutPlane)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("OutPlane", OutPlane)
        ];
        return ProcessEvent<bool>(GetFunction("Matrix_GetFrustumLeftPlane"), @params);
    }
    public bool Matrix_GetFrustumFarPlane(ref FMatrix M, ref FPlane OutPlane)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("OutPlane", OutPlane)
        ];
        return ProcessEvent<bool>(GetFunction("Matrix_GetFrustumFarPlane"), @params);
    }
    public bool Matrix_GetFrustumBottomPlane(ref FMatrix M, ref FPlane OutPlane)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("OutPlane", OutPlane)
        ];
        return ProcessEvent<bool>(GetFunction("Matrix_GetFrustumBottomPlane"), @params);
    }
    public float Matrix_GetDeterminant(ref FMatrix M)
    {
        Span<(string name, object value)> @params = [
            ("M", M)
        ];
        return ProcessEvent<float>(GetFunction("Matrix_GetDeterminant"), @params);
    }
    public FVector Matrix_GetColumn(ref FMatrix M, EMatrixColumns Column)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("Column", Column)
        ];
        return ProcessEvent<FVector>(GetFunction("Matrix_GetColumn"), @params);
    }
    public bool Matrix_ContainsNaN(ref FMatrix M)
    {
        Span<(string name, object value)> @params = [
            ("M", M)
        ];
        return ProcessEvent<bool>(GetFunction("Matrix_ContainsNaN"), @params);
    }
    public FMatrix Matrix_ConcatenateTranslation(ref FMatrix M, FVector Translation)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("Translation", Translation)
        ];
        return ProcessEvent<FMatrix>(GetFunction("Matrix_ConcatenateTranslation"), @params);
    }
    public FMatrix Matrix_ApplyScale(ref FMatrix M, float Scale)
    {
        Span<(string name, object value)> @params = [
            ("M", M), 
            ("Scale", Scale)
        ];
        return ProcessEvent<FMatrix>(GetFunction("Matrix_ApplyScale"), @params);
    }
    public float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("InRangeA", InRangeA), 
            ("InRangeB", InRangeB), 
            ("OutRangeA", OutRangeA), 
            ("OutRangeB", OutRangeB)
        ];
        return ProcessEvent<float>(GetFunction("MapRangeUnclamped"), @params);
    }
    public float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("InRangeA", InRangeA), 
            ("InRangeB", InRangeB), 
            ("OutRangeA", OutRangeA), 
            ("OutRangeB", OutRangeB)
        ];
        return ProcessEvent<float>(GetFunction("MapRangeClamped"), @params);
    }
    public FVector4 MakeVector4(float X, float Y, float Z, float W)
    {
        Span<(string name, object value)> @params = [
            ("X", X), 
            ("Y", Y), 
            ("Z", Z), 
            ("W", W)
        ];
        return ProcessEvent<FVector4>(GetFunction("MakeVector4"), @params);
    }
    public FVector2D MakeVector2D(float X, float Y)
    {
        Span<(string name, object value)> @params = [
            ("X", X), 
            ("Y", Y)
        ];
        return ProcessEvent<FVector2D>(GetFunction("MakeVector2D"), @params);
    }
    public FVector MakeVector(float X, float Y, float Z)
    {
        Span<(string name, object value)> @params = [
            ("X", X), 
            ("Y", Y), 
            ("Z", Z)
        ];
        return ProcessEvent<FVector>(GetFunction("MakeVector"), @params);
    }
    public FTransform MakeTransform(FVector Location, FRotator Rotation, FVector Scale)
    {
        Span<(string name, object value)> @params = [
            ("Location", Location), 
            ("Rotation", Rotation), 
            ("Scale", Scale)
        ];
        return ProcessEvent<FTransform>(GetFunction("MakeTransform"), @params);
    }
    public FTimespan MakeTimespan2(int Days, int Hours, int Minutes, int Seconds, int FractionNano)
    {
        Span<(string name, object value)> @params = [
            ("Days", Days), 
            ("Hours", Hours), 
            ("Minutes", Minutes), 
            ("Seconds", Seconds), 
            ("FractionNano", FractionNano)
        ];
        return ProcessEvent<FTimespan>(GetFunction("MakeTimespan2"), @params);
    }
    public FTimespan MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds)
    {
        Span<(string name, object value)> @params = [
            ("Days", Days), 
            ("Hours", Hours), 
            ("Minutes", Minutes), 
            ("Seconds", Seconds), 
            ("Milliseconds", Milliseconds)
        ];
        return ProcessEvent<FTimespan>(GetFunction("MakeTimespan"), @params);
    }
    public FRotator MakeRotFromZY(ref FVector Z, ref FVector Y)
    {
        Span<(string name, object value)> @params = [
            ("Z", Z), 
            ("Y", Y)
        ];
        return ProcessEvent<FRotator>(GetFunction("MakeRotFromZY"), @params);
    }
    public FRotator MakeRotFromZX(ref FVector Z, ref FVector X)
    {
        Span<(string name, object value)> @params = [
            ("Z", Z), 
            ("X", X)
        ];
        return ProcessEvent<FRotator>(GetFunction("MakeRotFromZX"), @params);
    }
    public FRotator MakeRotFromZ(ref FVector Z)
    {
        Span<(string name, object value)> @params = [
            ("Z", Z)
        ];
        return ProcessEvent<FRotator>(GetFunction("MakeRotFromZ"), @params);
    }
    public FRotator MakeRotFromYZ(ref FVector Y, ref FVector Z)
    {
        Span<(string name, object value)> @params = [
            ("Y", Y), 
            ("Z", Z)
        ];
        return ProcessEvent<FRotator>(GetFunction("MakeRotFromYZ"), @params);
    }
    public FRotator MakeRotFromYX(ref FVector Y, ref FVector X)
    {
        Span<(string name, object value)> @params = [
            ("Y", Y), 
            ("X", X)
        ];
        return ProcessEvent<FRotator>(GetFunction("MakeRotFromYX"), @params);
    }
    public FRotator MakeRotFromY(ref FVector Y)
    {
        Span<(string name, object value)> @params = [
            ("Y", Y)
        ];
        return ProcessEvent<FRotator>(GetFunction("MakeRotFromY"), @params);
    }
    public FRotator MakeRotFromXZ(ref FVector X, ref FVector Z)
    {
        Span<(string name, object value)> @params = [
            ("X", X), 
            ("Z", Z)
        ];
        return ProcessEvent<FRotator>(GetFunction("MakeRotFromXZ"), @params);
    }
    public FRotator MakeRotFromXY(ref FVector X, ref FVector Y)
    {
        Span<(string name, object value)> @params = [
            ("X", X), 
            ("Y", Y)
        ];
        return ProcessEvent<FRotator>(GetFunction("MakeRotFromXY"), @params);
    }
    public FRotator MakeRotFromX(ref FVector X)
    {
        Span<(string name, object value)> @params = [
            ("X", X)
        ];
        return ProcessEvent<FRotator>(GetFunction("MakeRotFromX"), @params);
    }
    public FRotator MakeRotator(float Roll, float Pitch, float Yaw)
    {
        Span<(string name, object value)> @params = [
            ("Roll", Roll), 
            ("Pitch", Pitch), 
            ("Yaw", Yaw)
        ];
        return ProcessEvent<FRotator>(GetFunction("MakeRotator"), @params);
    }
    public FRotator MakeRotationFromAxes(FVector Forward, FVector Right, FVector Up)
    {
        Span<(string name, object value)> @params = [
            ("Forward", Forward), 
            ("Right", Right), 
            ("Up", Up)
        ];
        return ProcessEvent<FRotator>(GetFunction("MakeRotationFromAxes"), @params);
    }
    public FTransform MakeRelativeTransform(ref FTransform A, ref FTransform RelativeTo)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("RelativeTo", RelativeTo)
        ];
        return ProcessEvent<FTransform>(GetFunction("MakeRelativeTransform"), @params);
    }
    public FRandomStream MakeRandomStream(int InitialSeed)
    {
        Span<(string name, object value)> @params = [
            ("InitialSeed", InitialSeed)
        ];
        return ProcessEvent<FRandomStream>(GetFunction("MakeRandomStream"), @params);
    }
    public FQualifiedFrameTime MakeQualifiedFrameTime(FFrameNumber Frame, FFrameRate FrameRate, float SubFrame)
    {
        Span<(string name, object value)> @params = [
            ("Frame", Frame), 
            ("FrameRate", FrameRate), 
            ("SubFrame", SubFrame)
        ];
        return ProcessEvent<FQualifiedFrameTime>(GetFunction("MakeQualifiedFrameTime"), @params);
    }
    public float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase)
    {
        Span<(string name, object value)> @params = [
            ("InCurrentTime", InCurrentTime), 
            ("InPulsesPerSecond", InPulsesPerSecond), 
            ("InPhase", InPhase)
        ];
        return ProcessEvent<float>(GetFunction("MakePulsatingValue"), @params);
    }
    public FPlane MakePlaneFromPointAndNormal(FVector Point, FVector Normal)
    {
        Span<(string name, object value)> @params = [
            ("Point", Point), 
            ("Normal", Normal)
        ];
        return ProcessEvent<FPlane>(GetFunction("MakePlaneFromPointAndNormal"), @params);
    }
    public FFrameRate MakeFrameRate(int Numerator, int Denominator)
    {
        Span<(string name, object value)> @params = [
            ("Numerator", Numerator), 
            ("Denominator", Denominator)
        ];
        return ProcessEvent<FFrameRate>(GetFunction("MakeFrameRate"), @params);
    }
    public FDateTime MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond)
    {
        Span<(string name, object value)> @params = [
            ("Year", Year), 
            ("Month", Month), 
            ("Day", Day), 
            ("Hour", Hour), 
            ("Minute", Minute), 
            ("Second", Second), 
            ("Millisecond", Millisecond)
        ];
        return ProcessEvent<FDateTime>(GetFunction("MakeDateTime"), @params);
    }
    public FLinearColor MakeColor(float R, float G, float B, float A)
    {
        Span<(string name, object value)> @params = [
            ("R", R), 
            ("G", G), 
            ("B", B), 
            ("A", A)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("MakeColor"), @params);
    }
    public FBox2D MakeBox2D(FVector2D Min, FVector2D Max)
    {
        Span<(string name, object value)> @params = [
            ("Min", Min), 
            ("Max", Max)
        ];
        return ProcessEvent<FBox2D>(GetFunction("MakeBox2D"), @params);
    }
    public FBox MakeBox(FVector Min, FVector Max)
    {
        Span<(string name, object value)> @params = [
            ("Min", Min), 
            ("Max", Max)
        ];
        return ProcessEvent<FBox>(GetFunction("MakeBox"), @params);
    }
    public float Loge(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Loge"), @params);
    }
    public float Log(float A, float Base)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Base", Base)
        ];
        return ProcessEvent<float>(GetFunction("Log"), @params);
    }
    public bool LinePlaneIntersection_OriginNormal(ref FVector LineStart, ref FVector LineEnd, FVector PlaneOrigin, FVector PlaneNormal, ref float T, ref FVector Intersection)
    {
        Span<(string name, object value)> @params = [
            ("LineStart", LineStart), 
            ("LineEnd", LineEnd), 
            ("PlaneOrigin", PlaneOrigin), 
            ("PlaneNormal", PlaneNormal), 
            ("T", T), 
            ("Intersection", Intersection)
        ];
        return ProcessEvent<bool>(GetFunction("LinePlaneIntersection_OriginNormal"), @params);
    }
    public bool LinePlaneIntersection(ref FVector LineStart, ref FVector LineEnd, ref FPlane APlane, ref float T, ref FVector Intersection)
    {
        Span<(string name, object value)> @params = [
            ("LineStart", LineStart), 
            ("LineEnd", LineEnd), 
            ("APlane", APlane), 
            ("T", T), 
            ("Intersection", Intersection)
        ];
        return ProcessEvent<bool>(GetFunction("LinePlaneIntersection"), @params);
    }
    public FLinearColor LinearColorLerpUsingHSV(FLinearColor A, FLinearColor B, float Alpha)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Alpha", Alpha)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("LinearColorLerpUsingHSV"), @params);
    }
    public FLinearColor LinearColorLerp(FLinearColor A, FLinearColor B, float Alpha)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Alpha", Alpha)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("LinearColorLerp"), @params);
    }
    public FLinearColor LinearColor_Yellow()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FLinearColor>(GetFunction("LinearColor_Yellow"), @params);
    }
    public FLinearColor LinearColor_White()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FLinearColor>(GetFunction("LinearColor_White"), @params);
    }
    public FLinearColor LinearColor_Transparent()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FLinearColor>(GetFunction("LinearColor_Transparent"), @params);
    }
    public FColor LinearColor_ToRGBE(FLinearColor InLinearColor)
    {
        Span<(string name, object value)> @params = [
            ("InLinearColor", InLinearColor)
        ];
        return ProcessEvent<FColor>(GetFunction("LinearColor_ToRGBE"), @params);
    }
    public FLinearColor LinearColor_ToNewOpacity(FLinearColor InColor, float InOpacity)
    {
        Span<(string name, object value)> @params = [
            ("InColor", InColor), 
            ("InOpacity", InOpacity)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("LinearColor_ToNewOpacity"), @params);
    }
    public void LinearColor_SetTemperature(ref FLinearColor InOutColor, float InTemperature)
    {
        Span<(string name, object value)> @params = [
            ("InOutColor", InOutColor), 
            ("InTemperature", InTemperature)
        ];
        ProcessEvent(GetFunction("LinearColor_SetTemperature"), @params);
    }
    public void LinearColor_SetRGBA(ref FLinearColor InOutColor, float R, float G, float B, float A)
    {
        Span<(string name, object value)> @params = [
            ("InOutColor", InOutColor), 
            ("R", R), 
            ("G", G), 
            ("B", B), 
            ("A", A)
        ];
        ProcessEvent(GetFunction("LinearColor_SetRGBA"), @params);
    }
    public void LinearColor_SetRandomHue(ref FLinearColor InOutColor)
    {
        Span<(string name, object value)> @params = [
            ("InOutColor", InOutColor)
        ];
        ProcessEvent(GetFunction("LinearColor_SetRandomHue"), @params);
    }
    public void LinearColor_SetFromSRGB(ref FLinearColor InOutColor, ref FColor InSRGB)
    {
        Span<(string name, object value)> @params = [
            ("InOutColor", InOutColor), 
            ("InSRGB", InSRGB)
        ];
        ProcessEvent(GetFunction("LinearColor_SetFromSRGB"), @params);
    }
    public void LinearColor_SetFromPow22(ref FLinearColor InOutColor, ref FColor InColor)
    {
        Span<(string name, object value)> @params = [
            ("InOutColor", InOutColor), 
            ("InColor", InColor)
        ];
        ProcessEvent(GetFunction("LinearColor_SetFromPow22"), @params);
    }
    public void LinearColor_SetFromHSV(ref FLinearColor InOutColor, float H, float S, float V, float A)
    {
        Span<(string name, object value)> @params = [
            ("InOutColor", InOutColor), 
            ("H", H), 
            ("S", S), 
            ("V", V), 
            ("A", A)
        ];
        ProcessEvent(GetFunction("LinearColor_SetFromHSV"), @params);
    }
    public void LinearColor_Set(ref FLinearColor InOutColor, FLinearColor InColor)
    {
        Span<(string name, object value)> @params = [
            ("InOutColor", InOutColor), 
            ("InColor", InColor)
        ];
        ProcessEvent(GetFunction("LinearColor_Set"), @params);
    }
    public FLinearColor LinearColor_Red()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FLinearColor>(GetFunction("LinearColor_Red"), @params);
    }
    public FColor LinearColor_QuantizeRound(FLinearColor InColor)
    {
        Span<(string name, object value)> @params = [
            ("InColor", InColor)
        ];
        return ProcessEvent<FColor>(GetFunction("LinearColor_QuantizeRound"), @params);
    }
    public FColor LinearColor_Quantize(FLinearColor InColor)
    {
        Span<(string name, object value)> @params = [
            ("InColor", InColor)
        ];
        return ProcessEvent<FColor>(GetFunction("LinearColor_Quantize"), @params);
    }
    public bool LinearColor_IsNearEqual(FLinearColor A, FLinearColor B, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<bool>(GetFunction("LinearColor_IsNearEqual"), @params);
    }
    public FLinearColor LinearColor_Green()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FLinearColor>(GetFunction("LinearColor_Green"), @params);
    }
    public FLinearColor LinearColor_Gray()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FLinearColor>(GetFunction("LinearColor_Gray"), @params);
    }
    public float LinearColor_GetMin(FLinearColor InColor)
    {
        Span<(string name, object value)> @params = [
            ("InColor", InColor)
        ];
        return ProcessEvent<float>(GetFunction("LinearColor_GetMin"), @params);
    }
    public float LinearColor_GetMax(FLinearColor InColor)
    {
        Span<(string name, object value)> @params = [
            ("InColor", InColor)
        ];
        return ProcessEvent<float>(GetFunction("LinearColor_GetMax"), @params);
    }
    public float LinearColor_GetLuminance(FLinearColor InColor)
    {
        Span<(string name, object value)> @params = [
            ("InColor", InColor)
        ];
        return ProcessEvent<float>(GetFunction("LinearColor_GetLuminance"), @params);
    }
    public float LinearColor_Distance(FLinearColor C1, FLinearColor C2)
    {
        Span<(string name, object value)> @params = [
            ("C1", C1), 
            ("C2", C2)
        ];
        return ProcessEvent<float>(GetFunction("LinearColor_Distance"), @params);
    }
    public FLinearColor LinearColor_Desaturated(FLinearColor InColor, float InDesaturation)
    {
        Span<(string name, object value)> @params = [
            ("InColor", InColor), 
            ("InDesaturation", InDesaturation)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("LinearColor_Desaturated"), @params);
    }
    public FLinearColor LinearColor_Blue()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FLinearColor>(GetFunction("LinearColor_Blue"), @params);
    }
    public FLinearColor LinearColor_Black()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FLinearColor>(GetFunction("LinearColor_Black"), @params);
    }
    public FVector LessLess_VectorRotator(FVector A, FRotator B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector>(GetFunction("LessLess_VectorRotator"), @params);
    }
    public bool LessEqual_TimespanTimespan(FTimespan A, FTimespan B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("LessEqual_TimespanTimespan"), @params);
    }
    public bool LessEqual_IntInt(int A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("LessEqual_IntInt"), @params);
    }
    public bool LessEqual_Int64Int64(long A, long B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("LessEqual_Int64Int64"), @params);
    }
    public bool LessEqual_FloatFloat(float A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("LessEqual_FloatFloat"), @params);
    }
    public bool LessEqual_DateTimeDateTime(FDateTime A, FDateTime B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("LessEqual_DateTimeDateTime"), @params);
    }
    public bool LessEqual_ByteByte(byte A, byte B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("LessEqual_ByteByte"), @params);
    }
    public bool Less_TimespanTimespan(FTimespan A, FTimespan B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("Less_TimespanTimespan"), @params);
    }
    public bool Less_IntInt(int A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("Less_IntInt"), @params);
    }
    public bool Less_Int64Int64(long A, long B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("Less_Int64Int64"), @params);
    }
    public bool Less_FloatFloat(float A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("Less_FloatFloat"), @params);
    }
    public bool Less_DateTimeDateTime(FDateTime A, FDateTime B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("Less_DateTimeDateTime"), @params);
    }
    public bool Less_ByteByte(byte A, byte B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("Less_ByteByte"), @params);
    }
    public float Lerp(float A, float B, float Alpha)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Alpha", Alpha)
        ];
        return ProcessEvent<float>(GetFunction("Lerp"), @params);
    }
    public bool IsZero2D(ref FVector2D A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<bool>(GetFunction("IsZero2D"), @params);
    }
    public bool IsPointInBoxWithTransform(FVector Point, ref FTransform BoxWorldTransform, FVector BoxExtent)
    {
        Span<(string name, object value)> @params = [
            ("Point", Point), 
            ("BoxWorldTransform", BoxWorldTransform), 
            ("BoxExtent", BoxExtent)
        ];
        return ProcessEvent<bool>(GetFunction("IsPointInBoxWithTransform"), @params);
    }
    public bool IsPointInBox(FVector Point, FVector BoxOrigin, FVector BoxExtent)
    {
        Span<(string name, object value)> @params = [
            ("Point", Point), 
            ("BoxOrigin", BoxOrigin), 
            ("BoxExtent", BoxExtent)
        ];
        return ProcessEvent<bool>(GetFunction("IsPointInBox"), @params);
    }
    public bool IsNearlyZero2D(ref FVector2D A, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<bool>(GetFunction("IsNearlyZero2D"), @params);
    }
    public bool IsMorning(FDateTime A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<bool>(GetFunction("IsMorning"), @params);
    }
    public bool IsLeapYear(int Year)
    {
        Span<(string name, object value)> @params = [
            ("Year", Year)
        ];
        return ProcessEvent<bool>(GetFunction("IsLeapYear"), @params);
    }
    public bool IsAfternoon(FDateTime A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<bool>(GetFunction("IsAfternoon"), @params);
    }
    public FTransform InvertTransform(ref FTransform T)
    {
        Span<(string name, object value)> @params = [
            ("T", T)
        ];
        return ProcessEvent<FTransform>(GetFunction("InvertTransform"), @params);
    }
    public FRotator InverseTransformRotation(ref FTransform T, FRotator Rotation)
    {
        Span<(string name, object value)> @params = [
            ("T", T), 
            ("Rotation", Rotation)
        ];
        return ProcessEvent<FRotator>(GetFunction("InverseTransformRotation"), @params);
    }
    public FVector InverseTransformLocation(ref FTransform T, FVector Location)
    {
        Span<(string name, object value)> @params = [
            ("T", T), 
            ("Location", Location)
        ];
        return ProcessEvent<FVector>(GetFunction("InverseTransformLocation"), @params);
    }
    public FVector InverseTransformDirection(ref FTransform T, FVector Direction)
    {
        Span<(string name, object value)> @params = [
            ("T", T), 
            ("Direction", Direction)
        ];
        return ProcessEvent<FVector>(GetFunction("InverseTransformDirection"), @params);
    }
    public FIntPoint IntPoint_Zero()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FIntPoint>(GetFunction("IntPoint_Zero"), @params);
    }
    public FIntPoint IntPoint_Up()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FIntPoint>(GetFunction("IntPoint_Up"), @params);
    }
    public FIntPoint IntPoint_Right()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FIntPoint>(GetFunction("IntPoint_Right"), @params);
    }
    public FIntPoint IntPoint_One()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FIntPoint>(GetFunction("IntPoint_One"), @params);
    }
    public FIntPoint IntPoint_Left()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FIntPoint>(GetFunction("IntPoint_Left"), @params);
    }
    public FIntPoint IntPoint_Down()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FIntPoint>(GetFunction("IntPoint_Down"), @params);
    }
    public bool InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("Min", Min), 
            ("Max", Max), 
            ("InclusiveMin", InclusiveMin), 
            ("InclusiveMax", InclusiveMax)
        ];
        return ProcessEvent<bool>(GetFunction("InRange_IntInt"), @params);
    }
    public bool InRange_Int64Int64(long Value, long Min, long Max, bool InclusiveMin, bool InclusiveMax)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("Min", Min), 
            ("Max", Max), 
            ("InclusiveMin", InclusiveMin), 
            ("InclusiveMax", InclusiveMax)
        ];
        return ProcessEvent<bool>(GetFunction("InRange_Int64Int64"), @params);
    }
    public bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("Min", Min), 
            ("Max", Max), 
            ("InclusiveMin", InclusiveMin), 
            ("InclusiveMax", InclusiveMax)
        ];
        return ProcessEvent<bool>(GetFunction("InRange_FloatFloat"), @params);
    }
    public float Hypotenuse(float Width, float Height)
    {
        Span<(string name, object value)> @params = [
            ("Width", Width), 
            ("Height", Height)
        ];
        return ProcessEvent<float>(GetFunction("Hypotenuse"), @params);
    }
    public FLinearColor HSVToRGBLinear(FLinearColor HSV)
    {
        Span<(string name, object value)> @params = [
            ("HSV", HSV)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("HSVToRGBLinear"), @params);
    }
    public void HSVToRGB_Vector(FLinearColor HSV, ref FLinearColor RGB)
    {
        Span<(string name, object value)> @params = [
            ("HSV", HSV), 
            ("RGB", RGB)
        ];
        ProcessEvent(GetFunction("HSVToRGB_Vector"), @params);
    }
    public FLinearColor HSVToRGB(float H, float S, float V, float A)
    {
        Span<(string name, object value)> @params = [
            ("H", H), 
            ("S", S), 
            ("V", V), 
            ("A", A)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("HSVToRGB"), @params);
    }
    public float GridSnap_Float(float Location, float GridSize)
    {
        Span<(string name, object value)> @params = [
            ("Location", Location), 
            ("GridSize", GridSize)
        ];
        return ProcessEvent<float>(GetFunction("GridSnap_Float"), @params);
    }
    public FVector GreaterGreater_VectorRotator(FVector A, FRotator B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector>(GetFunction("GreaterGreater_VectorRotator"), @params);
    }
    public bool GreaterEqual_TimespanTimespan(FTimespan A, FTimespan B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("GreaterEqual_TimespanTimespan"), @params);
    }
    public bool GreaterEqual_IntInt(int A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("GreaterEqual_IntInt"), @params);
    }
    public bool GreaterEqual_Int64Int64(long A, long B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("GreaterEqual_Int64Int64"), @params);
    }
    public bool GreaterEqual_FloatFloat(float A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("GreaterEqual_FloatFloat"), @params);
    }
    public bool GreaterEqual_DateTimeDateTime(FDateTime A, FDateTime B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("GreaterEqual_DateTimeDateTime"), @params);
    }
    public bool GreaterEqual_ByteByte(byte A, byte B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("GreaterEqual_ByteByte"), @params);
    }
    public bool Greater_TimespanTimespan(FTimespan A, FTimespan B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("Greater_TimespanTimespan"), @params);
    }
    public bool Greater_IntInt(int A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("Greater_IntInt"), @params);
    }
    public bool Greater_Int64Int64(long A, long B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("Greater_Int64Int64"), @params);
    }
    public bool Greater_FloatFloat(float A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("Greater_FloatFloat"), @params);
    }
    public bool Greater_DateTimeDateTime(FDateTime A, FDateTime B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("Greater_DateTimeDateTime"), @params);
    }
    public bool Greater_ByteByte(byte A, byte B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("Greater_ByteByte"), @params);
    }
    public int GetYear(FDateTime A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("GetYear"), @params);
    }
    public void GetYawPitchFromVector(FVector InVec, ref float Yaw, ref float Pitch)
    {
        Span<(string name, object value)> @params = [
            ("InVec", InVec), 
            ("Yaw", Yaw), 
            ("Pitch", Pitch)
        ];
        ProcessEvent(GetFunction("GetYawPitchFromVector"), @params);
    }
    public FVector GetVectorArrayAverage(ref TArray<FVector> Vectors)
    {
        Span<(string name, object value)> @params = [
            ("Vectors", Vectors)
        ];
        return ProcessEvent<FVector>(GetFunction("GetVectorArrayAverage"), @params);
    }
    public FVector GetUpVector(FRotator InRot)
    {
        Span<(string name, object value)> @params = [
            ("InRot", InRot)
        ];
        return ProcessEvent<FVector>(GetFunction("GetUpVector"), @params);
    }
    public float GetTotalSeconds(FTimespan A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("GetTotalSeconds"), @params);
    }
    public float GetTotalMinutes(FTimespan A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("GetTotalMinutes"), @params);
    }
    public float GetTotalMilliseconds(FTimespan A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("GetTotalMilliseconds"), @params);
    }
    public float GetTotalHours(FTimespan A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("GetTotalHours"), @params);
    }
    public float GetTotalDays(FTimespan A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("GetTotalDays"), @params);
    }
    public FTimespan GetTimeOfDay(FDateTime A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FTimespan>(GetFunction("GetTimeOfDay"), @params);
    }
    public float GetTAU()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetTAU"), @params);
    }
    public void GetSlopeDegreeAngles(ref FVector MyRightYAxis, ref FVector FloorNormal, ref FVector UpVector, ref float OutSlopePitchDegreeAngle, ref float OutSlopeRollDegreeAngle)
    {
        Span<(string name, object value)> @params = [
            ("MyRightYAxis", MyRightYAxis), 
            ("FloorNormal", FloorNormal), 
            ("UpVector", UpVector), 
            ("OutSlopePitchDegreeAngle", OutSlopePitchDegreeAngle), 
            ("OutSlopeRollDegreeAngle", OutSlopeRollDegreeAngle)
        ];
        ProcessEvent(GetFunction("GetSlopeDegreeAngles"), @params);
    }
    public int GetSeconds(FTimespan A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("GetSeconds"), @params);
    }
    public int GetSecond(FDateTime A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("GetSecond"), @params);
    }
    public FVector2D GetRotated2D(FVector2D A, float AngleDeg)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("AngleDeg", AngleDeg)
        ];
        return ProcessEvent<FVector2D>(GetFunction("GetRotated2D"), @params);
    }
    public FVector GetRightVector(FRotator InRot)
    {
        Span<(string name, object value)> @params = [
            ("InRot", InRot)
        ];
        return ProcessEvent<FVector>(GetFunction("GetRightVector"), @params);
    }
    public FVector GetReflectionVector(FVector Direction, FVector SurfaceNormal)
    {
        Span<(string name, object value)> @params = [
            ("Direction", Direction), 
            ("SurfaceNormal", SurfaceNormal)
        ];
        return ProcessEvent<FVector>(GetFunction("GetReflectionVector"), @params);
    }
    public float GetPointDistanceToSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd)
    {
        Span<(string name, object value)> @params = [
            ("Point", Point), 
            ("SegmentStart", SegmentStart), 
            ("SegmentEnd", SegmentEnd)
        ];
        return ProcessEvent<float>(GetFunction("GetPointDistanceToSegment"), @params);
    }
    public float GetPointDistanceToLine(FVector Point, FVector LineOrigin, FVector LineDirection)
    {
        Span<(string name, object value)> @params = [
            ("Point", Point), 
            ("LineOrigin", LineOrigin), 
            ("LineDirection", LineDirection)
        ];
        return ProcessEvent<float>(GetFunction("GetPointDistanceToLine"), @params);
    }
    public float GetPI()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<float>(GetFunction("GetPI"), @params);
    }
    public int GetMonth(FDateTime A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("GetMonth"), @params);
    }
    public int GetMinutes(FTimespan A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("GetMinutes"), @params);
    }
    public int GetMinute(FDateTime A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("GetMinute"), @params);
    }
    public float GetMinElement(FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("GetMinElement"), @params);
    }
    public float GetMin2D(FVector2D A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("GetMin2D"), @params);
    }
    public int GetMilliseconds(FTimespan A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("GetMilliseconds"), @params);
    }
    public int GetMillisecond(FDateTime A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("GetMillisecond"), @params);
    }
    public float GetMaxElement(FVector A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("GetMaxElement"), @params);
    }
    public float GetMax2D(FVector2D A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("GetMax2D"), @params);
    }
    public int GetHours(FTimespan A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("GetHours"), @params);
    }
    public int GetHour12(FDateTime A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("GetHour12"), @params);
    }
    public int GetHour(FDateTime A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("GetHour"), @params);
    }
    public FVector GetForwardVector(FRotator InRot)
    {
        Span<(string name, object value)> @params = [
            ("InRot", InRot)
        ];
        return ProcessEvent<FVector>(GetFunction("GetForwardVector"), @params);
    }
    public FTimespan GetDuration(FTimespan A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FTimespan>(GetFunction("GetDuration"), @params);
    }
    public FVector GetDirectionUnitVector(FVector From, FVector To)
    {
        Span<(string name, object value)> @params = [
            ("From", From), 
            ("To", To)
        ];
        return ProcessEvent<FVector>(GetFunction("GetDirectionUnitVector"), @params);
    }
    public int GetDays(FTimespan A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("GetDays"), @params);
    }
    public int GetDayOfYear(FDateTime A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("GetDayOfYear"), @params);
    }
    public int GetDay(FDateTime A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("GetDay"), @params);
    }
    public FDateTime GetDate(FDateTime A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FDateTime>(GetFunction("GetDate"), @params);
    }
    public void GetAzimuthAndElevation(FVector InDirection, ref FTransform ReferenceFrame, ref float Azimuth, ref float Elevation)
    {
        Span<(string name, object value)> @params = [
            ("InDirection", InDirection), 
            ("ReferenceFrame", ReferenceFrame), 
            ("Azimuth", Azimuth), 
            ("Elevation", Elevation)
        ];
        ProcessEvent(GetFunction("GetAzimuthAndElevation"), @params);
    }
    public void GetAxes(FRotator A, ref FVector X, ref FVector Y, ref FVector Z)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("X", X), 
            ("Y", Y), 
            ("Z", Z)
        ];
        ProcessEvent(GetFunction("GetAxes"), @params);
    }
    public float GetAbsMax2D(FVector2D A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("GetAbsMax2D"), @params);
    }
    public FVector2D GetAbs2D(FVector2D A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<FVector2D>(GetFunction("GetAbs2D"), @params);
    }
    public float FWrap(float Value, float Min, float Max)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("Min", Min), 
            ("Max", Max)
        ];
        return ProcessEvent<float>(GetFunction("FWrap"), @params);
    }
    public FIntVector FTruncVector(ref FVector InVector)
    {
        Span<(string name, object value)> @params = [
            ("InVector", InVector)
        ];
        return ProcessEvent<FIntVector>(GetFunction("FTruncVector"), @params);
    }
    public long FTrunc64(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<long>(GetFunction("FTrunc64"), @params);
    }
    public int FTrunc(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("FTrunc"), @params);
    }
    public FTimespan FromSeconds(float Seconds)
    {
        Span<(string name, object value)> @params = [
            ("Seconds", Seconds)
        ];
        return ProcessEvent<FTimespan>(GetFunction("FromSeconds"), @params);
    }
    public FTimespan FromMinutes(float Minutes)
    {
        Span<(string name, object value)> @params = [
            ("Minutes", Minutes)
        ];
        return ProcessEvent<FTimespan>(GetFunction("FromMinutes"), @params);
    }
    public FTimespan FromMilliseconds(float Milliseconds)
    {
        Span<(string name, object value)> @params = [
            ("Milliseconds", Milliseconds)
        ];
        return ProcessEvent<FTimespan>(GetFunction("FromMilliseconds"), @params);
    }
    public FTimespan FromHours(float Hours)
    {
        Span<(string name, object value)> @params = [
            ("Hours", Hours)
        ];
        return ProcessEvent<FTimespan>(GetFunction("FromHours"), @params);
    }
    public FTimespan FromDays(float Days)
    {
        Span<(string name, object value)> @params = [
            ("Days", Days)
        ];
        return ProcessEvent<FTimespan>(GetFunction("FromDays"), @params);
    }
    public float Fraction(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Fraction"), @params);
    }
    public int FMod(float Dividend, float Divisor, ref float Remainder)
    {
        Span<(string name, object value)> @params = [
            ("Dividend", Dividend), 
            ("Divisor", Divisor), 
            ("Remainder", Remainder)
        ];
        return ProcessEvent<int>(GetFunction("FMod"), @params);
    }
    public float FMin(float A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<float>(GetFunction("FMin"), @params);
    }
    public float FMax(float A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<float>(GetFunction("FMax"), @params);
    }
    public float FloatSpringInterp(float Current, float Target, ref FFloatSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass)
    {
        Span<(string name, object value)> @params = [
            ("Current", Current), 
            ("Target", Target), 
            ("SpringState", SpringState), 
            ("Stiffness", Stiffness), 
            ("CriticalDampingFactor", CriticalDampingFactor), 
            ("DeltaTime", DeltaTime), 
            ("Mass", Mass)
        ];
        return ProcessEvent<float>(GetFunction("FloatSpringInterp"), @params);
    }
    public float FixedTurn(float InCurrent, float InDesired, float InDeltaRate)
    {
        Span<(string name, object value)> @params = [
            ("InCurrent", InCurrent), 
            ("InDesired", InDesired), 
            ("InDeltaRate", InDeltaRate)
        ];
        return ProcessEvent<float>(GetFunction("FixedTurn"), @params);
    }
    public float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed)
    {
        Span<(string name, object value)> @params = [
            ("Current", Current), 
            ("Target", Target), 
            ("DeltaTime", DeltaTime), 
            ("InterpSpeed", InterpSpeed)
        ];
        return ProcessEvent<float>(GetFunction("FInterpTo_Constant"), @params);
    }
    public float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed)
    {
        Span<(string name, object value)> @params = [
            ("Current", Current), 
            ("Target", Target), 
            ("DeltaTime", DeltaTime), 
            ("InterpSpeed", InterpSpeed)
        ];
        return ProcessEvent<float>(GetFunction("FInterpTo"), @params);
    }
    public float FInterpEaseInOut(float A, float B, float Alpha, float Exponent)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Alpha", Alpha), 
            ("Exponent", Exponent)
        ];
        return ProcessEvent<float>(GetFunction("FInterpEaseInOut"), @params);
    }
    public void FindNearestPointsOnLineSegments(FVector Segment1Start, FVector Segment1End, FVector Segment2Start, FVector Segment2End, ref FVector Segment1Point, ref FVector Segment2Point)
    {
        Span<(string name, object value)> @params = [
            ("Segment1Start", Segment1Start), 
            ("Segment1End", Segment1End), 
            ("Segment2Start", Segment2Start), 
            ("Segment2End", Segment2End), 
            ("Segment1Point", Segment1Point), 
            ("Segment2Point", Segment2Point)
        ];
        ProcessEvent(GetFunction("FindNearestPointsOnLineSegments"), @params);
    }
    public FRotator FindLookAtRotation(ref FVector Start, ref FVector Target)
    {
        Span<(string name, object value)> @params = [
            ("Start", Start), 
            ("Target", Target)
        ];
        return ProcessEvent<FRotator>(GetFunction("FindLookAtRotation"), @params);
    }
    public FVector FindClosestPointOnSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd)
    {
        Span<(string name, object value)> @params = [
            ("Point", Point), 
            ("SegmentStart", SegmentStart), 
            ("SegmentEnd", SegmentEnd)
        ];
        return ProcessEvent<FVector>(GetFunction("FindClosestPointOnSegment"), @params);
    }
    public FVector FindClosestPointOnLine(FVector Point, FVector LineOrigin, FVector LineDirection)
    {
        Span<(string name, object value)> @params = [
            ("Point", Point), 
            ("LineOrigin", LineOrigin), 
            ("LineDirection", LineDirection)
        ];
        return ProcessEvent<FVector>(GetFunction("FindClosestPointOnLine"), @params);
    }
    public long FFloor64(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<long>(GetFunction("FFloor64"), @params);
    }
    public int FFloor(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("FFloor"), @params);
    }
    public float FClamp(float Value, float Min, float Max)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("Min", Min), 
            ("Max", Max)
        ];
        return ProcessEvent<float>(GetFunction("FClamp"), @params);
    }
    public long FCeil64(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<long>(GetFunction("FCeil64"), @params);
    }
    public int FCeil(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("FCeil"), @params);
    }
    public float Exp(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Exp"), @params);
    }
    public bool EqualExactly_VectorVector(FVector A, FVector B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualExactly_VectorVector"), @params);
    }
    public bool EqualExactly_Vector4Vector4(ref FVector4 A, ref FVector4 B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualExactly_Vector4Vector4"), @params);
    }
    public bool EqualExactly_Vector2DVector2D(FVector2D A, FVector2D B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualExactly_Vector2DVector2D"), @params);
    }
    public bool EqualEqual_VectorVector(FVector A, FVector B, float ErrorTolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("ErrorTolerance", ErrorTolerance)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_VectorVector"), @params);
    }
    public bool EqualEqual_Vector4Vector4(ref FVector4 A, ref FVector4 B, float ErrorTolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("ErrorTolerance", ErrorTolerance)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_Vector4Vector4"), @params);
    }
    public bool EqualEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("ErrorTolerance", ErrorTolerance)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_Vector2DVector2D"), @params);
    }
    public bool EqualEqual_TransformTransform(ref FTransform A, ref FTransform B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_TransformTransform"), @params);
    }
    public bool EqualEqual_TimespanTimespan(FTimespan A, FTimespan B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_TimespanTimespan"), @params);
    }
    public bool EqualEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("ErrorTolerance", ErrorTolerance)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_RotatorRotator"), @params);
    }
    public bool EqualEqual_QuatQuat(ref FQuat A, ref FQuat B, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_QuatQuat"), @params);
    }
    public bool EqualEqual_ObjectObject(UObject* A, UObject* B)
    {
        Span<(string name, object value)> @params = [
            ("A", (IntPtr)A), 
            ("B", (IntPtr)B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_ObjectObject"), @params);
    }
    public bool EqualEqual_NameName(FName A, FName B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_NameName"), @params);
    }
    public bool EqualEqual_MatrixMatrix(ref FMatrix A, ref FMatrix B, float Tolerance)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Tolerance", Tolerance)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_MatrixMatrix"), @params);
    }
    public bool EqualEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_LinearColorLinearColor"), @params);
    }
    public bool EqualEqual_IntInt(int A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_IntInt"), @params);
    }
    public bool EqualEqual_Int64Int64(long A, long B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_Int64Int64"), @params);
    }
    public bool EqualEqual_FloatFloat(float A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_FloatFloat"), @params);
    }
    public bool EqualEqual_DateTimeDateTime(FDateTime A, FDateTime B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_DateTimeDateTime"), @params);
    }
    public bool EqualEqual_ClassClass(UClass* A, UClass* B)
    {
        Span<(string name, object value)> @params = [
            ("A", (IntPtr)A), 
            ("B", (IntPtr)B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_ClassClass"), @params);
    }
    public bool EqualEqual_ByteByte(byte A, byte B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_ByteByte"), @params);
    }
    public bool EqualEqual_BoolBool(bool A, bool B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_BoolBool"), @params);
    }
    public bool Equal_IntPointIntPoint(FIntPoint A, FIntPoint B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("Equal_IntPointIntPoint"), @params);
    }
    public float Ease(float A, float B, float Alpha, EEasingFunc EasingFunc, float BlendExp, int Steps)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B), 
            ("Alpha", Alpha), 
            ("EasingFunc", EasingFunc), 
            ("BlendExp", BlendExp), 
            ("Steps", Steps)
        ];
        return ProcessEvent<float>(GetFunction("Ease"), @params);
    }
    public FVector DynamicWeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight)
    {
        Span<(string name, object value)> @params = [
            ("CurrentSample", CurrentSample), 
            ("PreviousSample", PreviousSample), 
            ("MaxDistance", MaxDistance), 
            ("MinWeight", MinWeight), 
            ("MaxWeight", MaxWeight)
        ];
        return ProcessEvent<FVector>(GetFunction("DynamicWeightedMovingAverage_FVector"), @params);
    }
    public FRotator DynamicWeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight)
    {
        Span<(string name, object value)> @params = [
            ("CurrentSample", CurrentSample), 
            ("PreviousSample", PreviousSample), 
            ("MaxDistance", MaxDistance), 
            ("MinWeight", MinWeight), 
            ("MaxWeight", MaxWeight)
        ];
        return ProcessEvent<FRotator>(GetFunction("DynamicWeightedMovingAverage_FRotator"), @params);
    }
    public float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight)
    {
        Span<(string name, object value)> @params = [
            ("CurrentSample", CurrentSample), 
            ("PreviousSample", PreviousSample), 
            ("MaxDistance", MaxDistance), 
            ("MinWeight", MinWeight), 
            ("MaxWeight", MaxWeight)
        ];
        return ProcessEvent<float>(GetFunction("DynamicWeightedMovingAverage_Float"), @params);
    }
    public float DotProduct2D(FVector2D A, FVector2D B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<float>(GetFunction("DotProduct2D"), @params);
    }
    public float Dot_VectorVector(FVector A, FVector B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<float>(GetFunction("Dot_VectorVector"), @params);
    }
    public FVector Divide_VectorVector(FVector A, FVector B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector>(GetFunction("Divide_VectorVector"), @params);
    }
    public FVector Divide_VectorInt(FVector A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector>(GetFunction("Divide_VectorInt"), @params);
    }
    public FVector Divide_VectorFloat(FVector A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector>(GetFunction("Divide_VectorFloat"), @params);
    }
    public FVector4 Divide_Vector4Vector4(ref FVector4 A, ref FVector4 B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector4>(GetFunction("Divide_Vector4Vector4"), @params);
    }
    public FVector2D Divide_Vector2DVector2D(FVector2D A, FVector2D B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector2D>(GetFunction("Divide_Vector2DVector2D"), @params);
    }
    public FVector2D Divide_Vector2DFloat(FVector2D A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector2D>(GetFunction("Divide_Vector2DFloat"), @params);
    }
    public FTimespan Divide_TimespanFloat(FTimespan A, float Scalar)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Scalar", Scalar)
        ];
        return ProcessEvent<FTimespan>(GetFunction("Divide_TimespanFloat"), @params);
    }
    public FLinearColor Divide_LinearColorLinearColor(FLinearColor A, FLinearColor B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("Divide_LinearColorLinearColor"), @params);
    }
    public FIntPoint Divide_IntPointIntPoint(FIntPoint A, FIntPoint B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FIntPoint>(GetFunction("Divide_IntPointIntPoint"), @params);
    }
    public FIntPoint Divide_IntPointInt(FIntPoint A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FIntPoint>(GetFunction("Divide_IntPointInt"), @params);
    }
    public int Divide_IntInt(int A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<int>(GetFunction("Divide_IntInt"), @params);
    }
    public long Divide_Int64Int64(long A, long B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<long>(GetFunction("Divide_Int64Int64"), @params);
    }
    public float Divide_FloatFloat(float A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<float>(GetFunction("Divide_FloatFloat"), @params);
    }
    public byte Divide_ByteByte(byte A, byte B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<byte>(GetFunction("Divide_ByteByte"), @params);
    }
    public float DistanceSquared2D(FVector2D v1, FVector2D v2)
    {
        Span<(string name, object value)> @params = [
            ("v1", v1), 
            ("v2", v2)
        ];
        return ProcessEvent<float>(GetFunction("DistanceSquared2D"), @params);
    }
    public float Distance2D(FVector2D v1, FVector2D v2)
    {
        Span<(string name, object value)> @params = [
            ("v1", v1), 
            ("v2", v2)
        ];
        return ProcessEvent<float>(GetFunction("Distance2D"), @params);
    }
    public float DegTan(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("DegTan"), @params);
    }
    public float DegSin(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("DegSin"), @params);
    }
    public float DegreesToRadians(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("DegreesToRadians"), @params);
    }
    public float DegCos(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("DegCos"), @params);
    }
    public float DegAtan2(float Y, float X)
    {
        Span<(string name, object value)> @params = [
            ("Y", Y), 
            ("X", X)
        ];
        return ProcessEvent<float>(GetFunction("DegAtan2"), @params);
    }
    public float DegAtan(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("DegAtan"), @params);
    }
    public float DegAsin(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("DegAsin"), @params);
    }
    public float DegAcos(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("DegAcos"), @params);
    }
    public int DaysInYear(int Year)
    {
        Span<(string name, object value)> @params = [
            ("Year", Year)
        ];
        return ProcessEvent<int>(GetFunction("DaysInYear"), @params);
    }
    public int DaysInMonth(int Year, int Month)
    {
        Span<(string name, object value)> @params = [
            ("Year", Year), 
            ("Month", Month)
        ];
        return ProcessEvent<int>(GetFunction("DaysInMonth"), @params);
    }
    public FDateTime DateTimeMinValue()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FDateTime>(GetFunction("DateTimeMinValue"), @params);
    }
    public FDateTime DateTimeMaxValue()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FDateTime>(GetFunction("DateTimeMaxValue"), @params);
    }
    public bool DateTimeFromString(FString DateTimeString, ref FDateTime Result)
    {
        Span<(string name, object value)> @params = [
            ("DateTimeString", DateTimeString), 
            ("Result", Result)
        ];
        return ProcessEvent<bool>(GetFunction("DateTimeFromString"), @params);
    }
    public bool DateTimeFromIsoString(FString IsoString, ref FDateTime Result)
    {
        Span<(string name, object value)> @params = [
            ("IsoString", IsoString), 
            ("Result", Result)
        ];
        return ProcessEvent<bool>(GetFunction("DateTimeFromIsoString"), @params);
    }
    public float CrossProduct2D(FVector2D A, FVector2D B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<float>(GetFunction("CrossProduct2D"), @params);
    }
    public FVector Cross_VectorVector(FVector A, FVector B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector>(GetFunction("Cross_VectorVector"), @params);
    }
    public FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length)
    {
        Span<(string name, object value)> @params = [
            ("Yaw", Yaw), 
            ("Pitch", Pitch), 
            ("Length", Length)
        ];
        return ProcessEvent<FVector>(GetFunction("CreateVectorFromYawPitch"), @params);
    }
    public float Cos(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Cos"), @params);
    }
    public FTransform ConvertTransformToRelative(ref FTransform Transform, ref FTransform ParentTransform)
    {
        Span<(string name, object value)> @params = [
            ("Transform", Transform), 
            ("ParentTransform", ParentTransform)
        ];
        return ProcessEvent<FTransform>(GetFunction("ConvertTransformToRelative"), @params);
    }
    public FVector2D Conv_VectorToVector2D(FVector InVector)
    {
        Span<(string name, object value)> @params = [
            ("InVector", InVector)
        ];
        return ProcessEvent<FVector2D>(GetFunction("Conv_VectorToVector2D"), @params);
    }
    public FTransform Conv_VectorToTransform(FVector InLocation)
    {
        Span<(string name, object value)> @params = [
            ("InLocation", InLocation)
        ];
        return ProcessEvent<FTransform>(GetFunction("Conv_VectorToTransform"), @params);
    }
    public FRotator Conv_VectorToRotator(FVector InVec)
    {
        Span<(string name, object value)> @params = [
            ("InVec", InVec)
        ];
        return ProcessEvent<FRotator>(GetFunction("Conv_VectorToRotator"), @params);
    }
    public FQuat Conv_VectorToQuaternion(FVector InVec)
    {
        Span<(string name, object value)> @params = [
            ("InVec", InVec)
        ];
        return ProcessEvent<FQuat>(GetFunction("Conv_VectorToQuaternion"), @params);
    }
    public FLinearColor Conv_VectorToLinearColor(FVector InVec)
    {
        Span<(string name, object value)> @params = [
            ("InVec", InVec)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("Conv_VectorToLinearColor"), @params);
    }
    public FVector Conv_Vector4ToVector(ref FVector4 InVector4)
    {
        Span<(string name, object value)> @params = [
            ("InVector4", InVector4)
        ];
        return ProcessEvent<FVector>(GetFunction("Conv_Vector4ToVector"), @params);
    }
    public FRotator Conv_Vector4ToRotator(ref FVector4 InVec)
    {
        Span<(string name, object value)> @params = [
            ("InVec", InVec)
        ];
        return ProcessEvent<FRotator>(GetFunction("Conv_Vector4ToRotator"), @params);
    }
    public FQuat Conv_Vector4ToQuaternion(ref FVector4 InVec)
    {
        Span<(string name, object value)> @params = [
            ("InVec", InVec)
        ];
        return ProcessEvent<FQuat>(GetFunction("Conv_Vector4ToQuaternion"), @params);
    }
    public FVector Conv_Vector2DToVector(FVector2D InVector2D, float Z)
    {
        Span<(string name, object value)> @params = [
            ("InVector2D", InVector2D), 
            ("Z", Z)
        ];
        return ProcessEvent<FVector>(GetFunction("Conv_Vector2DToVector"), @params);
    }
    public FIntPoint Conv_Vector2DToIntPoint(FVector2D InVector2D)
    {
        Span<(string name, object value)> @params = [
            ("InVector2D", InVector2D)
        ];
        return ProcessEvent<FIntPoint>(GetFunction("Conv_Vector2DToIntPoint"), @params);
    }
    public FMatrix Conv_TransformToMatrix(ref FTransform Transform)
    {
        Span<(string name, object value)> @params = [
            ("Transform", Transform)
        ];
        return ProcessEvent<FMatrix>(GetFunction("Conv_TransformToMatrix"), @params);
    }
    public FVector Conv_RotatorToVector(FRotator InRot)
    {
        Span<(string name, object value)> @params = [
            ("InRot", InRot)
        ];
        return ProcessEvent<FVector>(GetFunction("Conv_RotatorToVector"), @params);
    }
    public FTransform Conv_RotatorToTransform(ref FRotator InRotator)
    {
        Span<(string name, object value)> @params = [
            ("InRotator", InRotator)
        ];
        return ProcessEvent<FTransform>(GetFunction("Conv_RotatorToTransform"), @params);
    }
    public FTransform Conv_MatrixToTransform(ref FMatrix InMatrix)
    {
        Span<(string name, object value)> @params = [
            ("InMatrix", InMatrix)
        ];
        return ProcessEvent<FTransform>(GetFunction("Conv_MatrixToTransform"), @params);
    }
    public FRotator Conv_MatrixToRotator(ref FMatrix InMatrix)
    {
        Span<(string name, object value)> @params = [
            ("InMatrix", InMatrix)
        ];
        return ProcessEvent<FRotator>(GetFunction("Conv_MatrixToRotator"), @params);
    }
    public FVector Conv_LinearColorToVector(FLinearColor InLinearColor)
    {
        Span<(string name, object value)> @params = [
            ("InLinearColor", InLinearColor)
        ];
        return ProcessEvent<FVector>(GetFunction("Conv_LinearColorToVector"), @params);
    }
    public FColor Conv_LinearColorToColor(FLinearColor InLinearColor, bool InUseSRGB)
    {
        Span<(string name, object value)> @params = [
            ("InLinearColor", InLinearColor), 
            ("InUseSRGB", InUseSRGB)
        ];
        return ProcessEvent<FColor>(GetFunction("Conv_LinearColorToColor"), @params);
    }
    public FVector Conv_IntVectorToVector(ref FIntVector InIntVector)
    {
        Span<(string name, object value)> @params = [
            ("InIntVector", InIntVector)
        ];
        return ProcessEvent<FVector>(GetFunction("Conv_IntVectorToVector"), @params);
    }
    public FIntVector Conv_IntToIntVector(int inInt)
    {
        Span<(string name, object value)> @params = [
            ("inInt", inInt)
        ];
        return ProcessEvent<FIntVector>(GetFunction("Conv_IntToIntVector"), @params);
    }
    public long Conv_IntToInt64(int inInt)
    {
        Span<(string name, object value)> @params = [
            ("inInt", inInt)
        ];
        return ProcessEvent<long>(GetFunction("Conv_IntToInt64"), @params);
    }
    public float Conv_IntToFloat(int inInt)
    {
        Span<(string name, object value)> @params = [
            ("inInt", inInt)
        ];
        return ProcessEvent<float>(GetFunction("Conv_IntToFloat"), @params);
    }
    public byte Conv_IntToByte(int inInt)
    {
        Span<(string name, object value)> @params = [
            ("inInt", inInt)
        ];
        return ProcessEvent<byte>(GetFunction("Conv_IntToByte"), @params);
    }
    public bool Conv_IntToBool(int inInt)
    {
        Span<(string name, object value)> @params = [
            ("inInt", inInt)
        ];
        return ProcessEvent<bool>(GetFunction("Conv_IntToBool"), @params);
    }
    public FVector2D Conv_IntPointToVector2D(FIntPoint InIntPoint)
    {
        Span<(string name, object value)> @params = [
            ("InIntPoint", InIntPoint)
        ];
        return ProcessEvent<FVector2D>(GetFunction("Conv_IntPointToVector2D"), @params);
    }
    public int Conv_Int64ToInt(long inInt)
    {
        Span<(string name, object value)> @params = [
            ("inInt", inInt)
        ];
        return ProcessEvent<int>(GetFunction("Conv_Int64ToInt"), @params);
    }
    public byte Conv_Int64ToByte(long inInt)
    {
        Span<(string name, object value)> @params = [
            ("inInt", inInt)
        ];
        return ProcessEvent<byte>(GetFunction("Conv_Int64ToByte"), @params);
    }
    public FVector Conv_FloatToVector(float InFloat)
    {
        Span<(string name, object value)> @params = [
            ("InFloat", InFloat)
        ];
        return ProcessEvent<FVector>(GetFunction("Conv_FloatToVector"), @params);
    }
    public FLinearColor Conv_FloatToLinearColor(float InFloat)
    {
        Span<(string name, object value)> @params = [
            ("InFloat", InFloat)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("Conv_FloatToLinearColor"), @params);
    }
    public FLinearColor Conv_ColorToLinearColor(FColor InColor)
    {
        Span<(string name, object value)> @params = [
            ("InColor", InColor)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("Conv_ColorToLinearColor"), @params);
    }
    public int Conv_ByteToInt(byte InByte)
    {
        Span<(string name, object value)> @params = [
            ("InByte", InByte)
        ];
        return ProcessEvent<int>(GetFunction("Conv_ByteToInt"), @params);
    }
    public float Conv_ByteToFloat(byte InByte)
    {
        Span<(string name, object value)> @params = [
            ("InByte", InByte)
        ];
        return ProcessEvent<float>(GetFunction("Conv_ByteToFloat"), @params);
    }
    public int Conv_BoolToInt(bool InBool)
    {
        Span<(string name, object value)> @params = [
            ("InBool", InBool)
        ];
        return ProcessEvent<int>(GetFunction("Conv_BoolToInt"), @params);
    }
    public float Conv_BoolToFloat(bool InBool)
    {
        Span<(string name, object value)> @params = [
            ("InBool", InBool)
        ];
        return ProcessEvent<float>(GetFunction("Conv_BoolToFloat"), @params);
    }
    public byte Conv_BoolToByte(bool InBool)
    {
        Span<(string name, object value)> @params = [
            ("InBool", InBool)
        ];
        return ProcessEvent<byte>(GetFunction("Conv_BoolToByte"), @params);
    }
    public FTransform ComposeTransforms(ref FTransform A, ref FTransform B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FTransform>(GetFunction("ComposeTransforms"), @params);
    }
    public FRotator ComposeRotators(FRotator A, FRotator B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FRotator>(GetFunction("ComposeRotators"), @params);
    }
    public bool ClassIsChildOf(UClass* TestClass, UClass* ParentClass)
    {
        Span<(string name, object value)> @params = [
            ("TestClass", (IntPtr)TestClass), 
            ("ParentClass", (IntPtr)ParentClass)
        ];
        return ProcessEvent<bool>(GetFunction("ClassIsChildOf"), @params);
    }
    public FVector ClampVectorSize(FVector A, float Min, float Max)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("Min", Min), 
            ("Max", Max)
        ];
        return ProcessEvent<FVector>(GetFunction("ClampVectorSize"), @params);
    }
    public long ClampInt64(long Value, long Min, long Max)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("Min", Min), 
            ("Max", Max)
        ];
        return ProcessEvent<long>(GetFunction("ClampInt64"), @params);
    }
    public float ClampAxis(float Angle)
    {
        Span<(string name, object value)> @params = [
            ("Angle", Angle)
        ];
        return ProcessEvent<float>(GetFunction("ClampAxis"), @params);
    }
    public FVector2D ClampAxes2D(FVector2D A, float MinAxisVal, float MaxAxisVal)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("MinAxisVal", MinAxisVal), 
            ("MaxAxisVal", MaxAxisVal)
        ];
        return ProcessEvent<FVector2D>(GetFunction("ClampAxes2D"), @params);
    }
    public float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees)
    {
        Span<(string name, object value)> @params = [
            ("AngleDegrees", AngleDegrees), 
            ("MinAngleDegrees", MinAngleDegrees), 
            ("MaxAngleDegrees", MaxAngleDegrees)
        ];
        return ProcessEvent<float>(GetFunction("ClampAngle"), @params);
    }
    public int Clamp(int Value, int Min, int Max)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("Min", Min), 
            ("Max", Max)
        ];
        return ProcessEvent<int>(GetFunction("Clamp"), @params);
    }
    public FLinearColor CInterpTo(FLinearColor Current, FLinearColor Target, float DeltaTime, float InterpSpeed)
    {
        Span<(string name, object value)> @params = [
            ("Current", Current), 
            ("Target", Target), 
            ("DeltaTime", DeltaTime), 
            ("InterpSpeed", InterpSpeed)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("CInterpTo"), @params);
    }
    public void BreakVector4(ref FVector4 InVec, ref float X, ref float Y, ref float Z, ref float W)
    {
        Span<(string name, object value)> @params = [
            ("InVec", InVec), 
            ("X", X), 
            ("Y", Y), 
            ("Z", Z), 
            ("W", W)
        ];
        ProcessEvent(GetFunction("BreakVector4"), @params);
    }
    public void BreakVector2D(FVector2D InVec, ref float X, ref float Y)
    {
        Span<(string name, object value)> @params = [
            ("InVec", InVec), 
            ("X", X), 
            ("Y", Y)
        ];
        ProcessEvent(GetFunction("BreakVector2D"), @params);
    }
    public void BreakVector(FVector InVec, ref float X, ref float Y, ref float Z)
    {
        Span<(string name, object value)> @params = [
            ("InVec", InVec), 
            ("X", X), 
            ("Y", Y), 
            ("Z", Z)
        ];
        ProcessEvent(GetFunction("BreakVector"), @params);
    }
    public void BreakTransform(ref FTransform InTransform, ref FVector Location, ref FRotator Rotation, ref FVector Scale)
    {
        Span<(string name, object value)> @params = [
            ("InTransform", InTransform), 
            ("Location", Location), 
            ("Rotation", Rotation), 
            ("Scale", Scale)
        ];
        ProcessEvent(GetFunction("BreakTransform"), @params);
    }
    public void BreakTimespan2(FTimespan InTimespan, ref int Days, ref int Hours, ref int Minutes, ref int Seconds, ref int FractionNano)
    {
        Span<(string name, object value)> @params = [
            ("InTimespan", InTimespan), 
            ("Days", Days), 
            ("Hours", Hours), 
            ("Minutes", Minutes), 
            ("Seconds", Seconds), 
            ("FractionNano", FractionNano)
        ];
        ProcessEvent(GetFunction("BreakTimespan2"), @params);
    }
    public void BreakTimespan(FTimespan InTimespan, ref int Days, ref int Hours, ref int Minutes, ref int Seconds, ref int Milliseconds)
    {
        Span<(string name, object value)> @params = [
            ("InTimespan", InTimespan), 
            ("Days", Days), 
            ("Hours", Hours), 
            ("Minutes", Minutes), 
            ("Seconds", Seconds), 
            ("Milliseconds", Milliseconds)
        ];
        ProcessEvent(GetFunction("BreakTimespan"), @params);
    }
    public void BreakRotIntoAxes(ref FRotator InRot, ref FVector X, ref FVector Y, ref FVector Z)
    {
        Span<(string name, object value)> @params = [
            ("InRot", InRot), 
            ("X", X), 
            ("Y", Y), 
            ("Z", Z)
        ];
        ProcessEvent(GetFunction("BreakRotIntoAxes"), @params);
    }
    public void BreakRotator(FRotator InRot, ref float Roll, ref float Pitch, ref float Yaw)
    {
        Span<(string name, object value)> @params = [
            ("InRot", InRot), 
            ("Roll", Roll), 
            ("Pitch", Pitch), 
            ("Yaw", Yaw)
        ];
        ProcessEvent(GetFunction("BreakRotator"), @params);
    }
    public void BreakRandomStream(ref FRandomStream InRandomStream, ref int InitialSeed)
    {
        Span<(string name, object value)> @params = [
            ("InRandomStream", InRandomStream), 
            ("InitialSeed", InitialSeed)
        ];
        ProcessEvent(GetFunction("BreakRandomStream"), @params);
    }
    public void BreakQualifiedFrameTime(ref FQualifiedFrameTime InFrameTime, ref FFrameNumber Frame, ref FFrameRate FrameRate, ref float SubFrame)
    {
        Span<(string name, object value)> @params = [
            ("InFrameTime", InFrameTime), 
            ("Frame", Frame), 
            ("FrameRate", FrameRate), 
            ("SubFrame", SubFrame)
        ];
        ProcessEvent(GetFunction("BreakQualifiedFrameTime"), @params);
    }
    public void BreakFrameRate(ref FFrameRate InFrameRate, ref int Numerator, ref int Denominator)
    {
        Span<(string name, object value)> @params = [
            ("InFrameRate", InFrameRate), 
            ("Numerator", Numerator), 
            ("Denominator", Denominator)
        ];
        ProcessEvent(GetFunction("BreakFrameRate"), @params);
    }
    public void BreakDateTime(FDateTime InDateTime, ref int Year, ref int Month, ref int Day, ref int Hour, ref int Minute, ref int Second, ref int Millisecond)
    {
        Span<(string name, object value)> @params = [
            ("InDateTime", InDateTime), 
            ("Year", Year), 
            ("Month", Month), 
            ("Day", Day), 
            ("Hour", Hour), 
            ("Minute", Minute), 
            ("Second", Second), 
            ("Millisecond", Millisecond)
        ];
        ProcessEvent(GetFunction("BreakDateTime"), @params);
    }
    public void BreakColor(FLinearColor InColor, ref float R, ref float G, ref float B, ref float A)
    {
        Span<(string name, object value)> @params = [
            ("InColor", InColor), 
            ("R", R), 
            ("G", G), 
            ("B", B), 
            ("A", A)
        ];
        ProcessEvent(GetFunction("BreakColor"), @params);
    }
    public bool BooleanXOR(bool A, bool B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("BooleanXOR"), @params);
    }
    public bool BooleanOR(bool A, bool B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("BooleanOR"), @params);
    }
    public bool BooleanNOR(bool A, bool B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("BooleanNOR"), @params);
    }
    public bool BooleanNAND(bool A, bool B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("BooleanNAND"), @params);
    }
    public bool BooleanAND(bool A, bool B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("BooleanAND"), @params);
    }
    public byte BMin(byte A, byte B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<byte>(GetFunction("BMin"), @params);
    }
    public byte BMax(byte A, byte B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<byte>(GetFunction("BMax"), @params);
    }
    public float Atan2(float Y, float X)
    {
        Span<(string name, object value)> @params = [
            ("Y", Y), 
            ("X", X)
        ];
        return ProcessEvent<float>(GetFunction("Atan2"), @params);
    }
    public float Atan(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Atan"), @params);
    }
    public float Asin(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Asin"), @params);
    }
    public int And_IntInt(int A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<int>(GetFunction("And_IntInt"), @params);
    }
    public long And_Int64Int64(long A, long B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<long>(GetFunction("And_Int64Int64"), @params);
    }
    public FVector Add_VectorVector(FVector A, FVector B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector>(GetFunction("Add_VectorVector"), @params);
    }
    public FVector Add_VectorInt(FVector A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector>(GetFunction("Add_VectorInt"), @params);
    }
    public FVector Add_VectorFloat(FVector A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector>(GetFunction("Add_VectorFloat"), @params);
    }
    public FVector4 Add_Vector4Vector4(ref FVector4 A, ref FVector4 B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector4>(GetFunction("Add_Vector4Vector4"), @params);
    }
    public FVector2D Add_Vector2DVector2D(FVector2D A, FVector2D B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector2D>(GetFunction("Add_Vector2DVector2D"), @params);
    }
    public FVector2D Add_Vector2DFloat(FVector2D A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FVector2D>(GetFunction("Add_Vector2DFloat"), @params);
    }
    public FTimespan Add_TimespanTimespan(FTimespan A, FTimespan B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FTimespan>(GetFunction("Add_TimespanTimespan"), @params);
    }
    public FQuat Add_QuatQuat(ref FQuat A, ref FQuat B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FQuat>(GetFunction("Add_QuatQuat"), @params);
    }
    public FMatrix Add_MatrixMatrix(ref FMatrix A, ref FMatrix B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FMatrix>(GetFunction("Add_MatrixMatrix"), @params);
    }
    public FLinearColor Add_LinearColorLinearColor(FLinearColor A, FLinearColor B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("Add_LinearColorLinearColor"), @params);
    }
    public FIntPoint Add_IntPointIntPoint(FIntPoint A, FIntPoint B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FIntPoint>(GetFunction("Add_IntPointIntPoint"), @params);
    }
    public FIntPoint Add_IntPointInt(FIntPoint A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FIntPoint>(GetFunction("Add_IntPointInt"), @params);
    }
    public int Add_IntInt(int A, int B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<int>(GetFunction("Add_IntInt"), @params);
    }
    public long Add_Int64Int64(long A, long B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<long>(GetFunction("Add_Int64Int64"), @params);
    }
    public float Add_FloatFloat(float A, float B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<float>(GetFunction("Add_FloatFloat"), @params);
    }
    public FDateTime Add_DateTimeTimespan(FDateTime A, FTimespan B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FDateTime>(GetFunction("Add_DateTimeTimespan"), @params);
    }
    public FDateTime Add_DateTimeDateTime(FDateTime A, FDateTime B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FDateTime>(GetFunction("Add_DateTimeDateTime"), @params);
    }
    public byte Add_ByteByte(byte A, byte B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<byte>(GetFunction("Add_ByteByte"), @params);
    }
    public float Acos(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Acos"), @params);
    }
    public long Abs_Int64(long A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<long>(GetFunction("Abs_Int64"), @params);
    }
    public int Abs_Int(int A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<int>(GetFunction("Abs_Int"), @params);
    }
    public float Abs(float A)
    {
        Span<(string name, object value)> @params = [
            ("A", A)
        ];
        return ProcessEvent<float>(GetFunction("Abs"), @params);
    }
}

public unsafe class KismetNodeHelperLibrary : ObjectBase<UKismetNodeHelperLibrary>
{
    public KismetNodeHelperLibrary(IntPtr pointer) : base(pointer) {}
    public void MarkBit(ref int Data, int Index)
    {
        Span<(string name, object value)> @params = [
            ("Data", Data), 
            ("Index", Index)
        ];
        ProcessEvent(GetFunction("MarkBit"), @params);
    }
    public bool HasUnmarkedBit(int Data, int NumBits)
    {
        Span<(string name, object value)> @params = [
            ("Data", Data), 
            ("NumBits", NumBits)
        ];
        return ProcessEvent<bool>(GetFunction("HasUnmarkedBit"), @params);
    }
    public bool HasMarkedBit(int Data, int NumBits)
    {
        Span<(string name, object value)> @params = [
            ("Data", Data), 
            ("NumBits", NumBits)
        ];
        return ProcessEvent<bool>(GetFunction("HasMarkedBit"), @params);
    }
    public byte GetValidValue(UEnum* Enum, byte EnumeratorValue)
    {
        Span<(string name, object value)> @params = [
            ("Enum", (IntPtr)Enum), 
            ("EnumeratorValue", EnumeratorValue)
        ];
        return ProcessEvent<byte>(GetFunction("GetValidValue"), @params);
    }
    public int GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom)
    {
        Span<(string name, object value)> @params = [
            ("Data", Data), 
            ("StartIdx", StartIdx), 
            ("NumBits", NumBits), 
            ("bRandom", bRandom)
        ];
        return ProcessEvent<int>(GetFunction("GetUnmarkedBit"), @params);
    }
    public int GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits)
    {
        Span<(string name, object value)> @params = [
            ("Data", Data), 
            ("StartIdx", StartIdx), 
            ("NumBits", NumBits)
        ];
        return ProcessEvent<int>(GetFunction("GetRandomUnmarkedBit"), @params);
    }
    public int GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits)
    {
        Span<(string name, object value)> @params = [
            ("Data", Data), 
            ("StartIdx", StartIdx), 
            ("NumBits", NumBits)
        ];
        return ProcessEvent<int>(GetFunction("GetFirstUnmarkedBit"), @params);
    }
    public byte GetEnumeratorValueFromIndex(UEnum* Enum, byte EnumeratorIndex)
    {
        Span<(string name, object value)> @params = [
            ("Enum", (IntPtr)Enum), 
            ("EnumeratorIndex", EnumeratorIndex)
        ];
        return ProcessEvent<byte>(GetFunction("GetEnumeratorValueFromIndex"), @params);
    }
    public FString GetEnumeratorUserFriendlyName(UEnum* Enum, byte EnumeratorValue)
    {
        Span<(string name, object value)> @params = [
            ("Enum", (IntPtr)Enum), 
            ("EnumeratorValue", EnumeratorValue)
        ];
        return ProcessEvent<FString>(GetFunction("GetEnumeratorUserFriendlyName"), @params);
    }
    public FName GetEnumeratorName(UEnum* Enum, byte EnumeratorValue)
    {
        Span<(string name, object value)> @params = [
            ("Enum", (IntPtr)Enum), 
            ("EnumeratorValue", EnumeratorValue)
        ];
        return ProcessEvent<FName>(GetFunction("GetEnumeratorName"), @params);
    }
    public void ClearBit(ref int Data, int Index)
    {
        Span<(string name, object value)> @params = [
            ("Data", Data), 
            ("Index", Index)
        ];
        ProcessEvent(GetFunction("ClearBit"), @params);
    }
    public void ClearAllBits(ref int Data)
    {
        Span<(string name, object value)> @params = [
            ("Data", Data)
        ];
        ProcessEvent(GetFunction("ClearAllBits"), @params);
    }
    public bool BitIsMarked(int Data, int Index)
    {
        Span<(string name, object value)> @params = [
            ("Data", Data), 
            ("Index", Index)
        ];
        return ProcessEvent<bool>(GetFunction("BitIsMarked"), @params);
    }
}

public unsafe class KismetRenderingLibrary : ObjectBase<UKismetRenderingLibrary>
{
    public KismetRenderingLibrary(IntPtr pointer) : base(pointer) {}
    public void SetCastInsetShadowForAllAttachments(UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup)
    {
        Span<(string name, object value)> @params = [
            ("PrimitiveComponent", (IntPtr)PrimitiveComponent), 
            ("bCastInsetShadow", bCastInsetShadow), 
            ("bLightAttachmentsAsGroup", bLightAttachmentsAsGroup)
        ];
        ProcessEvent(GetFunction("SetCastInsetShadowForAllAttachments"), @params);
    }
    public UTexture2D* RenderTargetCreateStaticTexture2DEditorOnly(UTextureRenderTarget2D* RenderTarget, FString Name, TextureCompressionSettings CompressionSettings, TextureMipGenSettings MipSettings)
    {
        Span<(string name, object value)> @params = [
            ("RenderTarget", (IntPtr)RenderTarget), 
            ("Name", Name), 
            ("CompressionSettings", CompressionSettings), 
            ("MipSettings", MipSettings)
        ];
        return (UTexture2D*)ProcessEvent<IntPtr>(GetFunction("RenderTargetCreateStaticTexture2DEditorOnly"), @params);
    }
    public void ReleaseRenderTarget2D(UTextureRenderTarget2D* TextureRenderTarget)
    {
        Span<(string name, object value)> @params = [
            ("TextureRenderTarget", (IntPtr)TextureRenderTarget)
        ];
        ProcessEvent(GetFunction("ReleaseRenderTarget2D"), @params);
    }
    public FColor ReadRenderTargetUV(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, float U, float V)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("TextureRenderTarget", (IntPtr)TextureRenderTarget), 
            ("U", U), 
            ("V", V)
        ];
        return ProcessEvent<FColor>(GetFunction("ReadRenderTargetUV"), @params);
    }
    public FLinearColor ReadRenderTargetRawUV(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, float U, float V)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("TextureRenderTarget", (IntPtr)TextureRenderTarget), 
            ("U", U), 
            ("V", V)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("ReadRenderTargetRawUV"), @params);
    }
    public FLinearColor ReadRenderTargetRawPixel(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, int X, int Y)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("TextureRenderTarget", (IntPtr)TextureRenderTarget), 
            ("X", X), 
            ("Y", Y)
        ];
        return ProcessEvent<FLinearColor>(GetFunction("ReadRenderTargetRawPixel"), @params);
    }
    public FColor ReadRenderTargetPixel(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, int X, int Y)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("TextureRenderTarget", (IntPtr)TextureRenderTarget), 
            ("X", X), 
            ("Y", Y)
        ];
        return ProcessEvent<FColor>(GetFunction("ReadRenderTargetPixel"), @params);
    }
    public FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int Bone0, byte Weight0, int Bone1, byte Weight1, int Bone2, byte Weight2, int Bone3, byte Weight3)
    {
        Span<(string name, object value)> @params = [
            ("Bone0", Bone0), 
            ("Weight0", Weight0), 
            ("Bone1", Bone1), 
            ("Weight1", Weight1), 
            ("Bone2", Bone2), 
            ("Weight2", Weight2), 
            ("Bone3", Bone3), 
            ("Weight3", Weight3)
        ];
        return ProcessEvent<FSkelMeshSkinWeightInfo>(GetFunction("MakeSkinWeightInfo"), @params);
    }
    public UTexture2D* ImportFileAsTexture2D(UObject* WorldContextObject, FString Filename)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Filename", Filename)
        ];
        return (UTexture2D*)ProcessEvent<IntPtr>(GetFunction("ImportFileAsTexture2D"), @params);
    }
    public UTexture2D* ImportBufferAsTexture2D(UObject* WorldContextObject, ref TArray<byte> Buffer)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Buffer", Buffer)
        ];
        return (UTexture2D*)ProcessEvent<IntPtr>(GetFunction("ImportBufferAsTexture2D"), @params);
    }
    public void ExportTexture2D(UObject* WorldContextObject, UTexture2D* Texture, FString FilePath, FString Filename)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Texture", (IntPtr)Texture), 
            ("FilePath", FilePath), 
            ("Filename", Filename)
        ];
        ProcessEvent(GetFunction("ExportTexture2D"), @params);
    }
    public void ExportRenderTarget(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("TextureRenderTarget", (IntPtr)TextureRenderTarget), 
            ("FilePath", FilePath), 
            ("Filename", Filename)
        ];
        ProcessEvent(GetFunction("ExportRenderTarget"), @params);
    }
    public void EndDrawCanvasToRenderTarget(UObject* WorldContextObject, ref FDrawToRenderTargetContext Context)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Context", Context)
        ];
        ProcessEvent(GetFunction("EndDrawCanvasToRenderTarget"), @params);
    }
    public void DrawMaterialToRenderTarget(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, UMaterialInterface* Material)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("TextureRenderTarget", (IntPtr)TextureRenderTarget), 
            ("Material", (IntPtr)Material)
        ];
        ProcessEvent(GetFunction("DrawMaterialToRenderTarget"), @params);
    }
    public UTextureRenderTargetVolume* CreateRenderTargetVolume(UObject* WorldContextObject, int Width, int Height, int Depth, ETextureRenderTargetFormat Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Width", Width), 
            ("Height", Height), 
            ("Depth", Depth), 
            ("Format", Format), 
            ("ClearColor", ClearColor), 
            ("bAutoGenerateMipMaps", bAutoGenerateMipMaps)
        ];
        return (UTextureRenderTargetVolume*)ProcessEvent<IntPtr>(GetFunction("CreateRenderTargetVolume"), @params);
    }
    public UTextureRenderTarget2DArray* CreateRenderTarget2DArray(UObject* WorldContextObject, int Width, int Height, int Slices, ETextureRenderTargetFormat Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Width", Width), 
            ("Height", Height), 
            ("Slices", Slices), 
            ("Format", Format), 
            ("ClearColor", ClearColor), 
            ("bAutoGenerateMipMaps", bAutoGenerateMipMaps)
        ];
        return (UTextureRenderTarget2DArray*)ProcessEvent<IntPtr>(GetFunction("CreateRenderTarget2DArray"), @params);
    }
    public UTextureRenderTarget2D* CreateRenderTarget2D(UObject* WorldContextObject, int Width, int Height, ETextureRenderTargetFormat Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Width", Width), 
            ("Height", Height), 
            ("Format", Format), 
            ("ClearColor", ClearColor), 
            ("bAutoGenerateMipMaps", bAutoGenerateMipMaps)
        ];
        return (UTextureRenderTarget2D*)ProcessEvent<IntPtr>(GetFunction("CreateRenderTarget2D"), @params);
    }
    public void ConvertRenderTargetToTexture2DEditorOnly(UObject* WorldContextObject, UTextureRenderTarget2D* RenderTarget, UTexture2D* Texture)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("RenderTarget", (IntPtr)RenderTarget), 
            ("Texture", (IntPtr)Texture)
        ];
        ProcessEvent(GetFunction("ConvertRenderTargetToTexture2DEditorOnly"), @params);
    }
    public void ClearRenderTarget2D(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, FLinearColor ClearColor)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("TextureRenderTarget", (IntPtr)TextureRenderTarget), 
            ("ClearColor", ClearColor)
        ];
        ProcessEvent(GetFunction("ClearRenderTarget2D"), @params);
    }
    public void BreakSkinWeightInfo(FSkelMeshSkinWeightInfo InWeight, ref int Bone0, ref byte Weight0, ref int Bone1, ref byte Weight1, ref int Bone2, ref byte Weight2, ref int Bone3, ref byte Weight3)
    {
        Span<(string name, object value)> @params = [
            ("InWeight", InWeight), 
            ("Bone0", Bone0), 
            ("Weight0", Weight0), 
            ("Bone1", Bone1), 
            ("Weight1", Weight1), 
            ("Bone2", Bone2), 
            ("Weight2", Weight2), 
            ("Bone3", Bone3), 
            ("Weight3", Weight3)
        ];
        ProcessEvent(GetFunction("BreakSkinWeightInfo"), @params);
    }
    public void BeginDrawCanvasToRenderTarget(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, ref UCanvas* Canvas, ref FVector2D Size, ref FDrawToRenderTargetContext Context)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("TextureRenderTarget", (IntPtr)TextureRenderTarget), 
            ("Canvas", (IntPtr)Canvas), 
            ("Size", Size), 
            ("Context", Context)
        ];
        ProcessEvent(GetFunction("BeginDrawCanvasToRenderTarget"), @params);
    }
}

public unsafe class KismetStringLibrary : ObjectBase<UKismetStringLibrary>
{
    public KismetStringLibrary(IntPtr pointer) : base(pointer) {}
    public FString TrimTrailing(FString SourceString)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString)
        ];
        return ProcessEvent<FString>(GetFunction("TrimTrailing"), @params);
    }
    public FString Trim(FString SourceString)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString)
        ];
        return ProcessEvent<FString>(GetFunction("Trim"), @params);
    }
    public FString ToUpper(FString SourceString)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString)
        ];
        return ProcessEvent<FString>(GetFunction("ToUpper"), @params);
    }
    public FString ToLower(FString SourceString)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString)
        ];
        return ProcessEvent<FString>(GetFunction("ToLower"), @params);
    }
    public FString TimeSecondsToString(float InSeconds)
    {
        Span<(string name, object value)> @params = [
            ("InSeconds", InSeconds)
        ];
        return ProcessEvent<FString>(GetFunction("TimeSecondsToString"), @params);
    }
    public bool StartsWith(FString SourceString, FString InPrefix, ESearchCase SearchCase)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString), 
            ("InPrefix", InPrefix), 
            ("SearchCase", SearchCase)
        ];
        return ProcessEvent<bool>(GetFunction("StartsWith"), @params);
    }
    public bool Split(FString SourceString, FString InStr, ref FString LeftS, ref FString RightS, ESearchCase SearchCase, ESearchDir SearchDir)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString), 
            ("InStr", InStr), 
            ("LeftS", LeftS), 
            ("RightS", RightS), 
            ("SearchCase", SearchCase), 
            ("SearchDir", SearchDir)
        ];
        return ProcessEvent<bool>(GetFunction("Split"), @params);
    }
    public FString RightPad(FString SourceString, int ChCount)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString), 
            ("ChCount", ChCount)
        ];
        return ProcessEvent<FString>(GetFunction("RightPad"), @params);
    }
    public FString RightChop(FString SourceString, int Count)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString), 
            ("Count", Count)
        ];
        return ProcessEvent<FString>(GetFunction("RightChop"), @params);
    }
    public FString Right(FString SourceString, int Count)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString), 
            ("Count", Count)
        ];
        return ProcessEvent<FString>(GetFunction("Right"), @params);
    }
    public FString Reverse(FString SourceString)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString)
        ];
        return ProcessEvent<FString>(GetFunction("Reverse"), @params);
    }
    public int ReplaceInline(ref FString SourceString, FString SearchText, FString ReplacementText, ESearchCase SearchCase)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString), 
            ("SearchText", SearchText), 
            ("ReplacementText", ReplacementText), 
            ("SearchCase", SearchCase)
        ];
        return ProcessEvent<int>(GetFunction("ReplaceInline"), @params);
    }
    public FString Replace(FString SourceString, FString From, FString To, ESearchCase SearchCase)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString), 
            ("From", From), 
            ("To", To), 
            ("SearchCase", SearchCase)
        ];
        return ProcessEvent<FString>(GetFunction("Replace"), @params);
    }
    public TArray<FString> ParseIntoArray(FString SourceString, FString Delimiter, bool CullEmptyStrings)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString), 
            ("Delimiter", Delimiter), 
            ("CullEmptyStrings", CullEmptyStrings)
        ];
        return ProcessEvent<TArray<FString>>(GetFunction("ParseIntoArray"), @params);
    }
    public bool NotEqual_StrStr(FString A, FString B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_StrStr"), @params);
    }
    public bool NotEqual_StriStri(FString A, FString B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_StriStri"), @params);
    }
    public FString Mid(FString SourceString, int Start, int Count)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString), 
            ("Start", Start), 
            ("Count", Count)
        ];
        return ProcessEvent<FString>(GetFunction("Mid"), @params);
    }
    public bool MatchesWildcard(FString SourceString, FString Wildcard, ESearchCase SearchCase)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString), 
            ("Wildcard", Wildcard), 
            ("SearchCase", SearchCase)
        ];
        return ProcessEvent<bool>(GetFunction("MatchesWildcard"), @params);
    }
    public int Len(FString S)
    {
        Span<(string name, object value)> @params = [
            ("S", S)
        ];
        return ProcessEvent<int>(GetFunction("Len"), @params);
    }
    public FString LeftPad(FString SourceString, int ChCount)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString), 
            ("ChCount", ChCount)
        ];
        return ProcessEvent<FString>(GetFunction("LeftPad"), @params);
    }
    public FString LeftChop(FString SourceString, int Count)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString), 
            ("Count", Count)
        ];
        return ProcessEvent<FString>(GetFunction("LeftChop"), @params);
    }
    public FString Left(FString SourceString, int Count)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString), 
            ("Count", Count)
        ];
        return ProcessEvent<FString>(GetFunction("Left"), @params);
    }
    public FString JoinStringArray(ref TArray<FString> SourceArray, FString Separator)
    {
        Span<(string name, object value)> @params = [
            ("SourceArray", SourceArray), 
            ("Separator", Separator)
        ];
        return ProcessEvent<FString>(GetFunction("JoinStringArray"), @params);
    }
    public bool IsNumeric(FString SourceString)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString)
        ];
        return ProcessEvent<bool>(GetFunction("IsNumeric"), @params);
    }
    public bool IsEmpty(FString inString)
    {
        Span<(string name, object value)> @params = [
            ("inString", inString)
        ];
        return ProcessEvent<bool>(GetFunction("IsEmpty"), @params);
    }
    public FString GetSubstring(FString SourceString, int StartIndex, int Length)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString), 
            ("StartIndex", StartIndex), 
            ("Length", Length)
        ];
        return ProcessEvent<FString>(GetFunction("GetSubstring"), @params);
    }
    public int GetCharacterAsNumber(FString SourceString, int Index)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString), 
            ("Index", Index)
        ];
        return ProcessEvent<int>(GetFunction("GetCharacterAsNumber"), @params);
    }
    public TArray<FString> GetCharacterArrayFromString(FString SourceString)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString)
        ];
        return ProcessEvent<TArray<FString>>(GetFunction("GetCharacterArrayFromString"), @params);
    }
    public int FindSubstring(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition)
    {
        Span<(string name, object value)> @params = [
            ("SearchIn", SearchIn), 
            ("Substring", Substring), 
            ("bUseCase", bUseCase), 
            ("bSearchFromEnd", bSearchFromEnd), 
            ("StartPosition", StartPosition)
        ];
        return ProcessEvent<int>(GetFunction("FindSubstring"), @params);
    }
    public bool EqualEqual_StrStr(FString A, FString B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_StrStr"), @params);
    }
    public bool EqualEqual_StriStri(FString A, FString B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_StriStri"), @params);
    }
    public bool EndsWith(FString SourceString, FString InSuffix, ESearchCase SearchCase)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString), 
            ("InSuffix", InSuffix), 
            ("SearchCase", SearchCase)
        ];
        return ProcessEvent<bool>(GetFunction("EndsWith"), @params);
    }
    public int CullArray(FString SourceString, ref TArray<FString> inArray)
    {
        Span<(string name, object value)> @params = [
            ("SourceString", SourceString), 
            ("inArray", inArray)
        ];
        return ProcessEvent<int>(GetFunction("CullArray"), @params);
    }
    public FString Conv_VectorToString(FVector InVec)
    {
        Span<(string name, object value)> @params = [
            ("InVec", InVec)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_VectorToString"), @params);
    }
    public FString Conv_Vector2dToString(FVector2D InVec)
    {
        Span<(string name, object value)> @params = [
            ("InVec", InVec)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_Vector2dToString"), @params);
    }
    public FString Conv_TransformToString(ref FTransform InTrans)
    {
        Span<(string name, object value)> @params = [
            ("InTrans", InTrans)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_TransformToString"), @params);
    }
    public void Conv_StringToVector2D(FString inString, ref FVector2D OutConvertedVector2D, ref bool OutIsValid)
    {
        Span<(string name, object value)> @params = [
            ("inString", inString), 
            ("OutConvertedVector2D", OutConvertedVector2D), 
            ("OutIsValid", OutIsValid)
        ];
        ProcessEvent(GetFunction("Conv_StringToVector2D"), @params);
    }
    public void Conv_StringToVector(FString inString, ref FVector OutConvertedVector, ref bool OutIsValid)
    {
        Span<(string name, object value)> @params = [
            ("inString", inString), 
            ("OutConvertedVector", OutConvertedVector), 
            ("OutIsValid", OutIsValid)
        ];
        ProcessEvent(GetFunction("Conv_StringToVector"), @params);
    }
    public void Conv_StringToRotator(FString inString, ref FRotator OutConvertedRotator, ref bool OutIsValid)
    {
        Span<(string name, object value)> @params = [
            ("inString", inString), 
            ("OutConvertedRotator", OutConvertedRotator), 
            ("OutIsValid", OutIsValid)
        ];
        ProcessEvent(GetFunction("Conv_StringToRotator"), @params);
    }
    public FName Conv_StringToName(FString inString)
    {
        Span<(string name, object value)> @params = [
            ("inString", inString)
        ];
        return ProcessEvent<FName>(GetFunction("Conv_StringToName"), @params);
    }
    public int Conv_StringToInt(FString inString)
    {
        Span<(string name, object value)> @params = [
            ("inString", inString)
        ];
        return ProcessEvent<int>(GetFunction("Conv_StringToInt"), @params);
    }
    public float Conv_StringToFloat(FString inString)
    {
        Span<(string name, object value)> @params = [
            ("inString", inString)
        ];
        return ProcessEvent<float>(GetFunction("Conv_StringToFloat"), @params);
    }
    public void Conv_StringToColor(FString inString, ref FLinearColor OutConvertedColor, ref bool OutIsValid)
    {
        Span<(string name, object value)> @params = [
            ("inString", inString), 
            ("OutConvertedColor", OutConvertedColor), 
            ("OutIsValid", OutIsValid)
        ];
        ProcessEvent(GetFunction("Conv_StringToColor"), @params);
    }
    public FString Conv_RotatorToString(FRotator InRot)
    {
        Span<(string name, object value)> @params = [
            ("InRot", InRot)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_RotatorToString"), @params);
    }
    public FString Conv_ObjectToString(UObject* InObj)
    {
        Span<(string name, object value)> @params = [
            ("InObj", (IntPtr)InObj)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_ObjectToString"), @params);
    }
    public FString Conv_NameToString(FName InName)
    {
        Span<(string name, object value)> @params = [
            ("InName", InName)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_NameToString"), @params);
    }
    public FString Conv_MatrixToString(ref FMatrix InMatrix)
    {
        Span<(string name, object value)> @params = [
            ("InMatrix", InMatrix)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_MatrixToString"), @params);
    }
    public FString Conv_IntVectorToString(FIntVector InIntVec)
    {
        Span<(string name, object value)> @params = [
            ("InIntVec", InIntVec)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_IntVectorToString"), @params);
    }
    public FString Conv_IntToString(int inInt)
    {
        Span<(string name, object value)> @params = [
            ("inInt", inInt)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_IntToString"), @params);
    }
    public FString Conv_IntPointToString(FIntPoint InIntPoint)
    {
        Span<(string name, object value)> @params = [
            ("InIntPoint", InIntPoint)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_IntPointToString"), @params);
    }
    public FString Conv_FloatToString(float InFloat)
    {
        Span<(string name, object value)> @params = [
            ("InFloat", InFloat)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_FloatToString"), @params);
    }
    public FString Conv_ColorToString(FLinearColor InColor)
    {
        Span<(string name, object value)> @params = [
            ("InColor", InColor)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_ColorToString"), @params);
    }
    public FString Conv_ByteToString(byte InByte)
    {
        Span<(string name, object value)> @params = [
            ("InByte", InByte)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_ByteToString"), @params);
    }
    public FString Conv_BoolToString(bool InBool)
    {
        Span<(string name, object value)> @params = [
            ("InBool", InBool)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_BoolToString"), @params);
    }
    public bool Contains(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd)
    {
        Span<(string name, object value)> @params = [
            ("SearchIn", SearchIn), 
            ("Substring", Substring), 
            ("bUseCase", bUseCase), 
            ("bSearchFromEnd", bSearchFromEnd)
        ];
        return ProcessEvent<bool>(GetFunction("Contains"), @params);
    }
    public FString Concat_StrStr(FString A, FString B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<FString>(GetFunction("Concat_StrStr"), @params);
    }
    public FString BuildString_Vector2d(FString AppendTo, FString Prefix, FVector2D InVector2D, FString Suffix)
    {
        Span<(string name, object value)> @params = [
            ("AppendTo", AppendTo), 
            ("Prefix", Prefix), 
            ("InVector2D", InVector2D), 
            ("Suffix", Suffix)
        ];
        return ProcessEvent<FString>(GetFunction("BuildString_Vector2d"), @params);
    }
    public FString BuildString_Vector(FString AppendTo, FString Prefix, FVector InVector, FString Suffix)
    {
        Span<(string name, object value)> @params = [
            ("AppendTo", AppendTo), 
            ("Prefix", Prefix), 
            ("InVector", InVector), 
            ("Suffix", Suffix)
        ];
        return ProcessEvent<FString>(GetFunction("BuildString_Vector"), @params);
    }
    public FString BuildString_Rotator(FString AppendTo, FString Prefix, FRotator InRot, FString Suffix)
    {
        Span<(string name, object value)> @params = [
            ("AppendTo", AppendTo), 
            ("Prefix", Prefix), 
            ("InRot", InRot), 
            ("Suffix", Suffix)
        ];
        return ProcessEvent<FString>(GetFunction("BuildString_Rotator"), @params);
    }
    public FString BuildString_Object(FString AppendTo, FString Prefix, UObject* InObj, FString Suffix)
    {
        Span<(string name, object value)> @params = [
            ("AppendTo", AppendTo), 
            ("Prefix", Prefix), 
            ("InObj", (IntPtr)InObj), 
            ("Suffix", Suffix)
        ];
        return ProcessEvent<FString>(GetFunction("BuildString_Object"), @params);
    }
    public FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix)
    {
        Span<(string name, object value)> @params = [
            ("AppendTo", AppendTo), 
            ("Prefix", Prefix), 
            ("InName", InName), 
            ("Suffix", Suffix)
        ];
        return ProcessEvent<FString>(GetFunction("BuildString_Name"), @params);
    }
    public FString BuildString_IntVector(FString AppendTo, FString Prefix, FIntVector InIntVector, FString Suffix)
    {
        Span<(string name, object value)> @params = [
            ("AppendTo", AppendTo), 
            ("Prefix", Prefix), 
            ("InIntVector", InIntVector), 
            ("Suffix", Suffix)
        ];
        return ProcessEvent<FString>(GetFunction("BuildString_IntVector"), @params);
    }
    public FString BuildString_Int(FString AppendTo, FString Prefix, int inInt, FString Suffix)
    {
        Span<(string name, object value)> @params = [
            ("AppendTo", AppendTo), 
            ("Prefix", Prefix), 
            ("inInt", inInt), 
            ("Suffix", Suffix)
        ];
        return ProcessEvent<FString>(GetFunction("BuildString_Int"), @params);
    }
    public FString BuildString_Float(FString AppendTo, FString Prefix, float InFloat, FString Suffix)
    {
        Span<(string name, object value)> @params = [
            ("AppendTo", AppendTo), 
            ("Prefix", Prefix), 
            ("InFloat", InFloat), 
            ("Suffix", Suffix)
        ];
        return ProcessEvent<FString>(GetFunction("BuildString_Float"), @params);
    }
    public FString BuildString_Color(FString AppendTo, FString Prefix, FLinearColor InColor, FString Suffix)
    {
        Span<(string name, object value)> @params = [
            ("AppendTo", AppendTo), 
            ("Prefix", Prefix), 
            ("InColor", InColor), 
            ("Suffix", Suffix)
        ];
        return ProcessEvent<FString>(GetFunction("BuildString_Color"), @params);
    }
    public FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix)
    {
        Span<(string name, object value)> @params = [
            ("AppendTo", AppendTo), 
            ("Prefix", Prefix), 
            ("InBool", InBool), 
            ("Suffix", Suffix)
        ];
        return ProcessEvent<FString>(GetFunction("BuildString_Bool"), @params);
    }
}

public unsafe class KismetStringTableLibrary : ObjectBase<UKismetStringTableLibrary>
{
    public KismetStringTableLibrary(IntPtr pointer) : base(pointer) {}
    public bool IsRegisteredTableId(FName TableId)
    {
        Span<(string name, object value)> @params = [
            ("TableId", TableId)
        ];
        return ProcessEvent<bool>(GetFunction("IsRegisteredTableId"), @params);
    }
    public bool IsRegisteredTableEntry(FName TableId, FString Key)
    {
        Span<(string name, object value)> @params = [
            ("TableId", TableId), 
            ("Key", Key)
        ];
        return ProcessEvent<bool>(GetFunction("IsRegisteredTableEntry"), @params);
    }
    public FString GetTableNamespace(FName TableId)
    {
        Span<(string name, object value)> @params = [
            ("TableId", TableId)
        ];
        return ProcessEvent<FString>(GetFunction("GetTableNamespace"), @params);
    }
    public FString GetTableEntrySourceString(FName TableId, FString Key)
    {
        Span<(string name, object value)> @params = [
            ("TableId", TableId), 
            ("Key", Key)
        ];
        return ProcessEvent<FString>(GetFunction("GetTableEntrySourceString"), @params);
    }
    public FString GetTableEntryMetaData(FName TableId, FString Key, FName MetaDataId)
    {
        Span<(string name, object value)> @params = [
            ("TableId", TableId), 
            ("Key", Key), 
            ("MetaDataId", MetaDataId)
        ];
        return ProcessEvent<FString>(GetFunction("GetTableEntryMetaData"), @params);
    }
    public TArray<FName> GetRegisteredStringTables()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<FName>>(GetFunction("GetRegisteredStringTables"), @params);
    }
    public TArray<FName> GetMetaDataIdsFromStringTableEntry(FName TableId, FString Key)
    {
        Span<(string name, object value)> @params = [
            ("TableId", TableId), 
            ("Key", Key)
        ];
        return ProcessEvent<TArray<FName>>(GetFunction("GetMetaDataIdsFromStringTableEntry"), @params);
    }
    public TArray<FString> GetKeysFromStringTable(FName TableId)
    {
        Span<(string name, object value)> @params = [
            ("TableId", TableId)
        ];
        return ProcessEvent<TArray<FString>>(GetFunction("GetKeysFromStringTable"), @params);
    }
}

public unsafe class KismetSystemLibrary : ObjectBase<UKismetSystemLibrary>
{
    public KismetSystemLibrary(IntPtr pointer) : base(pointer) {}
    public void UnregisterForRemoteNotifications()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("UnregisterForRemoteNotifications"), @params);
    }
    public void UnloadPrimaryAssetList(ref TArray<FPrimaryAssetId> PrimaryAssetIdList)
    {
        Span<(string name, object value)> @params = [
            ("PrimaryAssetIdList", PrimaryAssetIdList)
        ];
        ProcessEvent(GetFunction("UnloadPrimaryAssetList"), @params);
    }
    public void UnloadPrimaryAsset(FPrimaryAssetId PrimaryAssetId)
    {
        Span<(string name, object value)> @params = [
            ("PrimaryAssetId", PrimaryAssetId)
        ];
        ProcessEvent(GetFunction("UnloadPrimaryAsset"), @params);
    }
    public void TransactObject(UObject* Object)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object)
        ];
        ProcessEvent(GetFunction("TransactObject"), @params);
    }
    public void StackTrace()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("StackTrace"), @params);
    }
    public bool SphereTraceSingleForObjects(UObject* WorldContextObject, FVector Start, FVector End, float Radius, ref TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref FHitResult OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("Radius", Radius), 
            ("ObjectTypes", ObjectTypes), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHit", OutHit), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("SphereTraceSingleForObjects"), @params);
    }
    public bool SphereTraceSingleByProfile(UObject* WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref FHitResult OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("Radius", Radius), 
            ("ProfileName", ProfileName), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHit", OutHit), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("SphereTraceSingleByProfile"), @params);
    }
    public bool SphereTraceSingle(UObject* WorldContextObject, FVector Start, FVector End, float Radius, ETraceTypeQuery TraceChannel, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref FHitResult OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("Radius", Radius), 
            ("TraceChannel", TraceChannel), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHit", OutHit), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("SphereTraceSingle"), @params);
    }
    public bool SphereTraceMultiForObjects(UObject* WorldContextObject, FVector Start, FVector End, float Radius, ref TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref TArray<FHitResult> OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("Radius", Radius), 
            ("ObjectTypes", ObjectTypes), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHits", OutHits), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("SphereTraceMultiForObjects"), @params);
    }
    public bool SphereTraceMultiByProfile(UObject* WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref TArray<FHitResult> OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("Radius", Radius), 
            ("ProfileName", ProfileName), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHits", OutHits), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("SphereTraceMultiByProfile"), @params);
    }
    public bool SphereTraceMulti(UObject* WorldContextObject, FVector Start, FVector End, float Radius, ETraceTypeQuery TraceChannel, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref TArray<FHitResult> OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("Radius", Radius), 
            ("TraceChannel", TraceChannel), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHits", OutHits), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("SphereTraceMulti"), @params);
    }
    public bool SphereOverlapComponents(UObject* WorldContextObject, FVector SpherePos, float SphereRadius, ref TArray<EObjectTypeQuery> ObjectTypes, UClass* ComponentClassFilter, ref TArray<IntPtr> ActorsToIgnore, ref TArray<IntPtr> OutComponents)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("SpherePos", SpherePos), 
            ("SphereRadius", SphereRadius), 
            ("ObjectTypes", ObjectTypes), 
            ("ComponentClassFilter", (IntPtr)ComponentClassFilter), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("OutComponents", OutComponents)
        ];
        return ProcessEvent<bool>(GetFunction("SphereOverlapComponents"), @params);
    }
    public bool SphereOverlapActors(UObject* WorldContextObject, FVector SpherePos, float SphereRadius, ref TArray<EObjectTypeQuery> ObjectTypes, UClass* ActorClassFilter, ref TArray<IntPtr> ActorsToIgnore, ref TArray<IntPtr> OutActors)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("SpherePos", SpherePos), 
            ("SphereRadius", SphereRadius), 
            ("ObjectTypes", ObjectTypes), 
            ("ActorClassFilter", (IntPtr)ActorClassFilter), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("OutActors", OutActors)
        ];
        return ProcessEvent<bool>(GetFunction("SphereOverlapActors"), @params);
    }
    public void SnapshotObject(UObject* Object)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object)
        ];
        ProcessEvent(GetFunction("SnapshotObject"), @params);
    }
    public void ShowPlatformSpecificLeaderboardScreen(FString CategoryName)
    {
        Span<(string name, object value)> @params = [
            ("CategoryName", CategoryName)
        ];
        ProcessEvent(GetFunction("ShowPlatformSpecificLeaderboardScreen"), @params);
    }
    public void ShowPlatformSpecificAchievementsScreen(APlayerController* SpecificPlayer)
    {
        Span<(string name, object value)> @params = [
            ("SpecificPlayer", (IntPtr)SpecificPlayer)
        ];
        ProcessEvent(GetFunction("ShowPlatformSpecificAchievementsScreen"), @params);
    }
    public void ShowInterstitialAd()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ShowInterstitialAd"), @params);
    }
    public void ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen)
    {
        Span<(string name, object value)> @params = [
            ("AdIdIndex", AdIdIndex), 
            ("bShowOnBottomOfScreen", bShowOnBottomOfScreen)
        ];
        ProcessEvent(GetFunction("ShowAdBanner"), @params);
    }
    public void SetWindowTitle(ref FText Title)
    {
        Span<(string name, object value)> @params = [
            ("Title", Title)
        ];
        ProcessEvent(GetFunction("SetWindowTitle"), @params);
    }
    public void SetVolumeButtonsHandledBySystem(bool bEnabled)
    {
        Span<(string name, object value)> @params = [
            ("bEnabled", bEnabled)
        ];
        ProcessEvent(GetFunction("SetVolumeButtonsHandledBySystem"), @params);
    }
    public void SetVectorPropertyByName(UObject* Object, FName PropertyName, ref FVector Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetVectorPropertyByName"), @params);
    }
    public void SetUserActivity(ref FUserActivity UserActivity)
    {
        Span<(string name, object value)> @params = [
            ("UserActivity", UserActivity)
        ];
        ProcessEvent(GetFunction("SetUserActivity"), @params);
    }
    public void SetTransformPropertyByName(UObject* Object, FName PropertyName, ref FTransform Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetTransformPropertyByName"), @params);
    }
    public void SetTextPropertyByName(UObject* Object, FName PropertyName, ref FText Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetTextPropertyByName"), @params);
    }
    public void SetSuppressViewportTransitionMessage(UObject* WorldContextObject, bool bState)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("bState", bState)
        ];
        ProcessEvent(GetFunction("SetSuppressViewportTransitionMessage"), @params);
    }
    public void SetStructurePropertyByName(UObject* Object, FName PropertyName, ref FGenericStruct Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetStructurePropertyByName"), @params);
    }
    public void SetStringPropertyByName(UObject* Object, FName PropertyName, FString Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetStringPropertyByName"), @params);
    }
    public void SetSoftObjectPropertyByName(UObject* Object, FName PropertyName, ref TSoftObjectPtr<UObject> Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetSoftObjectPropertyByName"), @params);
    }
    public void SetSoftClassPropertyByName(UObject* Object, FName PropertyName, ref TSoftClassPtr<UObject> Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetSoftClassPropertyByName"), @params);
    }
    public void SetRotatorPropertyByName(UObject* Object, FName PropertyName, ref FRotator Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetRotatorPropertyByName"), @params);
    }
    public void SetObjectPropertyByName(UObject* Object, FName PropertyName, UObject* Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", (IntPtr)Value)
        ];
        ProcessEvent(GetFunction("SetObjectPropertyByName"), @params);
    }
    public void SetNamePropertyByName(UObject* Object, FName PropertyName, ref FName Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetNamePropertyByName"), @params);
    }
    public void SetLinearColorPropertyByName(UObject* Object, FName PropertyName, ref FLinearColor Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetLinearColorPropertyByName"), @params);
    }
    public void SetIntPropertyByName(UObject* Object, FName PropertyName, int Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetIntPropertyByName"), @params);
    }
    public void SetInterfacePropertyByName(UObject* Object, FName PropertyName, ref FScriptInterface Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetInterfacePropertyByName"), @params);
    }
    public void SetInt64PropertyByName(UObject* Object, FName PropertyName, long Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetInt64PropertyByName"), @params);
    }
    public void SetGamepadsBlockDeviceFeedback(bool bBlock)
    {
        Span<(string name, object value)> @params = [
            ("bBlock", bBlock)
        ];
        ProcessEvent(GetFunction("SetGamepadsBlockDeviceFeedback"), @params);
    }
    public void SetFloatPropertyByName(UObject* Object, FName PropertyName, float Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetFloatPropertyByName"), @params);
    }
    public void SetFieldPathPropertyByName(UObject* Object, FName PropertyName, ref TFieldPath<FField> Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetFieldPathPropertyByName"), @params);
    }
    public void SetColorPropertyByName(UObject* Object, FName PropertyName, ref FColor Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetColorPropertyByName"), @params);
    }
    public void SetCollisionProfileNameProperty(UObject* Object, FName PropertyName, ref FCollisionProfileName Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetCollisionProfileNameProperty"), @params);
    }
    public void SetClassPropertyByName(UObject* Object, FName PropertyName, UClass* Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", (IntPtr)Value)
        ];
        ProcessEvent(GetFunction("SetClassPropertyByName"), @params);
    }
    public void SetBytePropertyByName(UObject* Object, FName PropertyName, byte Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetBytePropertyByName"), @params);
    }
    public void SetBoolPropertyByName(UObject* Object, FName PropertyName, bool Value)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("PropertyName", PropertyName), 
            ("Value", Value)
        ];
        ProcessEvent(GetFunction("SetBoolPropertyByName"), @params);
    }
    public void RetriggerableDelay(UObject* WorldContextObject, float Duration, FLatentActionInfo LatentInfo)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Duration", Duration), 
            ("LatentInfo", LatentInfo)
        ];
        ProcessEvent(GetFunction("RetriggerableDelay"), @params);
    }
    public void ResetGamepadAssignmentToController(int ControllerId)
    {
        Span<(string name, object value)> @params = [
            ("ControllerId", ControllerId)
        ];
        ProcessEvent(GetFunction("ResetGamepadAssignmentToController"), @params);
    }
    public void ResetGamepadAssignments()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ResetGamepadAssignments"), @params);
    }
    public void RegisterForRemoteNotifications()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("RegisterForRemoteNotifications"), @params);
    }
    public void QuitGame(UObject* WorldContextObject, APlayerController* SpecificPlayer, EQuitPreference QuitPreference, bool bIgnorePlatformRestrictions)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("SpecificPlayer", (IntPtr)SpecificPlayer), 
            ("QuitPreference", QuitPreference), 
            ("bIgnorePlatformRestrictions", bIgnorePlatformRestrictions)
        ];
        ProcessEvent(GetFunction("QuitGame"), @params);
    }
    public void PrintWarning(FString inString)
    {
        Span<(string name, object value)> @params = [
            ("inString", inString)
        ];
        ProcessEvent(GetFunction("PrintWarning"), @params);
    }
    public void PrintText(UObject* WorldContextObject, FText InText, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float Duration)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("InText", InText), 
            ("bPrintToScreen", bPrintToScreen), 
            ("bPrintToLog", bPrintToLog), 
            ("TextColor", TextColor), 
            ("Duration", Duration)
        ];
        ProcessEvent(GetFunction("PrintText"), @params);
    }
    public void PrintString(UObject* WorldContextObject, FString inString, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float Duration)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("inString", inString), 
            ("bPrintToScreen", bPrintToScreen), 
            ("bPrintToLog", bPrintToLog), 
            ("TextColor", TextColor), 
            ("Duration", Duration)
        ];
        ProcessEvent(GetFunction("PrintString"), @params);
    }
    public bool ParseParamValue(FString inString, FString InParam, ref FString OutValue)
    {
        Span<(string name, object value)> @params = [
            ("inString", inString), 
            ("InParam", InParam), 
            ("OutValue", OutValue)
        ];
        return ProcessEvent<bool>(GetFunction("ParseParamValue"), @params);
    }
    public bool ParseParam(FString inString, FString InParam)
    {
        Span<(string name, object value)> @params = [
            ("inString", inString), 
            ("InParam", InParam)
        ];
        return ProcessEvent<bool>(GetFunction("ParseParam"), @params);
    }
    public void ParseCommandLine(FString InCmdLine, ref TArray<FString> OutTokens, ref TArray<FString> OutSwitches, ref TMap<FString, FString> OutParams)
    {
        Span<(string name, object value)> @params = [
            ("InCmdLine", InCmdLine), 
            ("OutTokens", OutTokens), 
            ("OutSwitches", OutSwitches), 
            ("OutParams", OutParams)
        ];
        ProcessEvent(GetFunction("ParseCommandLine"), @params);
    }
    public void OnAssetLoaded__DelegateSignature(UObject* Loaded)
    {
        Span<(string name, object value)> @params = [
            ("Loaded", (IntPtr)Loaded)
        ];
        ProcessEvent(GetFunction("OnAssetLoaded__DelegateSignature"), @params);
    }
    public void OnAssetClassLoaded__DelegateSignature(UClass* Loaded)
    {
        Span<(string name, object value)> @params = [
            ("Loaded", (IntPtr)Loaded)
        ];
        ProcessEvent(GetFunction("OnAssetClassLoaded__DelegateSignature"), @params);
    }
    public bool NotEqual_SoftObjectReference(ref TSoftObjectPtr<UObject> A, ref TSoftObjectPtr<UObject> B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_SoftObjectReference"), @params);
    }
    public bool NotEqual_SoftClassReference(ref TSoftClassPtr<UObject> A, ref TSoftClassPtr<UObject> B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_SoftClassReference"), @params);
    }
    public bool NotEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_PrimaryAssetType"), @params);
    }
    public bool NotEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_PrimaryAssetId"), @params);
    }
    public FString NormalizeFilename(FString InFilename)
    {
        Span<(string name, object value)> @params = [
            ("InFilename", InFilename)
        ];
        return ProcessEvent<FString>(GetFunction("NormalizeFilename"), @params);
    }
    public void MoveComponentTo(USceneComponent* Component, FVector TargetRelativeLocation, FRotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, EMoveComponentAction MoveAction, FLatentActionInfo LatentInfo)
    {
        Span<(string name, object value)> @params = [
            ("Component", (IntPtr)Component), 
            ("TargetRelativeLocation", TargetRelativeLocation), 
            ("TargetRelativeRotation", TargetRelativeRotation), 
            ("bEaseOut", bEaseOut), 
            ("bEaseIn", bEaseIn), 
            ("OverTime", OverTime), 
            ("bForceShortestRotationPath", bForceShortestRotationPath), 
            ("MoveAction", MoveAction), 
            ("LatentInfo", LatentInfo)
        ];
        ProcessEvent(GetFunction("MoveComponentTo"), @params);
    }
    public FSoftObjectPath MakeSoftObjectPath(FString PathString)
    {
        Span<(string name, object value)> @params = [
            ("PathString", PathString)
        ];
        return ProcessEvent<FSoftObjectPath>(GetFunction("MakeSoftObjectPath"), @params);
    }
    public FSoftClassPath MakeSoftClassPath(FString PathString)
    {
        Span<(string name, object value)> @params = [
            ("PathString", PathString)
        ];
        return ProcessEvent<FSoftClassPath>(GetFunction("MakeSoftClassPath"), @params);
    }
    public FText MakeLiteralText(FText Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        return ProcessEvent<FText>(GetFunction("MakeLiteralText"), @params);
    }
    public FString MakeLiteralString(FString Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        return ProcessEvent<FString>(GetFunction("MakeLiteralString"), @params);
    }
    public FName MakeLiteralName(FName Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        return ProcessEvent<FName>(GetFunction("MakeLiteralName"), @params);
    }
    public int MakeLiteralInt(int Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        return ProcessEvent<int>(GetFunction("MakeLiteralInt"), @params);
    }
    public float MakeLiteralFloat(float Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        return ProcessEvent<float>(GetFunction("MakeLiteralFloat"), @params);
    }
    public byte MakeLiteralByte(byte Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        return ProcessEvent<byte>(GetFunction("MakeLiteralByte"), @params);
    }
    public bool MakeLiteralBool(bool Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        return ProcessEvent<bool>(GetFunction("MakeLiteralBool"), @params);
    }
    public void LoadInterstitialAd(int AdIdIndex)
    {
        Span<(string name, object value)> @params = [
            ("AdIdIndex", AdIdIndex)
        ];
        ProcessEvent(GetFunction("LoadInterstitialAd"), @params);
    }
    public UClass* LoadClassAsset_Blocking(TSoftClassPtr<UObject> AssetClass)
    {
        Span<(string name, object value)> @params = [
            ("AssetClass", AssetClass)
        ];
        return (UClass*)ProcessEvent<IntPtr>(GetFunction("LoadClassAsset_Blocking"), @params);
    }
    public UObject* LoadAsset_Blocking(TSoftObjectPtr<UObject> Asset)
    {
        Span<(string name, object value)> @params = [
            ("Asset", Asset)
        ];
        return (UObject*)ProcessEvent<IntPtr>(GetFunction("LoadAsset_Blocking"), @params);
    }
    public bool LineTraceSingleForObjects(UObject* WorldContextObject, FVector Start, FVector End, ref TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref FHitResult OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("ObjectTypes", ObjectTypes), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHit", OutHit), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("LineTraceSingleForObjects"), @params);
    }
    public bool LineTraceSingleByProfile(UObject* WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref FHitResult OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("ProfileName", ProfileName), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHit", OutHit), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("LineTraceSingleByProfile"), @params);
    }
    public bool LineTraceSingle(UObject* WorldContextObject, FVector Start, FVector End, ETraceTypeQuery TraceChannel, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref FHitResult OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("TraceChannel", TraceChannel), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHit", OutHit), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("LineTraceSingle"), @params);
    }
    public bool LineTraceMultiForObjects(UObject* WorldContextObject, FVector Start, FVector End, ref TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref TArray<FHitResult> OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("ObjectTypes", ObjectTypes), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHits", OutHits), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("LineTraceMultiForObjects"), @params);
    }
    public bool LineTraceMultiByProfile(UObject* WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref TArray<FHitResult> OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("ProfileName", ProfileName), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHits", OutHits), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("LineTraceMultiByProfile"), @params);
    }
    public bool LineTraceMulti(UObject* WorldContextObject, FVector Start, FVector End, ETraceTypeQuery TraceChannel, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref TArray<FHitResult> OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("TraceChannel", TraceChannel), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHits", OutHits), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("LineTraceMulti"), @params);
    }
    public void LaunchURL(FString URL)
    {
        Span<(string name, object value)> @params = [
            ("URL", URL)
        ];
        ProcessEvent(GetFunction("LaunchURL"), @params);
    }
    public void K2_UnPauseTimerHandle(UObject* WorldContextObject, FTimerHandle Handle)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Handle", Handle)
        ];
        ProcessEvent(GetFunction("K2_UnPauseTimerHandle"), @params);
    }
    public void K2_UnPauseTimer(UObject* Object, FString FunctionName)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("FunctionName", FunctionName)
        ];
        ProcessEvent(GetFunction("K2_UnPauseTimer"), @params);
    }
    public bool K2_TimerExistsHandle(UObject* WorldContextObject, FTimerHandle Handle)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Handle", Handle)
        ];
        return ProcessEvent<bool>(GetFunction("K2_TimerExistsHandle"), @params);
    }
    public bool K2_TimerExists(UObject* Object, FString FunctionName)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("FunctionName", FunctionName)
        ];
        return ProcessEvent<bool>(GetFunction("K2_TimerExists"), @params);
    }
    public FTimerHandle K2_SetTimer(UObject* Object, FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("FunctionName", FunctionName), 
            ("Time", Time), 
            ("bLooping", bLooping), 
            ("InitialStartDelay", InitialStartDelay), 
            ("InitialStartDelayVariance", InitialStartDelayVariance)
        ];
        return ProcessEvent<FTimerHandle>(GetFunction("K2_SetTimer"), @params);
    }
    public void K2_PauseTimerHandle(UObject* WorldContextObject, FTimerHandle Handle)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Handle", Handle)
        ];
        ProcessEvent(GetFunction("K2_PauseTimerHandle"), @params);
    }
    public void K2_PauseTimer(UObject* Object, FString FunctionName)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("FunctionName", FunctionName)
        ];
        ProcessEvent(GetFunction("K2_PauseTimer"), @params);
    }
    public bool K2_IsValidTimerHandle(FTimerHandle Handle)
    {
        Span<(string name, object value)> @params = [
            ("Handle", Handle)
        ];
        return ProcessEvent<bool>(GetFunction("K2_IsValidTimerHandle"), @params);
    }
    public bool K2_IsTimerPausedHandle(UObject* WorldContextObject, FTimerHandle Handle)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Handle", Handle)
        ];
        return ProcessEvent<bool>(GetFunction("K2_IsTimerPausedHandle"), @params);
    }
    public bool K2_IsTimerPaused(UObject* Object, FString FunctionName)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("FunctionName", FunctionName)
        ];
        return ProcessEvent<bool>(GetFunction("K2_IsTimerPaused"), @params);
    }
    public bool K2_IsTimerActiveHandle(UObject* WorldContextObject, FTimerHandle Handle)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Handle", Handle)
        ];
        return ProcessEvent<bool>(GetFunction("K2_IsTimerActiveHandle"), @params);
    }
    public bool K2_IsTimerActive(UObject* Object, FString FunctionName)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("FunctionName", FunctionName)
        ];
        return ProcessEvent<bool>(GetFunction("K2_IsTimerActive"), @params);
    }
    public FTimerHandle K2_InvalidateTimerHandle(ref FTimerHandle Handle)
    {
        Span<(string name, object value)> @params = [
            ("Handle", Handle)
        ];
        return ProcessEvent<FTimerHandle>(GetFunction("K2_InvalidateTimerHandle"), @params);
    }
    public float K2_GetTimerRemainingTimeHandle(UObject* WorldContextObject, FTimerHandle Handle)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Handle", Handle)
        ];
        return ProcessEvent<float>(GetFunction("K2_GetTimerRemainingTimeHandle"), @params);
    }
    public float K2_GetTimerRemainingTime(UObject* Object, FString FunctionName)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("FunctionName", FunctionName)
        ];
        return ProcessEvent<float>(GetFunction("K2_GetTimerRemainingTime"), @params);
    }
    public float K2_GetTimerElapsedTimeHandle(UObject* WorldContextObject, FTimerHandle Handle)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Handle", Handle)
        ];
        return ProcessEvent<float>(GetFunction("K2_GetTimerElapsedTimeHandle"), @params);
    }
    public float K2_GetTimerElapsedTime(UObject* Object, FString FunctionName)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("FunctionName", FunctionName)
        ];
        return ProcessEvent<float>(GetFunction("K2_GetTimerElapsedTime"), @params);
    }
    public void K2_ClearTimerHandle(UObject* WorldContextObject, FTimerHandle Handle)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Handle", Handle)
        ];
        ProcessEvent(GetFunction("K2_ClearTimerHandle"), @params);
    }
    public void K2_ClearTimer(UObject* Object, FString FunctionName)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object), 
            ("FunctionName", FunctionName)
        ];
        ProcessEvent(GetFunction("K2_ClearTimer"), @params);
    }
    public void K2_ClearAndInvalidateTimerHandle(UObject* WorldContextObject, ref FTimerHandle Handle)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Handle", Handle)
        ];
        ProcessEvent(GetFunction("K2_ClearAndInvalidateTimerHandle"), @params);
    }
    public bool IsValidSoftObjectReference(ref TSoftObjectPtr<UObject> SoftObjectReference)
    {
        Span<(string name, object value)> @params = [
            ("SoftObjectReference", SoftObjectReference)
        ];
        return ProcessEvent<bool>(GetFunction("IsValidSoftObjectReference"), @params);
    }
    public bool IsValidSoftClassReference(ref TSoftClassPtr<UObject> SoftClassReference)
    {
        Span<(string name, object value)> @params = [
            ("SoftClassReference", SoftClassReference)
        ];
        return ProcessEvent<bool>(GetFunction("IsValidSoftClassReference"), @params);
    }
    public bool IsValidPrimaryAssetType(FPrimaryAssetType PrimaryAssetType)
    {
        Span<(string name, object value)> @params = [
            ("PrimaryAssetType", PrimaryAssetType)
        ];
        return ProcessEvent<bool>(GetFunction("IsValidPrimaryAssetType"), @params);
    }
    public bool IsValidPrimaryAssetId(FPrimaryAssetId PrimaryAssetId)
    {
        Span<(string name, object value)> @params = [
            ("PrimaryAssetId", PrimaryAssetId)
        ];
        return ProcessEvent<bool>(GetFunction("IsValidPrimaryAssetId"), @params);
    }
    public bool IsValidClass(UClass* Class)
    {
        Span<(string name, object value)> @params = [
            ("Class", (IntPtr)Class)
        ];
        return ProcessEvent<bool>(GetFunction("IsValidClass"), @params);
    }
    public bool IsValid(UObject* Object)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object)
        ];
        return ProcessEvent<bool>(GetFunction("IsValid"), @params);
    }
    public bool IsUnattended()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsUnattended"), @params);
    }
    public bool IsStandalone(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return ProcessEvent<bool>(GetFunction("IsStandalone"), @params);
    }
    public bool IsSplitScreen(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return ProcessEvent<bool>(GetFunction("IsSplitScreen"), @params);
    }
    public bool IsServer(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return ProcessEvent<bool>(GetFunction("IsServer"), @params);
    }
    public bool IsScreensaverEnabled()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsScreensaverEnabled"), @params);
    }
    public bool IsPackagedForDistribution()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsPackagedForDistribution"), @params);
    }
    public bool IsLoggedIn(APlayerController* SpecificPlayer)
    {
        Span<(string name, object value)> @params = [
            ("SpecificPlayer", (IntPtr)SpecificPlayer)
        ];
        return ProcessEvent<bool>(GetFunction("IsLoggedIn"), @params);
    }
    public bool IsInterstitialAdRequested()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsInterstitialAdRequested"), @params);
    }
    public bool IsInterstitialAdAvailable()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsInterstitialAdAvailable"), @params);
    }
    public bool IsDedicatedServer(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return ProcessEvent<bool>(GetFunction("IsDedicatedServer"), @params);
    }
    public bool IsControllerAssignedToGamepad(int ControllerId)
    {
        Span<(string name, object value)> @params = [
            ("ControllerId", ControllerId)
        ];
        return ProcessEvent<bool>(GetFunction("IsControllerAssignedToGamepad"), @params);
    }
    public void HideAdBanner()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("HideAdBanner"), @params);
    }
    public bool GetVolumeButtonsHandledBySystem()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("GetVolumeButtonsHandledBySystem"), @params);
    }
    public FString GetUniqueDeviceId()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetUniqueDeviceId"), @params);
    }
    public FString GetSystemPath(UObject* Object)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object)
        ];
        return ProcessEvent<FString>(GetFunction("GetSystemPath"), @params);
    }
    public bool GetSupportedFullscreenResolutions(ref TArray<FIntPoint> Resolutions)
    {
        Span<(string name, object value)> @params = [
            ("Resolutions", Resolutions)
        ];
        return ProcessEvent<bool>(GetFunction("GetSupportedFullscreenResolutions"), @params);
    }
    public TSoftObjectPtr<UObject> GetSoftObjectReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId)
    {
        Span<(string name, object value)> @params = [
            ("PrimaryAssetId", PrimaryAssetId)
        ];
        return ProcessEvent<TSoftObjectPtr<UObject>>(GetFunction("GetSoftObjectReferenceFromPrimaryAssetId"), @params);
    }
    public TSoftClassPtr<UObject> GetSoftClassReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId)
    {
        Span<(string name, object value)> @params = [
            ("PrimaryAssetId", PrimaryAssetId)
        ];
        return ProcessEvent<TSoftClassPtr<UObject>>(GetFunction("GetSoftClassReferenceFromPrimaryAssetId"), @params);
    }
    public int GetRenderingMaterialQualityLevel()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetRenderingMaterialQualityLevel"), @params);
    }
    public int GetRenderingDetailMode()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetRenderingDetailMode"), @params);
    }
    public FString GetProjectSavedDirectory()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetProjectSavedDirectory"), @params);
    }
    public FString GetProjectDirectory()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetProjectDirectory"), @params);
    }
    public FString GetProjectContentDirectory()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetProjectContentDirectory"), @params);
    }
    public void GetPrimaryAssetsWithBundleState(ref TArray<FName> RequiredBundles, ref TArray<FName> ExcludedBundles, ref TArray<FPrimaryAssetType> ValidTypes, bool bForceCurrentState, ref TArray<FPrimaryAssetId> OutPrimaryAssetIdList)
    {
        Span<(string name, object value)> @params = [
            ("RequiredBundles", RequiredBundles), 
            ("ExcludedBundles", ExcludedBundles), 
            ("ValidTypes", ValidTypes), 
            ("bForceCurrentState", bForceCurrentState), 
            ("OutPrimaryAssetIdList", OutPrimaryAssetIdList)
        ];
        ProcessEvent(GetFunction("GetPrimaryAssetsWithBundleState"), @params);
    }
    public void GetPrimaryAssetIdList(FPrimaryAssetType PrimaryAssetType, ref TArray<FPrimaryAssetId> OutPrimaryAssetIdList)
    {
        Span<(string name, object value)> @params = [
            ("PrimaryAssetType", PrimaryAssetType), 
            ("OutPrimaryAssetIdList", OutPrimaryAssetIdList)
        ];
        ProcessEvent(GetFunction("GetPrimaryAssetIdList"), @params);
    }
    public FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(TSoftObjectPtr<UObject> SoftObjectReference)
    {
        Span<(string name, object value)> @params = [
            ("SoftObjectReference", SoftObjectReference)
        ];
        return ProcessEvent<FPrimaryAssetId>(GetFunction("GetPrimaryAssetIdFromSoftObjectReference"), @params);
    }
    public FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(TSoftClassPtr<UObject> SoftClassReference)
    {
        Span<(string name, object value)> @params = [
            ("SoftClassReference", SoftClassReference)
        ];
        return ProcessEvent<FPrimaryAssetId>(GetFunction("GetPrimaryAssetIdFromSoftClassReference"), @params);
    }
    public FPrimaryAssetId GetPrimaryAssetIdFromObject(UObject* Object)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object)
        ];
        return ProcessEvent<FPrimaryAssetId>(GetFunction("GetPrimaryAssetIdFromObject"), @params);
    }
    public FPrimaryAssetId GetPrimaryAssetIdFromClass(UClass* Class)
    {
        Span<(string name, object value)> @params = [
            ("Class", (IntPtr)Class)
        ];
        return ProcessEvent<FPrimaryAssetId>(GetFunction("GetPrimaryAssetIdFromClass"), @params);
    }
    public TArray<FString> GetPreferredLanguages()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<TArray<FString>>(GetFunction("GetPreferredLanguages"), @params);
    }
    public FString GetPlatformUserName()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetPlatformUserName"), @params);
    }
    public FString GetPlatformUserDir()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetPlatformUserDir"), @params);
    }
    public FString GetPathName(UObject* Object)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object)
        ];
        return ProcessEvent<FString>(GetFunction("GetPathName"), @params);
    }
    public UObject* GetOuterObject(UObject* Object)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object)
        ];
        return (UObject*)ProcessEvent<IntPtr>(GetFunction("GetOuterObject"), @params);
    }
    public FString GetObjectName(UObject* Object)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object)
        ];
        return ProcessEvent<FString>(GetFunction("GetObjectName"), @params);
    }
    public UObject* GetObjectFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId)
    {
        Span<(string name, object value)> @params = [
            ("PrimaryAssetId", PrimaryAssetId)
        ];
        return (UObject*)ProcessEvent<IntPtr>(GetFunction("GetObjectFromPrimaryAssetId"), @params);
    }
    public int GetMinYResolutionForUI()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetMinYResolutionForUI"), @params);
    }
    public int GetMinYResolutionFor3DView()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetMinYResolutionFor3DView"), @params);
    }
    public FString GetLocalCurrencySymbol()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetLocalCurrencySymbol"), @params);
    }
    public FString GetLocalCurrencyCode()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetLocalCurrencyCode"), @params);
    }
    public float GetGameTimeInSeconds(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        return ProcessEvent<float>(GetFunction("GetGameTimeInSeconds"), @params);
    }
    public FString GetGamepadControllerName(int ControllerId)
    {
        Span<(string name, object value)> @params = [
            ("ControllerId", ControllerId)
        ];
        return ProcessEvent<FString>(GetFunction("GetGamepadControllerName"), @params);
    }
    public UTexture2D* GetGamepadButtonGlyph(FString ButtonKey, int ControllerIndex)
    {
        Span<(string name, object value)> @params = [
            ("ButtonKey", ButtonKey), 
            ("ControllerIndex", ControllerIndex)
        ];
        return (UTexture2D*)ProcessEvent<IntPtr>(GetFunction("GetGamepadButtonGlyph"), @params);
    }
    public FString GetGameName()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetGameName"), @params);
    }
    public FString GetGameBundleId()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetGameBundleId"), @params);
    }
    public long GetFrameCount()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<long>(GetFunction("GetFrameCount"), @params);
    }
    public FString GetEngineVersion()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetEngineVersion"), @params);
    }
    public FString GetDisplayName(UObject* Object)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object)
        ];
        return ProcessEvent<FString>(GetFunction("GetDisplayName"), @params);
    }
    public FString GetDeviceId()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetDeviceId"), @params);
    }
    public FString GetDefaultLocale()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetDefaultLocale"), @params);
    }
    public FString GetDefaultLanguage()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetDefaultLanguage"), @params);
    }
    public bool GetCurrentBundleState(FPrimaryAssetId PrimaryAssetId, bool bForceCurrentState, ref TArray<FName> OutBundles)
    {
        Span<(string name, object value)> @params = [
            ("PrimaryAssetId", PrimaryAssetId), 
            ("bForceCurrentState", bForceCurrentState), 
            ("OutBundles", OutBundles)
        ];
        return ProcessEvent<bool>(GetFunction("GetCurrentBundleState"), @params);
    }
    public bool GetConvenientWindowedResolutions(ref TArray<FIntPoint> Resolutions)
    {
        Span<(string name, object value)> @params = [
            ("Resolutions", Resolutions)
        ];
        return ProcessEvent<bool>(GetFunction("GetConvenientWindowedResolutions"), @params);
    }
    public int GetConsoleVariableIntValue(FString VariableName)
    {
        Span<(string name, object value)> @params = [
            ("VariableName", VariableName)
        ];
        return ProcessEvent<int>(GetFunction("GetConsoleVariableIntValue"), @params);
    }
    public float GetConsoleVariableFloatValue(FString VariableName)
    {
        Span<(string name, object value)> @params = [
            ("VariableName", VariableName)
        ];
        return ProcessEvent<float>(GetFunction("GetConsoleVariableFloatValue"), @params);
    }
    public bool GetConsoleVariableBoolValue(FString VariableName)
    {
        Span<(string name, object value)> @params = [
            ("VariableName", VariableName)
        ];
        return ProcessEvent<bool>(GetFunction("GetConsoleVariableBoolValue"), @params);
    }
    public void GetComponentBounds(USceneComponent* Component, ref FVector Origin, ref FVector BoxExtent, ref float SphereRadius)
    {
        Span<(string name, object value)> @params = [
            ("Component", (IntPtr)Component), 
            ("Origin", Origin), 
            ("BoxExtent", BoxExtent), 
            ("SphereRadius", SphereRadius)
        ];
        ProcessEvent(GetFunction("GetComponentBounds"), @params);
    }
    public FString GetCommandLine()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetCommandLine"), @params);
    }
    public UClass* GetClassFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId)
    {
        Span<(string name, object value)> @params = [
            ("PrimaryAssetId", PrimaryAssetId)
        ];
        return (UClass*)ProcessEvent<IntPtr>(GetFunction("GetClassFromPrimaryAssetId"), @params);
    }
    public FString GetClassDisplayName(UClass* Class)
    {
        Span<(string name, object value)> @params = [
            ("Class", (IntPtr)Class)
        ];
        return ProcessEvent<FString>(GetFunction("GetClassDisplayName"), @params);
    }
    public int GetAdIDCount()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("GetAdIDCount"), @params);
    }
    public void GetActorListFromComponentList(ref TArray<IntPtr> ComponentList, UClass* ActorClassFilter, ref TArray<IntPtr> OutActorList)
    {
        Span<(string name, object value)> @params = [
            ("ComponentList", ComponentList), 
            ("ActorClassFilter", (IntPtr)ActorClassFilter), 
            ("OutActorList", OutActorList)
        ];
        ProcessEvent(GetFunction("GetActorListFromComponentList"), @params);
    }
    public void GetActorBounds(AActor* Actor, ref FVector Origin, ref FVector BoxExtent)
    {
        Span<(string name, object value)> @params = [
            ("Actor", (IntPtr)Actor), 
            ("Origin", Origin), 
            ("BoxExtent", BoxExtent)
        ];
        ProcessEvent(GetFunction("GetActorBounds"), @params);
    }
    public void ForceCloseAdBanner()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("ForceCloseAdBanner"), @params);
    }
    public void FlushPersistentDebugLines(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        ProcessEvent(GetFunction("FlushPersistentDebugLines"), @params);
    }
    public void FlushDebugStrings(UObject* WorldContextObject)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject)
        ];
        ProcessEvent(GetFunction("FlushDebugStrings"), @params);
    }
    public void ExecuteConsoleCommand(UObject* WorldContextObject, FString Command, APlayerController* SpecificPlayer)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Command", Command), 
            ("SpecificPlayer", (IntPtr)SpecificPlayer)
        ];
        ProcessEvent(GetFunction("ExecuteConsoleCommand"), @params);
    }
    public bool EqualEqual_SoftObjectReference(ref TSoftObjectPtr<UObject> A, ref TSoftObjectPtr<UObject> B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_SoftObjectReference"), @params);
    }
    public bool EqualEqual_SoftClassReference(ref TSoftClassPtr<UObject> A, ref TSoftClassPtr<UObject> B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_SoftClassReference"), @params);
    }
    public bool EqualEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_PrimaryAssetType"), @params);
    }
    public bool EqualEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_PrimaryAssetId"), @params);
    }
    public int EndTransaction()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<int>(GetFunction("EndTransaction"), @params);
    }
    public void DrawDebugString(UObject* WorldContextObject, FVector TextLocation, FString Text, AActor* TestBaseActor, FLinearColor TextColor, float Duration)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("TextLocation", TextLocation), 
            ("Text", Text), 
            ("TestBaseActor", (IntPtr)TestBaseActor), 
            ("TextColor", TextColor), 
            ("Duration", Duration)
        ];
        ProcessEvent(GetFunction("DrawDebugString"), @params);
    }
    public void DrawDebugSphere(UObject* WorldContextObject, FVector Center, float Radius, int Segments, FLinearColor LineColor, float Duration, float Thickness)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Center", Center), 
            ("Radius", Radius), 
            ("Segments", Segments), 
            ("LineColor", LineColor), 
            ("Duration", Duration), 
            ("Thickness", Thickness)
        ];
        ProcessEvent(GetFunction("DrawDebugSphere"), @params);
    }
    public void DrawDebugPoint(UObject* WorldContextObject, FVector Position, float Size, FLinearColor PointColor, float Duration)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Position", Position), 
            ("Size", Size), 
            ("PointColor", PointColor), 
            ("Duration", Duration)
        ];
        ProcessEvent(GetFunction("DrawDebugPoint"), @params);
    }
    public void DrawDebugPlane(UObject* WorldContextObject, ref FPlane PlaneCoordinates, FVector Location, float Size, FLinearColor PlaneColor, float Duration)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("PlaneCoordinates", PlaneCoordinates), 
            ("Location", Location), 
            ("Size", Size), 
            ("PlaneColor", PlaneColor), 
            ("Duration", Duration)
        ];
        ProcessEvent(GetFunction("DrawDebugPlane"), @params);
    }
    public void DrawDebugLine(UObject* WorldContextObject, FVector LineStart, FVector LineEnd, FLinearColor LineColor, float Duration, float Thickness)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("LineStart", LineStart), 
            ("LineEnd", LineEnd), 
            ("LineColor", LineColor), 
            ("Duration", Duration), 
            ("Thickness", Thickness)
        ];
        ProcessEvent(GetFunction("DrawDebugLine"), @params);
    }
    public void DrawDebugFrustum(UObject* WorldContextObject, ref FTransform FrustumTransform, FLinearColor FrustumColor, float Duration, float Thickness)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("FrustumTransform", FrustumTransform), 
            ("FrustumColor", FrustumColor), 
            ("Duration", Duration), 
            ("Thickness", Thickness)
        ];
        ProcessEvent(GetFunction("DrawDebugFrustum"), @params);
    }
    public void DrawDebugFloatHistoryTransform(UObject* WorldContextObject, ref FDebugFloatHistory FloatHistory, ref FTransform DrawTransform, FVector2D DrawSize, FLinearColor DrawColor, float Duration)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("FloatHistory", FloatHistory), 
            ("DrawTransform", DrawTransform), 
            ("DrawSize", DrawSize), 
            ("DrawColor", DrawColor), 
            ("Duration", Duration)
        ];
        ProcessEvent(GetFunction("DrawDebugFloatHistoryTransform"), @params);
    }
    public void DrawDebugFloatHistoryLocation(UObject* WorldContextObject, ref FDebugFloatHistory FloatHistory, FVector DrawLocation, FVector2D DrawSize, FLinearColor DrawColor, float Duration)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("FloatHistory", FloatHistory), 
            ("DrawLocation", DrawLocation), 
            ("DrawSize", DrawSize), 
            ("DrawColor", DrawColor), 
            ("Duration", Duration)
        ];
        ProcessEvent(GetFunction("DrawDebugFloatHistoryLocation"), @params);
    }
    public void DrawDebugCylinder(UObject* WorldContextObject, FVector Start, FVector End, float Radius, int Segments, FLinearColor LineColor, float Duration, float Thickness)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("Radius", Radius), 
            ("Segments", Segments), 
            ("LineColor", LineColor), 
            ("Duration", Duration), 
            ("Thickness", Thickness)
        ];
        ProcessEvent(GetFunction("DrawDebugCylinder"), @params);
    }
    public void DrawDebugCoordinateSystem(UObject* WorldContextObject, FVector AxisLoc, FRotator AxisRot, float Scale, float Duration, float Thickness)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("AxisLoc", AxisLoc), 
            ("AxisRot", AxisRot), 
            ("Scale", Scale), 
            ("Duration", Duration), 
            ("Thickness", Thickness)
        ];
        ProcessEvent(GetFunction("DrawDebugCoordinateSystem"), @params);
    }
    public void DrawDebugConeInDegrees(UObject* WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, FLinearColor LineColor, float Duration, float Thickness)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Origin", Origin), 
            ("Direction", Direction), 
            ("Length", Length), 
            ("AngleWidth", AngleWidth), 
            ("AngleHeight", AngleHeight), 
            ("NumSides", NumSides), 
            ("LineColor", LineColor), 
            ("Duration", Duration), 
            ("Thickness", Thickness)
        ];
        ProcessEvent(GetFunction("DrawDebugConeInDegrees"), @params);
    }
    public void DrawDebugCone(UObject* WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, FLinearColor LineColor, float Duration, float Thickness)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Origin", Origin), 
            ("Direction", Direction), 
            ("Length", Length), 
            ("AngleWidth", AngleWidth), 
            ("AngleHeight", AngleHeight), 
            ("NumSides", NumSides), 
            ("LineColor", LineColor), 
            ("Duration", Duration), 
            ("Thickness", Thickness)
        ];
        ProcessEvent(GetFunction("DrawDebugCone"), @params);
    }
    public void DrawDebugCircle(UObject* WorldContextObject, FVector Center, float Radius, int NumSegments, FLinearColor LineColor, float Duration, float Thickness, FVector YAxis, FVector ZAxis, bool bDrawAxis)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Center", Center), 
            ("Radius", Radius), 
            ("NumSegments", NumSegments), 
            ("LineColor", LineColor), 
            ("Duration", Duration), 
            ("Thickness", Thickness), 
            ("YAxis", YAxis), 
            ("ZAxis", ZAxis), 
            ("bDrawAxis", bDrawAxis)
        ];
        ProcessEvent(GetFunction("DrawDebugCircle"), @params);
    }
    public void DrawDebugCapsule(UObject* WorldContextObject, FVector Center, float HalfHeight, float Radius, FRotator Rotation, FLinearColor LineColor, float Duration, float Thickness)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Center", Center), 
            ("HalfHeight", HalfHeight), 
            ("Radius", Radius), 
            ("Rotation", Rotation), 
            ("LineColor", LineColor), 
            ("Duration", Duration), 
            ("Thickness", Thickness)
        ];
        ProcessEvent(GetFunction("DrawDebugCapsule"), @params);
    }
    public void DrawDebugCamera(ACameraActor* CameraActor, FLinearColor CameraColor, float Duration)
    {
        Span<(string name, object value)> @params = [
            ("CameraActor", (IntPtr)CameraActor), 
            ("CameraColor", CameraColor), 
            ("Duration", Duration)
        ];
        ProcessEvent(GetFunction("DrawDebugCamera"), @params);
    }
    public void DrawDebugBox(UObject* WorldContextObject, FVector Center, FVector Extent, FLinearColor LineColor, FRotator Rotation, float Duration, float Thickness)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Center", Center), 
            ("Extent", Extent), 
            ("LineColor", LineColor), 
            ("Rotation", Rotation), 
            ("Duration", Duration), 
            ("Thickness", Thickness)
        ];
        ProcessEvent(GetFunction("DrawDebugBox"), @params);
    }
    public void DrawDebugArrow(UObject* WorldContextObject, FVector LineStart, FVector LineEnd, float ArrowSize, FLinearColor LineColor, float Duration, float Thickness)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("LineStart", LineStart), 
            ("LineEnd", LineEnd), 
            ("ArrowSize", ArrowSize), 
            ("LineColor", LineColor), 
            ("Duration", Duration), 
            ("Thickness", Thickness)
        ];
        ProcessEvent(GetFunction("DrawDebugArrow"), @params);
    }
    public bool DoesImplementInterface(UObject* TestObject, TSubclassOf<UInterface> Interface)
    {
        Span<(string name, object value)> @params = [
            ("TestObject", (IntPtr)TestObject), 
            ("Interface", Interface)
        ];
        return ProcessEvent<bool>(GetFunction("DoesImplementInterface"), @params);
    }
    public void Delay(UObject* WorldContextObject, float Duration, FLatentActionInfo LatentInfo)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Duration", Duration), 
            ("LatentInfo", LatentInfo)
        ];
        ProcessEvent(GetFunction("Delay"), @params);
    }
    public void CreateCopyForUndoBuffer(UObject* ObjectToModify)
    {
        Span<(string name, object value)> @params = [
            ("ObjectToModify", (IntPtr)ObjectToModify)
        ];
        ProcessEvent(GetFunction("CreateCopyForUndoBuffer"), @params);
    }
    public FString ConvertToRelativePath(FString Filename)
    {
        Span<(string name, object value)> @params = [
            ("Filename", Filename)
        ];
        return ProcessEvent<FString>(GetFunction("ConvertToRelativePath"), @params);
    }
    public FString ConvertToAbsolutePath(FString Filename)
    {
        Span<(string name, object value)> @params = [
            ("Filename", Filename)
        ];
        return ProcessEvent<FString>(GetFunction("ConvertToAbsolutePath"), @params);
    }
    public TSoftObjectPtr<UObject> Conv_SoftObjPathToSoftObjRef(ref FSoftObjectPath SoftObjectPath)
    {
        Span<(string name, object value)> @params = [
            ("SoftObjectPath", SoftObjectPath)
        ];
        return ProcessEvent<TSoftObjectPtr<UObject>>(GetFunction("Conv_SoftObjPathToSoftObjRef"), @params);
    }
    public FString Conv_SoftObjectReferenceToString(ref TSoftObjectPtr<UObject> SoftObjectReference)
    {
        Span<(string name, object value)> @params = [
            ("SoftObjectReference", SoftObjectReference)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_SoftObjectReferenceToString"), @params);
    }
    public UObject* Conv_SoftObjectReferenceToObject(ref TSoftObjectPtr<UObject> SoftObject)
    {
        Span<(string name, object value)> @params = [
            ("SoftObject", SoftObject)
        ];
        return (UObject*)ProcessEvent<IntPtr>(GetFunction("Conv_SoftObjectReferenceToObject"), @params);
    }
    public FString Conv_SoftClassReferenceToString(ref TSoftClassPtr<UObject> SoftClassReference)
    {
        Span<(string name, object value)> @params = [
            ("SoftClassReference", SoftClassReference)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_SoftClassReferenceToString"), @params);
    }
    public UClass* Conv_SoftClassReferenceToClass(ref TSoftClassPtr<UObject> SoftClass)
    {
        Span<(string name, object value)> @params = [
            ("SoftClass", SoftClass)
        ];
        return (UClass*)ProcessEvent<IntPtr>(GetFunction("Conv_SoftClassReferenceToClass"), @params);
    }
    public TSoftClassPtr<UObject> Conv_SoftClassPathToSoftClassRef(ref FSoftClassPath SoftClassPath)
    {
        Span<(string name, object value)> @params = [
            ("SoftClassPath", SoftClassPath)
        ];
        return ProcessEvent<TSoftClassPtr<UObject>>(GetFunction("Conv_SoftClassPathToSoftClassRef"), @params);
    }
    public FString Conv_PrimaryAssetTypeToString(FPrimaryAssetType PrimaryAssetType)
    {
        Span<(string name, object value)> @params = [
            ("PrimaryAssetType", PrimaryAssetType)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_PrimaryAssetTypeToString"), @params);
    }
    public FString Conv_PrimaryAssetIdToString(FPrimaryAssetId PrimaryAssetId)
    {
        Span<(string name, object value)> @params = [
            ("PrimaryAssetId", PrimaryAssetId)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_PrimaryAssetIdToString"), @params);
    }
    public TSoftObjectPtr<UObject> Conv_ObjectToSoftObjectReference(UObject* Object)
    {
        Span<(string name, object value)> @params = [
            ("Object", (IntPtr)Object)
        ];
        return ProcessEvent<TSoftObjectPtr<UObject>>(GetFunction("Conv_ObjectToSoftObjectReference"), @params);
    }
    public UObject* Conv_InterfaceToObject(ref FScriptInterface Interface)
    {
        Span<(string name, object value)> @params = [
            ("Interface", Interface)
        ];
        return (UObject*)ProcessEvent<IntPtr>(GetFunction("Conv_InterfaceToObject"), @params);
    }
    public TSoftClassPtr<UObject> Conv_ClassToSoftClassReference(ref UClass* Class)
    {
        Span<(string name, object value)> @params = [
            ("Class", (IntPtr)Class)
        ];
        return ProcessEvent<TSoftClassPtr<UObject>>(GetFunction("Conv_ClassToSoftClassReference"), @params);
    }
    public void ControlScreensaver(bool bAllowScreenSaver)
    {
        Span<(string name, object value)> @params = [
            ("bAllowScreenSaver", bAllowScreenSaver)
        ];
        ProcessEvent(GetFunction("ControlScreensaver"), @params);
    }
    public bool ComponentOverlapComponents(UPrimitiveComponent* Component, ref FTransform ComponentTransform, ref TArray<EObjectTypeQuery> ObjectTypes, UClass* ComponentClassFilter, ref TArray<IntPtr> ActorsToIgnore, ref TArray<IntPtr> OutComponents)
    {
        Span<(string name, object value)> @params = [
            ("Component", (IntPtr)Component), 
            ("ComponentTransform", ComponentTransform), 
            ("ObjectTypes", ObjectTypes), 
            ("ComponentClassFilter", (IntPtr)ComponentClassFilter), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("OutComponents", OutComponents)
        ];
        return ProcessEvent<bool>(GetFunction("ComponentOverlapComponents"), @params);
    }
    public bool ComponentOverlapActors(UPrimitiveComponent* Component, ref FTransform ComponentTransform, ref TArray<EObjectTypeQuery> ObjectTypes, UClass* ActorClassFilter, ref TArray<IntPtr> ActorsToIgnore, ref TArray<IntPtr> OutActors)
    {
        Span<(string name, object value)> @params = [
            ("Component", (IntPtr)Component), 
            ("ComponentTransform", ComponentTransform), 
            ("ObjectTypes", ObjectTypes), 
            ("ActorClassFilter", (IntPtr)ActorClassFilter), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("OutActors", OutActors)
        ];
        return ProcessEvent<bool>(GetFunction("ComponentOverlapActors"), @params);
    }
    public void CollectGarbage()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("CollectGarbage"), @params);
    }
    public bool CapsuleTraceSingleForObjects(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, ref TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref FHitResult OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("Radius", Radius), 
            ("HalfHeight", HalfHeight), 
            ("ObjectTypes", ObjectTypes), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHit", OutHit), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("CapsuleTraceSingleForObjects"), @params);
    }
    public bool CapsuleTraceSingleByProfile(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref FHitResult OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("Radius", Radius), 
            ("HalfHeight", HalfHeight), 
            ("ProfileName", ProfileName), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHit", OutHit), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("CapsuleTraceSingleByProfile"), @params);
    }
    public bool CapsuleTraceSingle(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, ETraceTypeQuery TraceChannel, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref FHitResult OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("Radius", Radius), 
            ("HalfHeight", HalfHeight), 
            ("TraceChannel", TraceChannel), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHit", OutHit), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("CapsuleTraceSingle"), @params);
    }
    public bool CapsuleTraceMultiForObjects(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, ref TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref TArray<FHitResult> OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("Radius", Radius), 
            ("HalfHeight", HalfHeight), 
            ("ObjectTypes", ObjectTypes), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHits", OutHits), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("CapsuleTraceMultiForObjects"), @params);
    }
    public bool CapsuleTraceMultiByProfile(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref TArray<FHitResult> OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("Radius", Radius), 
            ("HalfHeight", HalfHeight), 
            ("ProfileName", ProfileName), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHits", OutHits), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("CapsuleTraceMultiByProfile"), @params);
    }
    public bool CapsuleTraceMulti(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, ETraceTypeQuery TraceChannel, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref TArray<FHitResult> OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("Radius", Radius), 
            ("HalfHeight", HalfHeight), 
            ("TraceChannel", TraceChannel), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHits", OutHits), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("CapsuleTraceMulti"), @params);
    }
    public bool CapsuleOverlapComponents(UObject* WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, ref TArray<EObjectTypeQuery> ObjectTypes, UClass* ComponentClassFilter, ref TArray<IntPtr> ActorsToIgnore, ref TArray<IntPtr> OutComponents)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("CapsulePos", CapsulePos), 
            ("Radius", Radius), 
            ("HalfHeight", HalfHeight), 
            ("ObjectTypes", ObjectTypes), 
            ("ComponentClassFilter", (IntPtr)ComponentClassFilter), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("OutComponents", OutComponents)
        ];
        return ProcessEvent<bool>(GetFunction("CapsuleOverlapComponents"), @params);
    }
    public bool CapsuleOverlapActors(UObject* WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, ref TArray<EObjectTypeQuery> ObjectTypes, UClass* ActorClassFilter, ref TArray<IntPtr> ActorsToIgnore, ref TArray<IntPtr> OutActors)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("CapsulePos", CapsulePos), 
            ("Radius", Radius), 
            ("HalfHeight", HalfHeight), 
            ("ObjectTypes", ObjectTypes), 
            ("ActorClassFilter", (IntPtr)ActorClassFilter), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("OutActors", OutActors)
        ];
        return ProcessEvent<bool>(GetFunction("CapsuleOverlapActors"), @params);
    }
    public bool CanLaunchURL(FString URL)
    {
        Span<(string name, object value)> @params = [
            ("URL", URL)
        ];
        return ProcessEvent<bool>(GetFunction("CanLaunchURL"), @params);
    }
    public void CancelTransaction(int Index)
    {
        Span<(string name, object value)> @params = [
            ("Index", Index)
        ];
        ProcessEvent(GetFunction("CancelTransaction"), @params);
    }
    public void BreakSoftObjectPath(FSoftObjectPath InSoftObjectPath, ref FString PathString)
    {
        Span<(string name, object value)> @params = [
            ("InSoftObjectPath", InSoftObjectPath), 
            ("PathString", PathString)
        ];
        ProcessEvent(GetFunction("BreakSoftObjectPath"), @params);
    }
    public void BreakSoftClassPath(FSoftClassPath InSoftClassPath, ref FString PathString)
    {
        Span<(string name, object value)> @params = [
            ("InSoftClassPath", InSoftClassPath), 
            ("PathString", PathString)
        ];
        ProcessEvent(GetFunction("BreakSoftClassPath"), @params);
    }
    public bool BoxTraceSingleForObjects(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, ref TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref FHitResult OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("HalfSize", HalfSize), 
            ("Orientation", Orientation), 
            ("ObjectTypes", ObjectTypes), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHit", OutHit), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("BoxTraceSingleForObjects"), @params);
    }
    public bool BoxTraceSingleByProfile(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, FName ProfileName, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref FHitResult OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("HalfSize", HalfSize), 
            ("Orientation", Orientation), 
            ("ProfileName", ProfileName), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHit", OutHit), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("BoxTraceSingleByProfile"), @params);
    }
    public bool BoxTraceSingle(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, ETraceTypeQuery TraceChannel, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref FHitResult OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("HalfSize", HalfSize), 
            ("Orientation", Orientation), 
            ("TraceChannel", TraceChannel), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHit", OutHit), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("BoxTraceSingle"), @params);
    }
    public bool BoxTraceMultiForObjects(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, ref TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref TArray<FHitResult> OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("HalfSize", HalfSize), 
            ("Orientation", Orientation), 
            ("ObjectTypes", ObjectTypes), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHits", OutHits), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("BoxTraceMultiForObjects"), @params);
    }
    public bool BoxTraceMultiByProfile(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, FName ProfileName, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref TArray<FHitResult> OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("HalfSize", HalfSize), 
            ("Orientation", Orientation), 
            ("ProfileName", ProfileName), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHits", OutHits), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("BoxTraceMultiByProfile"), @params);
    }
    public bool BoxTraceMulti(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, ETraceTypeQuery TraceChannel, bool bTraceComplex, ref TArray<IntPtr> ActorsToIgnore, EDrawDebugTrace DrawDebugType, ref TArray<FHitResult> OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Start", Start), 
            ("End", End), 
            ("HalfSize", HalfSize), 
            ("Orientation", Orientation), 
            ("TraceChannel", TraceChannel), 
            ("bTraceComplex", bTraceComplex), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("DrawDebugType", DrawDebugType), 
            ("OutHits", OutHits), 
            ("bIgnoreSelf", bIgnoreSelf), 
            ("TraceColor", TraceColor), 
            ("TraceHitColor", TraceHitColor), 
            ("DrawTime", DrawTime)
        ];
        return ProcessEvent<bool>(GetFunction("BoxTraceMulti"), @params);
    }
    public bool BoxOverlapComponents(UObject* WorldContextObject, FVector BoxPos, FVector Extent, ref TArray<EObjectTypeQuery> ObjectTypes, UClass* ComponentClassFilter, ref TArray<IntPtr> ActorsToIgnore, ref TArray<IntPtr> OutComponents)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("BoxPos", BoxPos), 
            ("Extent", Extent), 
            ("ObjectTypes", ObjectTypes), 
            ("ComponentClassFilter", (IntPtr)ComponentClassFilter), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("OutComponents", OutComponents)
        ];
        return ProcessEvent<bool>(GetFunction("BoxOverlapComponents"), @params);
    }
    public bool BoxOverlapActors(UObject* WorldContextObject, FVector BoxPos, FVector BoxExtent, ref TArray<EObjectTypeQuery> ObjectTypes, UClass* ActorClassFilter, ref TArray<IntPtr> ActorsToIgnore, ref TArray<IntPtr> OutActors)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("BoxPos", BoxPos), 
            ("BoxExtent", BoxExtent), 
            ("ObjectTypes", ObjectTypes), 
            ("ActorClassFilter", (IntPtr)ActorClassFilter), 
            ("ActorsToIgnore", ActorsToIgnore), 
            ("OutActors", OutActors)
        ];
        return ProcessEvent<bool>(GetFunction("BoxOverlapActors"), @params);
    }
    public int BeginTransaction(FString Context, FText Description, UObject* PrimaryObject)
    {
        Span<(string name, object value)> @params = [
            ("Context", Context), 
            ("Description", Description), 
            ("PrimaryObject", (IntPtr)PrimaryObject)
        ];
        return ProcessEvent<int>(GetFunction("BeginTransaction"), @params);
    }
    public FDebugFloatHistory AddFloatHistorySample(float Value, ref FDebugFloatHistory FloatHistory)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("FloatHistory", FloatHistory)
        ];
        return ProcessEvent<FDebugFloatHistory>(GetFunction("AddFloatHistorySample"), @params);
    }
}

public unsafe class KismetTextLibrary : ObjectBase<UKismetTextLibrary>
{
    public KismetTextLibrary(IntPtr pointer) : base(pointer) {}
    public FText TextTrimTrailing(ref FText InText)
    {
        Span<(string name, object value)> @params = [
            ("InText", InText)
        ];
        return ProcessEvent<FText>(GetFunction("TextTrimTrailing"), @params);
    }
    public FText TextTrimPrecedingAndTrailing(ref FText InText)
    {
        Span<(string name, object value)> @params = [
            ("InText", InText)
        ];
        return ProcessEvent<FText>(GetFunction("TextTrimPrecedingAndTrailing"), @params);
    }
    public FText TextTrimPreceding(ref FText InText)
    {
        Span<(string name, object value)> @params = [
            ("InText", InText)
        ];
        return ProcessEvent<FText>(GetFunction("TextTrimPreceding"), @params);
    }
    public FText TextToUpper(ref FText InText)
    {
        Span<(string name, object value)> @params = [
            ("InText", InText)
        ];
        return ProcessEvent<FText>(GetFunction("TextToUpper"), @params);
    }
    public FText TextToLower(ref FText InText)
    {
        Span<(string name, object value)> @params = [
            ("InText", InText)
        ];
        return ProcessEvent<FText>(GetFunction("TextToLower"), @params);
    }
    public bool TextIsTransient(ref FText InText)
    {
        Span<(string name, object value)> @params = [
            ("InText", InText)
        ];
        return ProcessEvent<bool>(GetFunction("TextIsTransient"), @params);
    }
    public bool TextIsFromStringTable(ref FText Text)
    {
        Span<(string name, object value)> @params = [
            ("Text", Text)
        ];
        return ProcessEvent<bool>(GetFunction("TextIsFromStringTable"), @params);
    }
    public bool TextIsEmpty(ref FText InText)
    {
        Span<(string name, object value)> @params = [
            ("InText", InText)
        ];
        return ProcessEvent<bool>(GetFunction("TextIsEmpty"), @params);
    }
    public bool TextIsCultureInvariant(ref FText InText)
    {
        Span<(string name, object value)> @params = [
            ("InText", InText)
        ];
        return ProcessEvent<bool>(GetFunction("TextIsCultureInvariant"), @params);
    }
    public FText TextFromStringTable(FName TableId, FString Key)
    {
        Span<(string name, object value)> @params = [
            ("TableId", TableId), 
            ("Key", Key)
        ];
        return ProcessEvent<FText>(GetFunction("TextFromStringTable"), @params);
    }
    public bool StringTableIdAndKeyFromText(FText Text, ref FName OutTableId, ref FString OutKey)
    {
        Span<(string name, object value)> @params = [
            ("Text", Text), 
            ("OutTableId", OutTableId), 
            ("OutKey", OutKey)
        ];
        return ProcessEvent<bool>(GetFunction("StringTableIdAndKeyFromText"), @params);
    }
    public FText PolyglotDataToText(ref FPolyglotTextData PolyglotData)
    {
        Span<(string name, object value)> @params = [
            ("PolyglotData", PolyglotData)
        ];
        return ProcessEvent<FText>(GetFunction("PolyglotDataToText"), @params);
    }
    public bool NotEqual_TextText(ref FText A, ref FText B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_TextText"), @params);
    }
    public bool NotEqual_IgnoreCase_TextText(ref FText A, ref FText B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("NotEqual_IgnoreCase_TextText"), @params);
    }
    public void IsPolyglotDataValid(ref FPolyglotTextData PolyglotData, ref bool IsValid, ref FText ErrorMessage)
    {
        Span<(string name, object value)> @params = [
            ("PolyglotData", PolyglotData), 
            ("IsValid", IsValid), 
            ("ErrorMessage", ErrorMessage)
        ];
        ProcessEvent(GetFunction("IsPolyglotDataValid"), @params);
    }
    public FText GetEmptyText()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FText>(GetFunction("GetEmptyText"), @params);
    }
    public FText Format(FText InPattern, TArray<FFormatArgumentData> InArgs)
    {
        Span<(string name, object value)> @params = [
            ("InPattern", InPattern), 
            ("InArgs", InArgs)
        ];
        return ProcessEvent<FText>(GetFunction("Format"), @params);
    }
    public bool FindTextInLocalizationTable(FString Namespace, FString Key, ref FText OutText)
    {
        Span<(string name, object value)> @params = [
            ("Namespace", Namespace), 
            ("Key", Key), 
            ("OutText", OutText)
        ];
        return ProcessEvent<bool>(GetFunction("FindTextInLocalizationTable"), @params);
    }
    public bool EqualEqual_TextText(ref FText A, ref FText B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_TextText"), @params);
    }
    public bool EqualEqual_IgnoreCase_TextText(ref FText A, ref FText B)
    {
        Span<(string name, object value)> @params = [
            ("A", A), 
            ("B", B)
        ];
        return ProcessEvent<bool>(GetFunction("EqualEqual_IgnoreCase_TextText"), @params);
    }
    public FText Conv_VectorToText(FVector InVec)
    {
        Span<(string name, object value)> @params = [
            ("InVec", InVec)
        ];
        return ProcessEvent<FText>(GetFunction("Conv_VectorToText"), @params);
    }
    public FText Conv_Vector2dToText(FVector2D InVec)
    {
        Span<(string name, object value)> @params = [
            ("InVec", InVec)
        ];
        return ProcessEvent<FText>(GetFunction("Conv_Vector2dToText"), @params);
    }
    public FText Conv_TransformToText(ref FTransform InTrans)
    {
        Span<(string name, object value)> @params = [
            ("InTrans", InTrans)
        ];
        return ProcessEvent<FText>(GetFunction("Conv_TransformToText"), @params);
    }
    public FString Conv_TextToString(ref FText InText)
    {
        Span<(string name, object value)> @params = [
            ("InText", InText)
        ];
        return ProcessEvent<FString>(GetFunction("Conv_TextToString"), @params);
    }
    public FText Conv_StringToText(FString inString)
    {
        Span<(string name, object value)> @params = [
            ("inString", inString)
        ];
        return ProcessEvent<FText>(GetFunction("Conv_StringToText"), @params);
    }
    public FText Conv_RotatorToText(FRotator InRot)
    {
        Span<(string name, object value)> @params = [
            ("InRot", InRot)
        ];
        return ProcessEvent<FText>(GetFunction("Conv_RotatorToText"), @params);
    }
    public FText Conv_ObjectToText(UObject* InObj)
    {
        Span<(string name, object value)> @params = [
            ("InObj", (IntPtr)InObj)
        ];
        return ProcessEvent<FText>(GetFunction("Conv_ObjectToText"), @params);
    }
    public FText Conv_NameToText(FName InName)
    {
        Span<(string name, object value)> @params = [
            ("InName", InName)
        ];
        return ProcessEvent<FText>(GetFunction("Conv_NameToText"), @params);
    }
    public FText Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("bAlwaysSign", bAlwaysSign), 
            ("bUseGrouping", bUseGrouping), 
            ("MinimumIntegralDigits", MinimumIntegralDigits), 
            ("MaximumIntegralDigits", MaximumIntegralDigits)
        ];
        return ProcessEvent<FText>(GetFunction("Conv_IntToText"), @params);
    }
    public FText Conv_Int64ToText(long Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("bAlwaysSign", bAlwaysSign), 
            ("bUseGrouping", bUseGrouping), 
            ("MinimumIntegralDigits", MinimumIntegralDigits), 
            ("MaximumIntegralDigits", MaximumIntegralDigits)
        ];
        return ProcessEvent<FText>(GetFunction("Conv_Int64ToText"), @params);
    }
    public FText Conv_FloatToText(float Value, ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("RoundingMode", RoundingMode), 
            ("bAlwaysSign", bAlwaysSign), 
            ("bUseGrouping", bUseGrouping), 
            ("MinimumIntegralDigits", MinimumIntegralDigits), 
            ("MaximumIntegralDigits", MaximumIntegralDigits), 
            ("MinimumFractionalDigits", MinimumFractionalDigits), 
            ("MaximumFractionalDigits", MaximumFractionalDigits)
        ];
        return ProcessEvent<FText>(GetFunction("Conv_FloatToText"), @params);
    }
    public FText Conv_ColorToText(FLinearColor InColor)
    {
        Span<(string name, object value)> @params = [
            ("InColor", InColor)
        ];
        return ProcessEvent<FText>(GetFunction("Conv_ColorToText"), @params);
    }
    public FText Conv_ByteToText(byte Value)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value)
        ];
        return ProcessEvent<FText>(GetFunction("Conv_ByteToText"), @params);
    }
    public FText Conv_BoolToText(bool InBool)
    {
        Span<(string name, object value)> @params = [
            ("InBool", InBool)
        ];
        return ProcessEvent<FText>(GetFunction("Conv_BoolToText"), @params);
    }
    public FText AsTimeZoneTime_DateTime(ref FDateTime InDateTime, FString InTimeZone)
    {
        Span<(string name, object value)> @params = [
            ("InDateTime", InDateTime), 
            ("InTimeZone", InTimeZone)
        ];
        return ProcessEvent<FText>(GetFunction("AsTimeZoneTime_DateTime"), @params);
    }
    public FText AsTimeZoneDateTime_DateTime(ref FDateTime InDateTime, FString InTimeZone)
    {
        Span<(string name, object value)> @params = [
            ("InDateTime", InDateTime), 
            ("InTimeZone", InTimeZone)
        ];
        return ProcessEvent<FText>(GetFunction("AsTimeZoneDateTime_DateTime"), @params);
    }
    public FText AsTimeZoneDate_DateTime(ref FDateTime InDateTime, FString InTimeZone)
    {
        Span<(string name, object value)> @params = [
            ("InDateTime", InDateTime), 
            ("InTimeZone", InTimeZone)
        ];
        return ProcessEvent<FText>(GetFunction("AsTimeZoneDate_DateTime"), @params);
    }
    public FText AsTimespan_Timespan(ref FTimespan InTimespan)
    {
        Span<(string name, object value)> @params = [
            ("InTimespan", InTimespan)
        ];
        return ProcessEvent<FText>(GetFunction("AsTimespan_Timespan"), @params);
    }
    public FText AsTime_DateTime(ref FDateTime In)
    {
        Span<(string name, object value)> @params = [
            ("In", In)
        ];
        return ProcessEvent<FText>(GetFunction("AsTime_DateTime"), @params);
    }
    public FText AsPercent_Float(float Value, ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("RoundingMode", RoundingMode), 
            ("bAlwaysSign", bAlwaysSign), 
            ("bUseGrouping", bUseGrouping), 
            ("MinimumIntegralDigits", MinimumIntegralDigits), 
            ("MaximumIntegralDigits", MaximumIntegralDigits), 
            ("MinimumFractionalDigits", MinimumFractionalDigits), 
            ("MaximumFractionalDigits", MaximumFractionalDigits)
        ];
        return ProcessEvent<FText>(GetFunction("AsPercent_Float"), @params);
    }
    public FText AsDateTime_DateTime(ref FDateTime In)
    {
        Span<(string name, object value)> @params = [
            ("In", In)
        ];
        return ProcessEvent<FText>(GetFunction("AsDateTime_DateTime"), @params);
    }
    public FText AsDate_DateTime(ref FDateTime InDateTime)
    {
        Span<(string name, object value)> @params = [
            ("InDateTime", InDateTime)
        ];
        return ProcessEvent<FText>(GetFunction("AsDate_DateTime"), @params);
    }
    public FText AsCurrencyBase(int BaseValue, FString CurrencyCode)
    {
        Span<(string name, object value)> @params = [
            ("BaseValue", BaseValue), 
            ("CurrencyCode", CurrencyCode)
        ];
        return ProcessEvent<FText>(GetFunction("AsCurrencyBase"), @params);
    }
    public FText AsCurrency_Integer(int Value, ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("RoundingMode", RoundingMode), 
            ("bAlwaysSign", bAlwaysSign), 
            ("bUseGrouping", bUseGrouping), 
            ("MinimumIntegralDigits", MinimumIntegralDigits), 
            ("MaximumIntegralDigits", MaximumIntegralDigits), 
            ("MinimumFractionalDigits", MinimumFractionalDigits), 
            ("MaximumFractionalDigits", MaximumFractionalDigits), 
            ("CurrencyCode", CurrencyCode)
        ];
        return ProcessEvent<FText>(GetFunction("AsCurrency_Integer"), @params);
    }
    public FText AsCurrency_Float(float Value, ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode)
    {
        Span<(string name, object value)> @params = [
            ("Value", Value), 
            ("RoundingMode", RoundingMode), 
            ("bAlwaysSign", bAlwaysSign), 
            ("bUseGrouping", bUseGrouping), 
            ("MinimumIntegralDigits", MinimumIntegralDigits), 
            ("MaximumIntegralDigits", MaximumIntegralDigits), 
            ("MinimumFractionalDigits", MinimumFractionalDigits), 
            ("MaximumFractionalDigits", MaximumFractionalDigits), 
            ("CurrencyCode", CurrencyCode)
        ];
        return ProcessEvent<FText>(GetFunction("AsCurrency_Float"), @params);
    }
}

public unsafe class Layer : ObjectBase<ULayer>
{
    public Layer(IntPtr pointer) : base(pointer) {}
}

public unsafe class LevelPartitionInterface : ObjectBase<ILevelPartitionInterface>
{
    public LevelPartitionInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class Level : ObjectBase<ULevel>
{
    public Level(IntPtr pointer) : base(pointer) {}
}

public unsafe class LevelActorContainer : ObjectBase<ULevelActorContainer>
{
    public LevelActorContainer(IntPtr pointer) : base(pointer) {}
}

public unsafe class LevelBounds : ObjectBase<ALevelBounds>
{
    public LevelBounds(IntPtr pointer) : base(pointer) {}
}

public unsafe class LevelScriptActor : ObjectBase<ALevelScriptActor>
{
    public LevelScriptActor(IntPtr pointer) : base(pointer) {}
    public void WorldOriginLocationChanged(FIntVector OldOriginLocation, FIntVector NewOriginLocation)
    {
        Span<(string name, object value)> @params = [
            ("OldOriginLocation", OldOriginLocation), 
            ("NewOriginLocation", NewOriginLocation)
        ];
        ProcessEvent(GetFunction("WorldOriginLocationChanged"), @params);
    }
    public void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)
    {
        Span<(string name, object value)> @params = [
            ("bCinematicMode", bCinematicMode), 
            ("bHidePlayer", bHidePlayer), 
            ("bAffectsHUD", bAffectsHUD), 
            ("bAffectsMovement", bAffectsMovement), 
            ("bAffectsTurning", bAffectsTurning)
        ];
        ProcessEvent(GetFunction("SetCinematicMode"), @params);
    }
    public bool RemoteEvent(FName EventName)
    {
        Span<(string name, object value)> @params = [
            ("EventName", EventName)
        ];
        return ProcessEvent<bool>(GetFunction("RemoteEvent"), @params);
    }
    public void LevelReset()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("LevelReset"), @params);
    }
}

public unsafe class LevelScriptBlueprint : ObjectBase<ULevelScriptBlueprint>
{
    public LevelScriptBlueprint(IntPtr pointer) : base(pointer) {}}

public unsafe class World : ObjectBase<UWorld>
{
    public World(IntPtr pointer) : base(pointer) {}
    public AWorldSettings* K2_GetWorldSettings()
    {
        Span<(string name, object value)> @params = [
        ];
        return (AWorldSettings*)ProcessEvent<IntPtr>(GetFunction("K2_GetWorldSettings"), @params);
    }
    public void HandleTimelineScrubbed()
    {
        Span<(string name, object value)> @params = [
        ];
        ProcessEvent(GetFunction("HandleTimelineScrubbed"), @params);
    }
}

public unsafe class LevelStreaming : ObjectBase<ULevelStreaming>
{
    public LevelStreaming(IntPtr pointer) : base(pointer) {}
    public bool ShouldBeLoaded()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("ShouldBeLoaded"), @params);
    }
    public void SetShouldBeVisible(bool bInShouldBeVisible)
    {
        Span<(string name, object value)> @params = [
            ("bInShouldBeVisible", bInShouldBeVisible)
        ];
        ProcessEvent(GetFunction("SetShouldBeVisible"), @params);
    }
    public void SetShouldBeLoaded(bool bInShouldBeLoaded)
    {
        Span<(string name, object value)> @params = [
            ("bInShouldBeLoaded", bInShouldBeLoaded)
        ];
        ProcessEvent(GetFunction("SetShouldBeLoaded"), @params);
    }
    public void SetPriority(int NewPriority)
    {
        Span<(string name, object value)> @params = [
            ("NewPriority", NewPriority)
        ];
        ProcessEvent(GetFunction("SetPriority"), @params);
    }
    public void SetLevelLODIndex(int LODIndex)
    {
        Span<(string name, object value)> @params = [
            ("LODIndex", LODIndex)
        ];
        ProcessEvent(GetFunction("SetLevelLODIndex"), @params);
    }
    public void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval)
    {
        Span<(string name, object value)> @params = [
            ("bInIsRequestingUnloadAndRemoval", bInIsRequestingUnloadAndRemoval)
        ];
        ProcessEvent(GetFunction("SetIsRequestingUnloadAndRemoval"), @params);
    }
    public bool IsStreamingStatePending()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsStreamingStatePending"), @params);
    }
    public bool IsLevelVisible()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsLevelVisible"), @params);
    }
    public bool IsLevelLoaded()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("IsLevelLoaded"), @params);
    }
    public FName GetWorldAssetPackageFName()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FName>(GetFunction("GetWorldAssetPackageFName"), @params);
    }
    public ULevel* GetLoadedLevel()
    {
        Span<(string name, object value)> @params = [
        ];
        return (ULevel*)ProcessEvent<IntPtr>(GetFunction("GetLoadedLevel"), @params);
    }
    public ALevelScriptActor* GetLevelScriptActor()
    {
        Span<(string name, object value)> @params = [
        ];
        return (ALevelScriptActor*)ProcessEvent<IntPtr>(GetFunction("GetLevelScriptActor"), @params);
    }
    public bool GetIsRequestingUnloadAndRemoval()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<bool>(GetFunction("GetIsRequestingUnloadAndRemoval"), @params);
    }
    public ULevelStreaming* CreateInstance(FString UniqueInstanceName)
    {
        Span<(string name, object value)> @params = [
            ("UniqueInstanceName", UniqueInstanceName)
        ];
        return (ULevelStreaming*)ProcessEvent<IntPtr>(GetFunction("CreateInstance"), @params);
    }
}

public unsafe class LevelStreamingAlwaysLoaded : ObjectBase<ULevelStreamingAlwaysLoaded>
{
    public LevelStreamingAlwaysLoaded(IntPtr pointer) : base(pointer) {}}

public unsafe class LevelStreamingDynamic : ObjectBase<ULevelStreamingDynamic>
{
    public LevelStreamingDynamic(IntPtr pointer) : base(pointer) {}
    public ULevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(UObject* WorldContextObject, TSoftObjectPtr<UWorld> Level, FVector Location, FRotator Rotation, ref bool bOutSuccess, FString OptionalLevelNameOverride)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("Level", Level), 
            ("Location", Location), 
            ("Rotation", Rotation), 
            ("bOutSuccess", bOutSuccess), 
            ("OptionalLevelNameOverride", OptionalLevelNameOverride)
        ];
        return (ULevelStreamingDynamic*)ProcessEvent<IntPtr>(GetFunction("LoadLevelInstanceBySoftObjectPtr"), @params);
    }
    public ULevelStreamingDynamic* LoadLevelInstance(UObject* WorldContextObject, FString LevelName, FVector Location, FRotator Rotation, ref bool bOutSuccess, FString OptionalLevelNameOverride)
    {
        Span<(string name, object value)> @params = [
            ("WorldContextObject", (IntPtr)WorldContextObject), 
            ("LevelName", LevelName), 
            ("Location", Location), 
            ("Rotation", Rotation), 
            ("bOutSuccess", bOutSuccess), 
            ("OptionalLevelNameOverride", OptionalLevelNameOverride)
        ];
        return (ULevelStreamingDynamic*)ProcessEvent<IntPtr>(GetFunction("LoadLevelInstance"), @params);
    }
}

public unsafe class LevelStreamingPersistent : ObjectBase<ULevelStreamingPersistent>
{
    public LevelStreamingPersistent(IntPtr pointer) : base(pointer) {}}

public unsafe class LevelStreamingVolume : ObjectBase<ALevelStreamingVolume>
{
    public LevelStreamingVolume(IntPtr pointer) : base(pointer) {}
}

public unsafe class LightmappedSurfaceCollection : ObjectBase<ULightmappedSurfaceCollection>
{
    public LightmappedSurfaceCollection(IntPtr pointer) : base(pointer) {}
}

public unsafe class LightMapTexture2D : ObjectBase<ULightMapTexture2D>
{
    public LightMapTexture2D(IntPtr pointer) : base(pointer) {}}

public unsafe class ParticleModuleTypeDataBeam2 : ObjectBase<UParticleModuleTypeDataBeam2>
{
    public ParticleModuleTypeDataBeam2(IntPtr pointer) : base(pointer) {}
}

public unsafe class LightMapVirtualTexture2D : ObjectBase<ULightMapVirtualTexture2D>
{
    public LightMapVirtualTexture2D(IntPtr pointer) : base(pointer) {}
}

public unsafe class LightmassCharacterIndirectDetailVolume : ObjectBase<ALightmassCharacterIndirectDetailVolume>
{
    public LightmassCharacterIndirectDetailVolume(IntPtr pointer) : base(pointer) {}}

public unsafe class LightmassImportanceVolume : ObjectBase<ALightmassImportanceVolume>
{
    public LightmassImportanceVolume(IntPtr pointer) : base(pointer) {}}

public unsafe class LightmassPortal : ObjectBase<ALightmassPortal>
{
    public LightmassPortal(IntPtr pointer) : base(pointer) {}
}

public unsafe class LightmassPortalComponent : ObjectBase<ULightmassPortalComponent>
{
    public LightmassPortalComponent(IntPtr pointer) : base(pointer) {}
}

public unsafe class LightmassPrimitiveSettingsObject : ObjectBase<ULightmassPrimitiveSettingsObject>
{
    public LightmassPrimitiveSettingsObject(IntPtr pointer) : base(pointer) {}
}

public unsafe class LineBatchComponent : ObjectBase<ULineBatchComponent>
{
    public LineBatchComponent(IntPtr pointer) : base(pointer) {}}

public unsafe class LocalLightComponent : ObjectBase<ULocalLightComponent>
{
    public LocalLightComponent(IntPtr pointer) : base(pointer) {}
    public void SetIntensityUnits(ELightUnits NewIntensityUnits)
    {
        Span<(string name, object value)> @params = [
            ("NewIntensityUnits", NewIntensityUnits)
        ];
        ProcessEvent(GetFunction("SetIntensityUnits"), @params);
    }
    public void SetAttenuationRadius(float NewRadius)
    {
        Span<(string name, object value)> @params = [
            ("NewRadius", NewRadius)
        ];
        ProcessEvent(GetFunction("SetAttenuationRadius"), @params);
    }
    public float GetUnitsConversionFactor(ELightUnits SrcUnits, ELightUnits TargetUnits, float CosHalfConeAngle)
    {
        Span<(string name, object value)> @params = [
            ("SrcUnits", SrcUnits), 
            ("TargetUnits", TargetUnits), 
            ("CosHalfConeAngle", CosHalfConeAngle)
        ];
        return ProcessEvent<float>(GetFunction("GetUnitsConversionFactor"), @params);
    }
}

public unsafe class LocalPlayer : ObjectBase<ULocalPlayer>
{
    public LocalPlayer(IntPtr pointer) : base(pointer) {}
}

public unsafe class LocalPlayerSubsystem : ObjectBase<ULocalPlayerSubsystem>
{
    public LocalPlayerSubsystem(IntPtr pointer) : base(pointer) {}}

public unsafe class LODActor : ObjectBase<ALODActor>
{
    public LODActor(IntPtr pointer) : base(pointer) {}
}

public unsafe class LODSyncComponent : ObjectBase<ULODSyncComponent>
{
    public LODSyncComponent(IntPtr pointer) : base(pointer) {}
    public FString GetLODSyncDebugText()
    {
        Span<(string name, object value)> @params = [
        ];
        return ProcessEvent<FString>(GetFunction("GetLODSyncDebugText"), @params);
    }
}

public unsafe class LODSyncInterface : ObjectBase<ILODSyncInterface>
{
    public LODSyncInterface(IntPtr pointer) : base(pointer) {}}

public unsafe class MapBuildDataRegistry : ObjectBase<UMapBuildDataRegistry>
{
    public MapBuildDataRegistry(IntPtr pointer) : base(pointer) {}
}

public unsafe class Material : ObjectBase<UMaterial>
{
    public Material(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialBillboardComponent : ObjectBase<UMaterialBillboardComponent>
{
    public MaterialBillboardComponent(IntPtr pointer) : base(pointer) {}
    public void SetElements(ref TArray<FMaterialSpriteElement> NewElements)
    {
        Span<(string name, object value)> @params = [
            ("NewElements", NewElements)
        ];
        ProcessEvent(GetFunction("SetElements"), @params);
    }
    public void AddElement(UMaterialInterface* Material, UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, UCurveFloat* DistanceToSizeCurve)
    {
        Span<(string name, object value)> @params = [
            ("Material", (IntPtr)Material), 
            ("DistanceToOpacityCurve", (IntPtr)DistanceToOpacityCurve), 
            ("bSizeIsInScreenSpace", bSizeIsInScreenSpace), 
            ("BaseSizeX", BaseSizeX), 
            ("BaseSizeY", BaseSizeY), 
            ("DistanceToSizeCurve", (IntPtr)DistanceToSizeCurve)
        ];
        ProcessEvent(GetFunction("AddElement"), @params);
    }
}

public unsafe class MaterialExpressionAbs : ObjectBase<UMaterialExpressionAbs>
{
    public MaterialExpressionAbs(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionActorPositionWS : ObjectBase<UMaterialExpressionActorPositionWS>
{
    public MaterialExpressionActorPositionWS(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionAdd : ObjectBase<UMaterialExpressionAdd>
{
    public MaterialExpressionAdd(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionAntialiasedTextureMask : ObjectBase<UMaterialExpressionAntialiasedTextureMask>
{
    public MaterialExpressionAntialiasedTextureMask(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionAppendVector : ObjectBase<UMaterialExpressionAppendVector>
{
    public MaterialExpressionAppendVector(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionArccosine : ObjectBase<UMaterialExpressionArccosine>
{
    public MaterialExpressionArccosine(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionArccosineFast : ObjectBase<UMaterialExpressionArccosineFast>
{
    public MaterialExpressionArccosineFast(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionArcsine : ObjectBase<UMaterialExpressionArcsine>
{
    public MaterialExpressionArcsine(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionArcsineFast : ObjectBase<UMaterialExpressionArcsineFast>
{
    public MaterialExpressionArcsineFast(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionArctangent : ObjectBase<UMaterialExpressionArctangent>
{
    public MaterialExpressionArctangent(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionArctangent2 : ObjectBase<UMaterialExpressionArctangent2>
{
    public MaterialExpressionArctangent2(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionArctangent2Fast : ObjectBase<UMaterialExpressionArctangent2Fast>
{
    public MaterialExpressionArctangent2Fast(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionArctangentFast : ObjectBase<UMaterialExpressionArctangentFast>
{
    public MaterialExpressionArctangentFast(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionAtmosphericFogColor : ObjectBase<UMaterialExpressionAtmosphericFogColor>
{
    public MaterialExpressionAtmosphericFogColor(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionAtmosphericLightColor : ObjectBase<UMaterialExpressionAtmosphericLightColor>
{
    public MaterialExpressionAtmosphericLightColor(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionAtmosphericLightVector : ObjectBase<UMaterialExpressionAtmosphericLightVector>
{
    public MaterialExpressionAtmosphericLightVector(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionBentNormalCustomOutput : ObjectBase<UMaterialExpressionBentNormalCustomOutput>
{
    public MaterialExpressionBentNormalCustomOutput(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionBlackBody : ObjectBase<UMaterialExpressionBlackBody>
{
    public MaterialExpressionBlackBody(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionBlendMaterialAttributes : ObjectBase<UMaterialExpressionBlendMaterialAttributes>
{
    public MaterialExpressionBlendMaterialAttributes(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionBreakMaterialAttributes : ObjectBase<UMaterialExpressionBreakMaterialAttributes>
{
    public MaterialExpressionBreakMaterialAttributes(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionBumpOffset : ObjectBase<UMaterialExpressionBumpOffset>
{
    public MaterialExpressionBumpOffset(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionCameraPositionWS : ObjectBase<UMaterialExpressionCameraPositionWS>
{
    public MaterialExpressionCameraPositionWS(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionCameraVectorWS : ObjectBase<UMaterialExpressionCameraVectorWS>
{
    public MaterialExpressionCameraVectorWS(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionCeil : ObjectBase<UMaterialExpressionCeil>
{
    public MaterialExpressionCeil(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionParameter : ObjectBase<UMaterialExpressionParameter>
{
    public MaterialExpressionParameter(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionVectorParameter : ObjectBase<UMaterialExpressionVectorParameter>
{
    public MaterialExpressionVectorParameter(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionChannelMaskParameter : ObjectBase<UMaterialExpressionChannelMaskParameter>
{
    public MaterialExpressionChannelMaskParameter(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionClamp : ObjectBase<UMaterialExpressionClamp>
{
    public MaterialExpressionClamp(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionClearCoatNormalCustomOutput : ObjectBase<UMaterialExpressionClearCoatNormalCustomOutput>
{
    public MaterialExpressionClearCoatNormalCustomOutput(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionCloudSampleAttribute : ObjectBase<UMaterialExpressionCloudSampleAttribute>
{
    public MaterialExpressionCloudSampleAttribute(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionCollectionParameter : ObjectBase<UMaterialExpressionCollectionParameter>
{
    public MaterialExpressionCollectionParameter(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionComment : ObjectBase<UMaterialExpressionComment>
{
    public MaterialExpressionComment(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionComponentMask : ObjectBase<UMaterialExpressionComponentMask>
{
    public MaterialExpressionComponentMask(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionConstant : ObjectBase<UMaterialExpressionConstant>
{
    public MaterialExpressionConstant(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionConstant2Vector : ObjectBase<UMaterialExpressionConstant2Vector>
{
    public MaterialExpressionConstant2Vector(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionConstant3Vector : ObjectBase<UMaterialExpressionConstant3Vector>
{
    public MaterialExpressionConstant3Vector(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionConstant4Vector : ObjectBase<UMaterialExpressionConstant4Vector>
{
    public MaterialExpressionConstant4Vector(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionConstantBiasScale : ObjectBase<UMaterialExpressionConstantBiasScale>
{
    public MaterialExpressionConstantBiasScale(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionCosine : ObjectBase<UMaterialExpressionCosine>
{
    public MaterialExpressionCosine(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionCrossProduct : ObjectBase<UMaterialExpressionCrossProduct>
{
    public MaterialExpressionCrossProduct(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionScalarParameter : ObjectBase<UMaterialExpressionScalarParameter>
{
    public MaterialExpressionScalarParameter(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionCurveAtlasRowParameter : ObjectBase<UMaterialExpressionCurveAtlasRowParameter>
{
    public MaterialExpressionCurveAtlasRowParameter(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionCustom : ObjectBase<UMaterialExpressionCustom>
{
    public MaterialExpressionCustom(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionDDX : ObjectBase<UMaterialExpressionDDX>
{
    public MaterialExpressionDDX(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionDDY : ObjectBase<UMaterialExpressionDDY>
{
    public MaterialExpressionDDY(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionDecalDerivative : ObjectBase<UMaterialExpressionDecalDerivative>
{
    public MaterialExpressionDecalDerivative(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionDecalLifetimeOpacity : ObjectBase<UMaterialExpressionDecalLifetimeOpacity>
{
    public MaterialExpressionDecalLifetimeOpacity(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionDecalMipmapLevel : ObjectBase<UMaterialExpressionDecalMipmapLevel>
{
    public MaterialExpressionDecalMipmapLevel(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionDeltaTime : ObjectBase<UMaterialExpressionDeltaTime>
{
    public MaterialExpressionDeltaTime(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionDepthFade : ObjectBase<UMaterialExpressionDepthFade>
{
    public MaterialExpressionDepthFade(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionDepthOfFieldFunction : ObjectBase<UMaterialExpressionDepthOfFieldFunction>
{
    public MaterialExpressionDepthOfFieldFunction(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionDeriveNormalZ : ObjectBase<UMaterialExpressionDeriveNormalZ>
{
    public MaterialExpressionDeriveNormalZ(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionDesaturation : ObjectBase<UMaterialExpressionDesaturation>
{
    public MaterialExpressionDesaturation(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionDistance : ObjectBase<UMaterialExpressionDistance>
{
    public MaterialExpressionDistance(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionDistanceCullFade : ObjectBase<UMaterialExpressionDistanceCullFade>
{
    public MaterialExpressionDistanceCullFade(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionDistanceFieldGradient : ObjectBase<UMaterialExpressionDistanceFieldGradient>
{
    public MaterialExpressionDistanceFieldGradient(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionDistanceFieldsRenderingSwitch : ObjectBase<UMaterialExpressionDistanceFieldsRenderingSwitch>
{
    public MaterialExpressionDistanceFieldsRenderingSwitch(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionDistanceToNearestSurface : ObjectBase<UMaterialExpressionDistanceToNearestSurface>
{
    public MaterialExpressionDistanceToNearestSurface(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionDivide : ObjectBase<UMaterialExpressionDivide>
{
    public MaterialExpressionDivide(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionDotProduct : ObjectBase<UMaterialExpressionDotProduct>
{
    public MaterialExpressionDotProduct(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionDynamicParameter : ObjectBase<UMaterialExpressionDynamicParameter>
{
    public MaterialExpressionDynamicParameter(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionEyeAdaptation : ObjectBase<UMaterialExpressionEyeAdaptation>
{
    public MaterialExpressionEyeAdaptation(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionFeatureLevelSwitch : ObjectBase<UMaterialExpressionFeatureLevelSwitch>
{
    public MaterialExpressionFeatureLevelSwitch(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionFloor : ObjectBase<UMaterialExpressionFloor>
{
    public MaterialExpressionFloor(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionFmod : ObjectBase<UMaterialExpressionFmod>
{
    public MaterialExpressionFmod(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionFontSample : ObjectBase<UMaterialExpressionFontSample>
{
    public MaterialExpressionFontSample(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionFontSampleParameter : ObjectBase<UMaterialExpressionFontSampleParameter>
{
    public MaterialExpressionFontSampleParameter(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionFrac : ObjectBase<UMaterialExpressionFrac>
{
    public MaterialExpressionFrac(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionFresnel : ObjectBase<UMaterialExpressionFresnel>
{
    public MaterialExpressionFresnel(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionFunctionInput : ObjectBase<UMaterialExpressionFunctionInput>
{
    public MaterialExpressionFunctionInput(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionFunctionOutput : ObjectBase<UMaterialExpressionFunctionOutput>
{
    public MaterialExpressionFunctionOutput(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionGetMaterialAttributes : ObjectBase<UMaterialExpressionGetMaterialAttributes>
{
    public MaterialExpressionGetMaterialAttributes(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionGIReplace : ObjectBase<UMaterialExpressionGIReplace>
{
    public MaterialExpressionGIReplace(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionHairAttributes : ObjectBase<UMaterialExpressionHairAttributes>
{
    public MaterialExpressionHairAttributes(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionHairColor : ObjectBase<UMaterialExpressionHairColor>
{
    public MaterialExpressionHairColor(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionIf : ObjectBase<UMaterialExpressionIf>
{
    public MaterialExpressionIf(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionInverseLinearInterpolate : ObjectBase<UMaterialExpressionInverseLinearInterpolate>
{
    public MaterialExpressionInverseLinearInterpolate(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionLightmapUVs : ObjectBase<UMaterialExpressionLightmapUVs>
{
    public MaterialExpressionLightmapUVs(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionLightmassReplace : ObjectBase<UMaterialExpressionLightmassReplace>
{
    public MaterialExpressionLightmassReplace(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionLightVector : ObjectBase<UMaterialExpressionLightVector>
{
    public MaterialExpressionLightVector(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionLinearInterpolate : ObjectBase<UMaterialExpressionLinearInterpolate>
{
    public MaterialExpressionLinearInterpolate(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionLogarithm10 : ObjectBase<UMaterialExpressionLogarithm10>
{
    public MaterialExpressionLogarithm10(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionLogarithm2 : ObjectBase<UMaterialExpressionLogarithm2>
{
    public MaterialExpressionLogarithm2(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionMakeMaterialAttributes : ObjectBase<UMaterialExpressionMakeMaterialAttributes>
{
    public MaterialExpressionMakeMaterialAttributes(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionMapARPassthroughCameraUV : ObjectBase<UMaterialExpressionMapARPassthroughCameraUV>
{
    public MaterialExpressionMapARPassthroughCameraUV(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionMaterialAttributeLayers : ObjectBase<UMaterialExpressionMaterialAttributeLayers>
{
    public MaterialExpressionMaterialAttributeLayers(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionMaterialFunctionCall : ObjectBase<UMaterialExpressionMaterialFunctionCall>
{
    public MaterialExpressionMaterialFunctionCall(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionMaterialLayerOutput : ObjectBase<UMaterialExpressionMaterialLayerOutput>
{
    public MaterialExpressionMaterialLayerOutput(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionMaterialProxyReplace : ObjectBase<UMaterialExpressionMaterialProxyReplace>
{
    public MaterialExpressionMaterialProxyReplace(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionMax : ObjectBase<UMaterialExpressionMax>
{
    public MaterialExpressionMax(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionMin : ObjectBase<UMaterialExpressionMin>
{
    public MaterialExpressionMin(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionMultiply : ObjectBase<UMaterialExpressionMultiply>
{
    public MaterialExpressionMultiply(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionRerouteBase : ObjectBase<UMaterialExpressionRerouteBase>
{
    public MaterialExpressionRerouteBase(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionNamedRerouteBase : ObjectBase<UMaterialExpressionNamedRerouteBase>
{
    public MaterialExpressionNamedRerouteBase(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionNamedRerouteDeclaration : ObjectBase<UMaterialExpressionNamedRerouteDeclaration>
{
    public MaterialExpressionNamedRerouteDeclaration(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionNamedRerouteUsage : ObjectBase<UMaterialExpressionNamedRerouteUsage>
{
    public MaterialExpressionNamedRerouteUsage(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionNoise : ObjectBase<UMaterialExpressionNoise>
{
    public MaterialExpressionNoise(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionNormalize : ObjectBase<UMaterialExpressionNormalize>
{
    public MaterialExpressionNormalize(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionObjectBounds : ObjectBase<UMaterialExpressionObjectBounds>
{
    public MaterialExpressionObjectBounds(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionObjectOrientation : ObjectBase<UMaterialExpressionObjectOrientation>
{
    public MaterialExpressionObjectOrientation(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionObjectPositionWS : ObjectBase<UMaterialExpressionObjectPositionWS>
{
    public MaterialExpressionObjectPositionWS(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionObjectRadius : ObjectBase<UMaterialExpressionObjectRadius>
{
    public MaterialExpressionObjectRadius(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionOneMinus : ObjectBase<UMaterialExpressionOneMinus>
{
    public MaterialExpressionOneMinus(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionPanner : ObjectBase<UMaterialExpressionPanner>
{
    public MaterialExpressionPanner(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionParticleColor : ObjectBase<UMaterialExpressionParticleColor>
{
    public MaterialExpressionParticleColor(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionParticleDirection : ObjectBase<UMaterialExpressionParticleDirection>
{
    public MaterialExpressionParticleDirection(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionParticleMacroUV : ObjectBase<UMaterialExpressionParticleMacroUV>
{
    public MaterialExpressionParticleMacroUV(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionParticleMotionBlurFade : ObjectBase<UMaterialExpressionParticleMotionBlurFade>
{
    public MaterialExpressionParticleMotionBlurFade(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionParticlePositionWS : ObjectBase<UMaterialExpressionParticlePositionWS>
{
    public MaterialExpressionParticlePositionWS(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionParticleRadius : ObjectBase<UMaterialExpressionParticleRadius>
{
    public MaterialExpressionParticleRadius(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionParticleRandom : ObjectBase<UMaterialExpressionParticleRandom>
{
    public MaterialExpressionParticleRandom(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionParticleRelativeTime : ObjectBase<UMaterialExpressionParticleRelativeTime>
{
    public MaterialExpressionParticleRelativeTime(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionParticleSize : ObjectBase<UMaterialExpressionParticleSize>
{
    public MaterialExpressionParticleSize(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionParticleSpeed : ObjectBase<UMaterialExpressionParticleSpeed>
{
    public MaterialExpressionParticleSpeed(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionParticleSubUV : ObjectBase<UMaterialExpressionParticleSubUV>
{
    public MaterialExpressionParticleSubUV(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionParticleSubUVProperties : ObjectBase<UMaterialExpressionParticleSubUVProperties>
{
    public MaterialExpressionParticleSubUVProperties(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionPerInstanceCustomData : ObjectBase<UMaterialExpressionPerInstanceCustomData>
{
    public MaterialExpressionPerInstanceCustomData(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionPerInstanceFadeAmount : ObjectBase<UMaterialExpressionPerInstanceFadeAmount>
{
    public MaterialExpressionPerInstanceFadeAmount(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionPerInstanceRandom : ObjectBase<UMaterialExpressionPerInstanceRandom>
{
    public MaterialExpressionPerInstanceRandom(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionPixelDepth : ObjectBase<UMaterialExpressionPixelDepth>
{
    public MaterialExpressionPixelDepth(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionPixelNormalWS : ObjectBase<UMaterialExpressionPixelNormalWS>
{
    public MaterialExpressionPixelNormalWS(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionPower : ObjectBase<UMaterialExpressionPower>
{
    public MaterialExpressionPower(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionPrecomputedAOMask : ObjectBase<UMaterialExpressionPrecomputedAOMask>
{
    public MaterialExpressionPrecomputedAOMask(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionPreSkinnedLocalBounds : ObjectBase<UMaterialExpressionPreSkinnedLocalBounds>
{
    public MaterialExpressionPreSkinnedLocalBounds(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionPreSkinnedNormal : ObjectBase<UMaterialExpressionPreSkinnedNormal>
{
    public MaterialExpressionPreSkinnedNormal(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionPreSkinnedPosition : ObjectBase<UMaterialExpressionPreSkinnedPosition>
{
    public MaterialExpressionPreSkinnedPosition(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionPreviousFrameSwitch : ObjectBase<UMaterialExpressionPreviousFrameSwitch>
{
    public MaterialExpressionPreviousFrameSwitch(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionQualitySwitch : ObjectBase<UMaterialExpressionQualitySwitch>
{
    public MaterialExpressionQualitySwitch(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionRayTracingQualitySwitch : ObjectBase<UMaterialExpressionRayTracingQualitySwitch>
{
    public MaterialExpressionRayTracingQualitySwitch(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionReflectionCapturePassSwitch : ObjectBase<UMaterialExpressionReflectionCapturePassSwitch>
{
    public MaterialExpressionReflectionCapturePassSwitch(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionReflectionVectorWS : ObjectBase<UMaterialExpressionReflectionVectorWS>
{
    public MaterialExpressionReflectionVectorWS(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionReroute : ObjectBase<UMaterialExpressionReroute>
{
    public MaterialExpressionReroute(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionRotateAboutAxis : ObjectBase<UMaterialExpressionRotateAboutAxis>
{
    public MaterialExpressionRotateAboutAxis(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionRotator : ObjectBase<UMaterialExpressionRotator>
{
    public MaterialExpressionRotator(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionRound : ObjectBase<UMaterialExpressionRound>
{
    public MaterialExpressionRound(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionRuntimeVirtualTextureOutput : ObjectBase<UMaterialExpressionRuntimeVirtualTextureOutput>
{
    public MaterialExpressionRuntimeVirtualTextureOutput(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionRuntimeVirtualTextureReplace : ObjectBase<UMaterialExpressionRuntimeVirtualTextureReplace>
{
    public MaterialExpressionRuntimeVirtualTextureReplace(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionRuntimeVirtualTextureSample : ObjectBase<UMaterialExpressionRuntimeVirtualTextureSample>
{
    public MaterialExpressionRuntimeVirtualTextureSample(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionRuntimeVirtualTextureSampleParameter : ObjectBase<UMaterialExpressionRuntimeVirtualTextureSampleParameter>
{
    public MaterialExpressionRuntimeVirtualTextureSampleParameter(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSamplePhysicsVectorField : ObjectBase<UMaterialExpressionSamplePhysicsVectorField>
{
    public MaterialExpressionSamplePhysicsVectorField(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSamplePhysicsScalarField : ObjectBase<UMaterialExpressionSamplePhysicsScalarField>
{
    public MaterialExpressionSamplePhysicsScalarField(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSamplePhysicsIntegerField : ObjectBase<UMaterialExpressionSamplePhysicsIntegerField>
{
    public MaterialExpressionSamplePhysicsIntegerField(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSaturate : ObjectBase<UMaterialExpressionSaturate>
{
    public MaterialExpressionSaturate(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSceneColor : ObjectBase<UMaterialExpressionSceneColor>
{
    public MaterialExpressionSceneColor(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSceneDepth : ObjectBase<UMaterialExpressionSceneDepth>
{
    public MaterialExpressionSceneDepth(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSceneDepthWithoutWater : ObjectBase<UMaterialExpressionSceneDepthWithoutWater>
{
    public MaterialExpressionSceneDepthWithoutWater(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSceneTexelSize : ObjectBase<UMaterialExpressionSceneTexelSize>
{
    public MaterialExpressionSceneTexelSize(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionSceneTexture : ObjectBase<UMaterialExpressionSceneTexture>
{
    public MaterialExpressionSceneTexture(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionScreenPosition : ObjectBase<UMaterialExpressionScreenPosition>
{
    public MaterialExpressionScreenPosition(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionSetMaterialAttributes : ObjectBase<UMaterialExpressionSetMaterialAttributes>
{
    public MaterialExpressionSetMaterialAttributes(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionShaderStageSwitch : ObjectBase<UMaterialExpressionShaderStageSwitch>
{
    public MaterialExpressionShaderStageSwitch(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionShadingModel : ObjectBase<UMaterialExpressionShadingModel>
{
    public MaterialExpressionShadingModel(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionShadingPathSwitch : ObjectBase<UMaterialExpressionShadingPathSwitch>
{
    public MaterialExpressionShadingPathSwitch(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionShadowReplace : ObjectBase<UMaterialExpressionShadowReplace>
{
    public MaterialExpressionShadowReplace(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSign : ObjectBase<UMaterialExpressionSign>
{
    public MaterialExpressionSign(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSine : ObjectBase<UMaterialExpressionSine>
{
    public MaterialExpressionSine(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSingleLayerWaterMaterialOutput : ObjectBase<UMaterialExpressionSingleLayerWaterMaterialOutput>
{
    public MaterialExpressionSingleLayerWaterMaterialOutput(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSkinningVertexOffsets : ObjectBase<UMaterialExpressionSkinningVertexOffsets>
{
    public MaterialExpressionSkinningVertexOffsets(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionSkyAtmosphereLightDirection : ObjectBase<UMaterialExpressionSkyAtmosphereLightDirection>
{
    public MaterialExpressionSkyAtmosphereLightDirection(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSkyAtmosphereLightIlluminance : ObjectBase<UMaterialExpressionSkyAtmosphereLightIlluminance>
{
    public MaterialExpressionSkyAtmosphereLightIlluminance(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSkyAtmosphereLightDiskLuminance : ObjectBase<UMaterialExpressionSkyAtmosphereLightDiskLuminance>
{
    public MaterialExpressionSkyAtmosphereLightDiskLuminance(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSkyAtmosphereAerialPerspective : ObjectBase<UMaterialExpressionSkyAtmosphereAerialPerspective>
{
    public MaterialExpressionSkyAtmosphereAerialPerspective(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : ObjectBase<UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance>
{
    public MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionSkyAtmosphereViewLuminance : ObjectBase<UMaterialExpressionSkyAtmosphereViewLuminance>
{
    public MaterialExpressionSkyAtmosphereViewLuminance(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionSmoothStep : ObjectBase<UMaterialExpressionSmoothStep>
{
    public MaterialExpressionSmoothStep(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSobol : ObjectBase<UMaterialExpressionSobol>
{
    public MaterialExpressionSobol(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSpeedTree : ObjectBase<UMaterialExpressionSpeedTree>
{
    public MaterialExpressionSpeedTree(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSphereMask : ObjectBase<UMaterialExpressionSphereMask>
{
    public MaterialExpressionSphereMask(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSphericalParticleOpacity : ObjectBase<UMaterialExpressionSphericalParticleOpacity>
{
    public MaterialExpressionSphericalParticleOpacity(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSquareRoot : ObjectBase<UMaterialExpressionSquareRoot>
{
    public MaterialExpressionSquareRoot(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionStaticBool : ObjectBase<UMaterialExpressionStaticBool>
{
    public MaterialExpressionStaticBool(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionStaticBoolParameter : ObjectBase<UMaterialExpressionStaticBoolParameter>
{
    public MaterialExpressionStaticBoolParameter(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionStaticComponentMaskParameter : ObjectBase<UMaterialExpressionStaticComponentMaskParameter>
{
    public MaterialExpressionStaticComponentMaskParameter(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionStaticSwitch : ObjectBase<UMaterialExpressionStaticSwitch>
{
    public MaterialExpressionStaticSwitch(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionStaticSwitchParameter : ObjectBase<UMaterialExpressionStaticSwitchParameter>
{
    public MaterialExpressionStaticSwitchParameter(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionStep : ObjectBase<UMaterialExpressionStep>
{
    public MaterialExpressionStep(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionSubtract : ObjectBase<UMaterialExpressionSubtract>
{
    public MaterialExpressionSubtract(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionTangent : ObjectBase<UMaterialExpressionTangent>
{
    public MaterialExpressionTangent(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionTangentOutput : ObjectBase<UMaterialExpressionTangentOutput>
{
    public MaterialExpressionTangentOutput(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionTemporalSobol : ObjectBase<UMaterialExpressionTemporalSobol>
{
    public MaterialExpressionTemporalSobol(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionTextureCoordinate : ObjectBase<UMaterialExpressionTextureCoordinate>
{
    public MaterialExpressionTextureCoordinate(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionTextureObject : ObjectBase<UMaterialExpressionTextureObject>
{
    public MaterialExpressionTextureObject(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionTextureObjectParameter : ObjectBase<UMaterialExpressionTextureObjectParameter>
{
    public MaterialExpressionTextureObjectParameter(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionTextureProperty : ObjectBase<UMaterialExpressionTextureProperty>
{
    public MaterialExpressionTextureProperty(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionTextureSampleParameter2DArray : ObjectBase<UMaterialExpressionTextureSampleParameter2DArray>
{
    public MaterialExpressionTextureSampleParameter2DArray(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionTextureSampleParameterCube : ObjectBase<UMaterialExpressionTextureSampleParameterCube>
{
    public MaterialExpressionTextureSampleParameterCube(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionTextureSampleParameterSubUV : ObjectBase<UMaterialExpressionTextureSampleParameterSubUV>
{
    public MaterialExpressionTextureSampleParameterSubUV(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionTextureSampleParameterVolume : ObjectBase<UMaterialExpressionTextureSampleParameterVolume>
{
    public MaterialExpressionTextureSampleParameterVolume(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionThinTranslucentMaterialOutput : ObjectBase<UMaterialExpressionThinTranslucentMaterialOutput>
{
    public MaterialExpressionThinTranslucentMaterialOutput(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionTime : ObjectBase<UMaterialExpressionTime>
{
    public MaterialExpressionTime(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionTransform : ObjectBase<UMaterialExpressionTransform>
{
    public MaterialExpressionTransform(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionTransformPosition : ObjectBase<UMaterialExpressionTransformPosition>
{
    public MaterialExpressionTransformPosition(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionTruncate : ObjectBase<UMaterialExpressionTruncate>
{
    public MaterialExpressionTruncate(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionTwoSidedSign : ObjectBase<UMaterialExpressionTwoSidedSign>
{
    public MaterialExpressionTwoSidedSign(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionVectorNoise : ObjectBase<UMaterialExpressionVectorNoise>
{
    public MaterialExpressionVectorNoise(IntPtr pointer) : base(pointer) {}
}

public unsafe class MaterialExpressionVertexColor : ObjectBase<UMaterialExpressionVertexColor>
{
    public MaterialExpressionVertexColor(IntPtr pointer) : base(pointer) {}}

public unsafe class Default__BlueprintGeneratedClass : ObjectBase<UDefault__BlueprintGeneratedClass>
{
    public Default__BlueprintGeneratedClass(IntPtr pointer) : base(pointer) {}}

public unsafe class Default__AnimBlueprintGeneratedClass : ObjectBase<UDefault__AnimBlueprintGeneratedClass>
{
    public Default__AnimBlueprintGeneratedClass(IntPtr pointer) : base(pointer) {}}

public unsafe class MaterialExpressionVertexInterpolator : ObjectBase<UMaterialExpressionVertexInterpolator>
{
    public MaterialExpressionVertexInterpolator(IntPtr pointer) : base(pointer) {}
}

